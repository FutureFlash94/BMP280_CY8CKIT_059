ARM GAS  uCOS-III\Ports\ARM-Cortex-M3\Generic\GNU\os_cpu_a.s 			page 1


   1              	@
   2              	@**************************************************************************************************
   3              	@                                                uC/OS-III
   4              	@                                          The Real-Time Kernel
   5              	@
   6              	@
   7              	@                           (c) Copyright 2009-2011; Micrium Inc.; Weston, FL
   8              	@                    All rights reserved.  Protected by international copyright laws.
   9              	@
  10              	@                                           ARM Cortex-M3 Port
  11              	@
  12              	@ File      : OS_CPU_A.ASM
  13              	@ Version   : V3.01.2
  14              	@ By        : JJL
  15              	@             FT
  16              	@
  17              	@ For       : ARMv7M Cortex-M3
  18              	@ Mode      : Thumb2
  19              	@ Toolchain : GNU C Compiler
  20              	@**************************************************************************************************
  21              	@
  22              	
  23              	@**************************************************************************************************
  24              	@                                          PUBLIC FUNCTIONS
  25              	@**************************************************************************************************
  26              	
  27              	.extern  OSRunning                                           @ External references.
  28              	.extern  OSPrioCur
  29              	.extern  OSPrioHighRdy
  30              	.extern  OSTCBCurPtr
  31              	.extern  OSTCBHighRdyPtr
  32              	.extern  OSIntExit
  33              	.extern  OSTaskSwHook
  34              	.extern  OS_CPU_ExceptStkBase
  35              	
  36              	
  37              	.global  OSStartHighRdy                                      @ Functions declared in this file.
  38              	.global  OS_CPU_PendSVHandler
  39              	
  40              	@**************************************************************************************************
  41              	@                                               EQUATES
  42              	@**************************************************************************************************
  43              	
  44              	.equ NVIC_INT_CTRL,   0xE000ED04                              @ Interrupt control state register.
  45              	.equ NVIC_SYSPRI14,   0xE000ED22                              @ System priority register (priority 
  46              	.equ NVIC_PENDSV_PRI, 0xFF                                    @ PendSV priority value (lowest).
  47              	.equ NVIC_PENDSVSET,  0x10000000                              @ Value to trigger PendSV exception.
  48              	
  49              	
  50              	@**************************************************************************************************
  51              	@                                     CODE GENERATION DIRECTIVES
  52              	@**************************************************************************************************
  53              	
  54              	.text
  55              	.align 2
  56              	.thumb
  57              	.syntax unified
ARM GAS  uCOS-III\Ports\ARM-Cortex-M3\Generic\GNU\os_cpu_a.s 			page 2


  58              	
  59              	
  60              	@**************************************************************************************************
  61              	@                                         START MULTITASKING
  62              	@                                      void OSStartHighRdy(void)
  63              	@
  64              	@ Note(s) : 1) This function triggers a PendSV exception (essentially, causes a context switch) to 
  65              	@              the first task to start.
  66              	@
  67              	@           2) OSStartHighRdy() MUST:
  68              	@              a) Setup PendSV exception priority to lowest;
  69              	@              b) Set initial PSP to 0, to tell context switcher this is first run;
  70              	@              c) Set the main stack to OS_CPU_ExceptStkBase
  71              	@              d) Trigger PendSV exception;
  72              	@              e) Enable interrupts (tasks will run with interrupts enabled).
  73              	@**************************************************************************************************
  74              	.thumb_func
  75              	OSStartHighRdy:
  76 0000 1848     	    LDR     R0, =NVIC_SYSPRI14                                  @ Set the PendSV exception priority
  77 0002 FF21     	    LDR     R1, =NVIC_PENDSV_PRI
  78 0004 0170     	    STRB    R1, [R0]
  79              	
  80 0006 0020     	    MOVS    R0, #0                                              @ Set the PSP to 0 for initial cont
  81 0008 80F30988 	    MSR     PSP, R0
  82              	
  83 000c 1648     	    LDR     R0, =OS_CPU_ExceptStkBase                           @ Initialize the MSP to the OS_CPU_
  84 000e 0168     	    LDR     R1, [R0]
  85 0010 81F30888 	    MSR     MSP, R1
  86              	
  87 0014 1548     	    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (cau
  88 0016 4FF08051 	    LDR     R1, =NVIC_PENDSVSET
  89 001a 0160     	    STR     R1, [R0]
  90              	    
  91 001c 62B6     	    CPSIE   I                                                   @ Enable interrupts at processor le
  92              	
  93              	OSStartHang:
  94 001e FEE7     	    B       OSStartHang                                         @ Should never get here
  95              	
  96              	
  97              	@**************************************************************************************************
  98              	@                                       HANDLE PendSV EXCEPTION
  99              	@                                   void OS_CPU_PendSVHandler(void)
 100              	@
 101              	@ Note(s) : 1) PendSV is used to cause a context switch.  This is a recommended method for performi
 102              	@              context switches with Cortex-M3.  This is because the Cortex-M3 auto-saves half of t
 103              	@              processor context on any exception, and restores same on return from exception.  So 
 104              	@              saving of R4-R11 is required and fixing up the stack pointers.  Using the PendSV exc
 105              	@              this way means that context saving and restoring is identical whether it is initiate
 106              	@              a thread or occurs due to an interrupt or exception.
 107              	@
 108              	@           2) Pseudo-code is:
 109              	@              a) Get the process SP, if 0 then skip (goto d) the saving part (first context switch
 110              	@              b) Save remaining regs r4-r11 on process stack;
 111              	@              c) Save the process SP in its TCB, OSTCBCurPtr->OSTCBStkPtr = SP;
 112              	@              d) Call OSTaskSwHook();
 113              	@              e) Get current high priority, OSPrioCur = OSPrioHighRdy;
 114              	@              f) Get current ready thread TCB, OSTCBCurPtr = OSTCBHighRdyPtr;
ARM GAS  uCOS-III\Ports\ARM-Cortex-M3\Generic\GNU\os_cpu_a.s 			page 3


 115              	@              g) Get new process SP from TCB, SP = OSTCBHighRdyPtr->OSTCBStkPtr;
 116              	@              h) Restore R4-R11 from new process stack;
 117              	@              i) Perform exception return which will restore remaining context.
 118              	@
 119              	@           3) On entry into PendSV handler:
 120              	@              a) The following have been saved on the process stack (by processor):
 121              	@                 xPSR, PC, LR, R12, R0-R3
 122              	@              b) Processor mode is switched to Handler mode (from Thread mode)
 123              	@              c) Stack is Main stack (switched from Process stack)
 124              	@              d) OSTCBCurPtr      points to the OS_TCB of the task to suspend
 125              	@                 OSTCBHighRdyPtr  points to the OS_TCB of the task to resume
 126              	@
 127              	@           4) Since PendSV is set to lowest priority in the system (by OSStartHighRdy() above), we
 128              	@              know that it will only be run when no other exception or interrupt is active, and
 129              	@              therefore safe to assume that context being switched out was using the process stack
 130              	@**************************************************************************************************
 131              	
 132              	.thumb_func
 133              	OS_CPU_PendSVHandler:
 134 0020 72B6     	    CPSID   I                                                   @ Prevent interruption during conte
 135 0022 EFF30980 	    MRS     R0, PSP                                             @ PSP is process stack pointer
 136 0026 28B1     	    CBZ     R0, OS_CPU_PendSVHandler_nosave                     @ Skip register save the first time
 137              	
 138 0028 2038     	    SUBS    R0, R0, #0x20                                       @ Save remaining regs r4-11 on proc
 139 002a 80E8F00F 	    STM     R0, {R4-R11}
 140              	
 141 002e 1049     	    LDR     R1, =OSTCBCurPtr                                    @ OSTCBCurPtr->OSTCBStkPtr = SP;
 142 0030 0968     	    LDR     R1, [R1]
 143 0032 0860     	    STR     R0, [R1]                                            @ R0 is SP of process being switche
 144              	
 145              	                                                                @ At this point, entire context of 
 146              	OS_CPU_PendSVHandler_nosave:
 147 0034 00B5     	    PUSH    {R14}                                               @ Save LR exc_return value
 148 0036 0F48     	    LDR     R0, =OSTaskSwHook                                   @ OSTaskSwHook();
 149 0038 8047     	    BLX     R0
 150 003a 5DF804EB 	    POP     {R14}
 151              	
 152 003e 0E48     	    LDR     R0, =OSPrioCur                                      @ OSPrioCur   = OSPrioHighRdy;
 153 0040 0E49     	    LDR     R1, =OSPrioHighRdy
 154 0042 0A78     	    LDRB    R2, [R1]
 155 0044 0270     	    STRB    R2, [R0]
 156              	
 157 0046 0A48     	    LDR     R0, =OSTCBCurPtr                                    @ OSTCBCurPtr = OSTCBHighRdyPtr;
 158 0048 0D49     	    LDR     R1, =OSTCBHighRdyPtr
 159 004a 0A68     	    LDR     R2, [R1]
 160 004c 0260     	    STR     R2, [R0]
 161              	
 162 004e 1068     	    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBH
 163 0050 90E8F00F 	    LDM     R0, {R4-R11}                                        @ Restore r4-11 from new process st
 164 0054 2030     	    ADDS    R0, R0, #0x20
 165 0056 80F30988 	    MSR     PSP, R0                                             @ Load PSP with new process SP
 166 005a 4EF0040E 	    ORR     LR, LR, #0x04                                       @ Ensure exception return uses proc
 167 005e 62B6     	    CPSIE   I
 168 0060 7047     	    BX      LR                                                  @ Exception return will restore rem
 169              	
 170 0062 000022ED 	.end
 170      00E00000 
ARM GAS  uCOS-III\Ports\ARM-Cortex-M3\Generic\GNU\os_cpu_a.s 			page 4


 170      000004ED 
 170      00E00000 
 170      00000000 
