ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"cpu_core.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.CPU_TS_Init,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  23              		.type	CPU_TS_Init, %function
  24              	CPU_TS_Init:
  25              	.LFB19:
  26              		.file 1 "uC-CPU\\cpu_core.c"
   1:uC-CPU/cpu_core.c **** /*
   2:uC-CPU/cpu_core.c **** ***************************************************************************************************
   3:uC-CPU/cpu_core.c **** *                                                uC/CPU
   4:uC-CPU/cpu_core.c **** *                                    CPU CONFIGURATION & PORT LAYER
   5:uC-CPU/cpu_core.c **** *
   6:uC-CPU/cpu_core.c **** *                          (c) Copyright 2004-2011; Micrium, Inc.; Weston, FL
   7:uC-CPU/cpu_core.c **** *
   8:uC-CPU/cpu_core.c **** *               All rights reserved.  Protected by international copyright laws.
   9:uC-CPU/cpu_core.c **** *
  10:uC-CPU/cpu_core.c **** *               uC/CPU is provided in source form to registered licensees ONLY.  It is
  11:uC-CPU/cpu_core.c **** *               illegal to distribute this source code to any third party unless you receive
  12:uC-CPU/cpu_core.c **** *               written permission by an authorized Micrium representative.  Knowledge of
  13:uC-CPU/cpu_core.c **** *               the source code may NOT be used to develop a similar product.
  14:uC-CPU/cpu_core.c **** *
  15:uC-CPU/cpu_core.c **** *               Please help us continue to provide the Embedded community with the finest
  16:uC-CPU/cpu_core.c **** *               software available.  Your honesty is greatly appreciated.
  17:uC-CPU/cpu_core.c **** *
  18:uC-CPU/cpu_core.c **** *               You can contact us at www.micrium.com.
  19:uC-CPU/cpu_core.c **** ***************************************************************************************************
  20:uC-CPU/cpu_core.c **** */
  21:uC-CPU/cpu_core.c **** 
  22:uC-CPU/cpu_core.c **** /*
  23:uC-CPU/cpu_core.c **** ***************************************************************************************************
  24:uC-CPU/cpu_core.c **** *
  25:uC-CPU/cpu_core.c **** *                                           CORE CPU MODULE
  26:uC-CPU/cpu_core.c **** *
  27:uC-CPU/cpu_core.c **** * Filename      : cpu_core.c
  28:uC-CPU/cpu_core.c **** * Version       : V1.29.01
  29:uC-CPU/cpu_core.c **** * Programmer(s) : SR
  30:uC-CPU/cpu_core.c **** *                 ITJ
  31:uC-CPU/cpu_core.c **** ***************************************************************************************************
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 2


  32:uC-CPU/cpu_core.c **** */
  33:uC-CPU/cpu_core.c **** 
  34:uC-CPU/cpu_core.c **** 
  35:uC-CPU/cpu_core.c **** /*
  36:uC-CPU/cpu_core.c **** ***************************************************************************************************
  37:uC-CPU/cpu_core.c **** *                                            INCLUDE FILES
  38:uC-CPU/cpu_core.c **** ***************************************************************************************************
  39:uC-CPU/cpu_core.c **** */
  40:uC-CPU/cpu_core.c **** 
  41:uC-CPU/cpu_core.c **** #define    MICRIUM_SOURCE
  42:uC-CPU/cpu_core.c **** #define    CPU_CORE_MODULE
  43:uC-CPU/cpu_core.c **** #include  <cpu_core.h>
  44:uC-CPU/cpu_core.c **** 
  45:uC-CPU/cpu_core.c **** 
  46:uC-CPU/cpu_core.c **** /*$PAGE*/
  47:uC-CPU/cpu_core.c **** /*
  48:uC-CPU/cpu_core.c **** ***************************************************************************************************
  49:uC-CPU/cpu_core.c **** *                                            LOCAL DEFINES
  50:uC-CPU/cpu_core.c **** ***************************************************************************************************
  51:uC-CPU/cpu_core.c **** */
  52:uC-CPU/cpu_core.c **** 
  53:uC-CPU/cpu_core.c **** 
  54:uC-CPU/cpu_core.c **** /*
  55:uC-CPU/cpu_core.c **** ***************************************************************************************************
  56:uC-CPU/cpu_core.c **** *                                           LOCAL CONSTANTS
  57:uC-CPU/cpu_core.c **** ***************************************************************************************************
  58:uC-CPU/cpu_core.c **** */
  59:uC-CPU/cpu_core.c **** 
  60:uC-CPU/cpu_core.c **** 
  61:uC-CPU/cpu_core.c **** /*
  62:uC-CPU/cpu_core.c **** ***************************************************************************************************
  63:uC-CPU/cpu_core.c **** *                                          LOCAL DATA TYPES
  64:uC-CPU/cpu_core.c **** ***************************************************************************************************
  65:uC-CPU/cpu_core.c **** */
  66:uC-CPU/cpu_core.c **** 
  67:uC-CPU/cpu_core.c **** 
  68:uC-CPU/cpu_core.c **** /*
  69:uC-CPU/cpu_core.c **** ***************************************************************************************************
  70:uC-CPU/cpu_core.c **** *                                            LOCAL TABLES
  71:uC-CPU/cpu_core.c **** ***************************************************************************************************
  72:uC-CPU/cpu_core.c **** */
  73:uC-CPU/cpu_core.c **** 
  74:uC-CPU/cpu_core.c **** /*
  75:uC-CPU/cpu_core.c **** ***************************************************************************************************
  76:uC-CPU/cpu_core.c **** *                                  CPU COUNT LEAD ZEROs LOOKUP TABLE
  77:uC-CPU/cpu_core.c **** *
  78:uC-CPU/cpu_core.c **** * Note(s) : (1) Index into bit pattern table determines the number of leading zeros in an 8-bit val
  79:uC-CPU/cpu_core.c **** *
  80:uC-CPU/cpu_core.c **** *                         b07  b06  b05  b04  b03  b02  b01  b00    # Leading Zeros
  81:uC-CPU/cpu_core.c **** *                         ---  ---  ---  ---  ---  ---  ---  ---    ---------------
  82:uC-CPU/cpu_core.c **** *                          1    x    x    x    x    x    x    x            0
  83:uC-CPU/cpu_core.c **** *                          0    1    x    x    x    x    x    x            1
  84:uC-CPU/cpu_core.c **** *                          0    0    1    x    x    x    x    x            2
  85:uC-CPU/cpu_core.c **** *                          0    0    0    1    x    x    x    x            3
  86:uC-CPU/cpu_core.c **** *                          0    0    0    0    1    x    x    x            4
  87:uC-CPU/cpu_core.c **** *                          0    0    0    0    0    1    x    x            5
  88:uC-CPU/cpu_core.c **** *                          0    0    0    0    0    0    1    x            6
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 3


  89:uC-CPU/cpu_core.c **** *                          0    0    0    0    0    0    0    1            7
  90:uC-CPU/cpu_core.c **** *                          0    0    0    0    0    0    0    0            8
  91:uC-CPU/cpu_core.c **** ***************************************************************************************************
  92:uC-CPU/cpu_core.c **** */
  93:uC-CPU/cpu_core.c **** 
  94:uC-CPU/cpu_core.c **** #if (!(defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) || \
  95:uC-CPU/cpu_core.c ****       (CPU_CFG_DATA_SIZE_MAX > CPU_CFG_DATA_SIZE))
  96:uC-CPU/cpu_core.c **** static  const  CPU_INT08U  CPU_CntLeadZerosTbl[256] = {                             /* Data vals : 
  97:uC-CPU/cpu_core.c **** /*   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F   */
  98:uC-CPU/cpu_core.c ****     8u,  7u,  6u,  6u,  5u,  5u,  5u,  5u,  4u,  4u,  4u,  4u,  4u,  4u,  4u,  4u,  /*   0x00 to 0x
  99:uC-CPU/cpu_core.c ****     3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  /*   0x10 to 0x
 100:uC-CPU/cpu_core.c ****     2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  /*   0x20 to 0x
 101:uC-CPU/cpu_core.c ****     2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  /*   0x30 to 0x
 102:uC-CPU/cpu_core.c ****     1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  /*   0x40 to 0x
 103:uC-CPU/cpu_core.c ****     1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  /*   0x50 to 0x
 104:uC-CPU/cpu_core.c ****     1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  /*   0x60 to 0x
 105:uC-CPU/cpu_core.c ****     1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  /*   0x70 to 0x
 106:uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0x80 to 0x
 107:uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0x90 to 0x
 108:uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xA0 to 0x
 109:uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xB0 to 0x
 110:uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xC0 to 0x
 111:uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xD0 to 0x
 112:uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xE0 to 0x
 113:uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u   /*   0xF0 to 0x
 114:uC-CPU/cpu_core.c **** };
 115:uC-CPU/cpu_core.c **** #endif
 116:uC-CPU/cpu_core.c **** 
 117:uC-CPU/cpu_core.c **** 
 118:uC-CPU/cpu_core.c **** /*$PAGE*/
 119:uC-CPU/cpu_core.c **** /*
 120:uC-CPU/cpu_core.c **** ***************************************************************************************************
 121:uC-CPU/cpu_core.c **** *                                       LOCAL GLOBAL VARIABLES
 122:uC-CPU/cpu_core.c **** ***************************************************************************************************
 123:uC-CPU/cpu_core.c **** */
 124:uC-CPU/cpu_core.c **** 
 125:uC-CPU/cpu_core.c **** 
 126:uC-CPU/cpu_core.c **** /*
 127:uC-CPU/cpu_core.c **** ***************************************************************************************************
 128:uC-CPU/cpu_core.c **** *                                      LOCAL FUNCTION PROTOTYPES
 129:uC-CPU/cpu_core.c **** ***************************************************************************************************
 130:uC-CPU/cpu_core.c **** */
 131:uC-CPU/cpu_core.c **** 
 132:uC-CPU/cpu_core.c **** #if    (CPU_CFG_NAME_EN   == DEF_ENABLED)                           /* ---------------- CPU NAME FN
 133:uC-CPU/cpu_core.c **** static  void        CPU_NameInit         (void);
 134:uC-CPU/cpu_core.c **** #endif
 135:uC-CPU/cpu_core.c **** 
 136:uC-CPU/cpu_core.c **** 
 137:uC-CPU/cpu_core.c ****                                                                     /* ----------------- CPU TS FNC
 138:uC-CPU/cpu_core.c **** #if   ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
 139:uC-CPU/cpu_core.c ****        (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
 140:uC-CPU/cpu_core.c **** static  void        CPU_TS_Init          (void);
 141:uC-CPU/cpu_core.c **** #endif
 142:uC-CPU/cpu_core.c **** 
 143:uC-CPU/cpu_core.c **** 
 144:uC-CPU/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN                                     /* ---------- CPU INT DIS TIME 
 145:uC-CPU/cpu_core.c **** static  void        CPU_IntDisMeasInit   (void);
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 4


 146:uC-CPU/cpu_core.c **** 
 147:uC-CPU/cpu_core.c **** static  CPU_TS_TMR  CPU_IntDisMeasMaxCalc(CPU_TS_TMR  time_tot_cnts);
 148:uC-CPU/cpu_core.c **** #endif
 149:uC-CPU/cpu_core.c **** 
 150:uC-CPU/cpu_core.c **** 
 151:uC-CPU/cpu_core.c **** /*
 152:uC-CPU/cpu_core.c **** ***************************************************************************************************
 153:uC-CPU/cpu_core.c **** *                                     LOCAL CONFIGURATION ERRORS
 154:uC-CPU/cpu_core.c **** ***************************************************************************************************
 155:uC-CPU/cpu_core.c **** */
 156:uC-CPU/cpu_core.c **** 
 157:uC-CPU/cpu_core.c **** 
 158:uC-CPU/cpu_core.c **** /*$PAGE*/
 159:uC-CPU/cpu_core.c **** /*
 160:uC-CPU/cpu_core.c **** ***************************************************************************************************
 161:uC-CPU/cpu_core.c **** *                                             CPU_Init()
 162:uC-CPU/cpu_core.c **** *
 163:uC-CPU/cpu_core.c **** * Description : (1) Initialize CPU module :
 164:uC-CPU/cpu_core.c **** *
 165:uC-CPU/cpu_core.c **** *                   (a) Initialize CPU timestamps
 166:uC-CPU/cpu_core.c **** *                   (b) Initialize CPU interrupts disabled time measurements
 167:uC-CPU/cpu_core.c **** *                   (c) Initialize CPU host name
 168:uC-CPU/cpu_core.c **** *
 169:uC-CPU/cpu_core.c **** *
 170:uC-CPU/cpu_core.c **** * Argument(s) : none.
 171:uC-CPU/cpu_core.c **** *
 172:uC-CPU/cpu_core.c **** * Return(s)   : none.
 173:uC-CPU/cpu_core.c **** *
 174:uC-CPU/cpu_core.c **** * Caller(s)   : Your Product's Application.
 175:uC-CPU/cpu_core.c **** *
 176:uC-CPU/cpu_core.c **** *               This function is a CPU initialization function & MAY be called by application/
 177:uC-CPU/cpu_core.c **** *               initialization function(s).
 178:uC-CPU/cpu_core.c **** *
 179:uC-CPU/cpu_core.c **** * Note(s)     : (2) CPU_Init() MUST be called ... :
 180:uC-CPU/cpu_core.c **** *
 181:uC-CPU/cpu_core.c **** *                   (a) ONLY ONCE from a product's application; ...
 182:uC-CPU/cpu_core.c **** *                   (b) BEFORE product's application calls any core CPU module function(s)
 183:uC-CPU/cpu_core.c **** *
 184:uC-CPU/cpu_core.c **** *               (3) The following initialization functions MUST be sequenced as follows :
 185:uC-CPU/cpu_core.c **** *
 186:uC-CPU/cpu_core.c **** *                   (a) CPU_TS_Init()           SHOULD precede ALL calls to other CPU timestamp fun
 187:uC-CPU/cpu_core.c **** *
 188:uC-CPU/cpu_core.c **** *                   (b) CPU_IntDisMeasInit()    SHOULD precede ALL calls to CPU_CRITICAL_ENTER()/CP
 189:uC-CPU/cpu_core.c **** *                                                   & other CPU interrupts disabled time measuremen
 190:uC-CPU/cpu_core.c **** ***************************************************************************************************
 191:uC-CPU/cpu_core.c **** */
 192:uC-CPU/cpu_core.c **** 
 193:uC-CPU/cpu_core.c **** void  CPU_Init (void)
 194:uC-CPU/cpu_core.c **** {
 195:uC-CPU/cpu_core.c ****                                                                 /* --------------------- INIT TS --
 196:uC-CPU/cpu_core.c **** #if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
 197:uC-CPU/cpu_core.c ****      (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
 198:uC-CPU/cpu_core.c ****     CPU_TS_Init();                                              /* See Note #3a.                   
 199:uC-CPU/cpu_core.c **** #endif
 200:uC-CPU/cpu_core.c ****                                                                 /* -------------- INIT INT DIS TIME
 201:uC-CPU/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 202:uC-CPU/cpu_core.c ****     CPU_IntDisMeasInit();                                       /* See Note #3b.                   
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 5


 203:uC-CPU/cpu_core.c **** #endif
 204:uC-CPU/cpu_core.c **** 
 205:uC-CPU/cpu_core.c ****                                                                 /* ------------------ INIT CPU NAME
 206:uC-CPU/cpu_core.c **** #if (CPU_CFG_NAME_EN == DEF_ENABLED)
 207:uC-CPU/cpu_core.c ****      CPU_NameInit();
 208:uC-CPU/cpu_core.c **** #endif
 209:uC-CPU/cpu_core.c **** }
 210:uC-CPU/cpu_core.c **** 
 211:uC-CPU/cpu_core.c **** 
 212:uC-CPU/cpu_core.c **** /*$PAGE*/
 213:uC-CPU/cpu_core.c **** /*
 214:uC-CPU/cpu_core.c **** ***************************************************************************************************
 215:uC-CPU/cpu_core.c **** *                                         CPU_SW_Exception()
 216:uC-CPU/cpu_core.c **** *
 217:uC-CPU/cpu_core.c **** * Description : Trap unrecoverable software exception.
 218:uC-CPU/cpu_core.c **** *
 219:uC-CPU/cpu_core.c **** * Argument(s) : none.
 220:uC-CPU/cpu_core.c **** *
 221:uC-CPU/cpu_core.c **** * Return(s)   : none.
 222:uC-CPU/cpu_core.c **** *
 223:uC-CPU/cpu_core.c **** * Caller(s)   : various.
 224:uC-CPU/cpu_core.c **** *
 225:uC-CPU/cpu_core.c **** * Note(s)     : (1) CPU_SW_Exception() deadlocks the current code execution -- whether multi-tasked
 226:uC-CPU/cpu_core.c **** *                   -processed/-threaded or single-threaded -- when the current code execution cann
 227:uC-CPU/cpu_core.c **** *                   gracefully recover or report a fault or exception condition.
 228:uC-CPU/cpu_core.c **** *
 229:uC-CPU/cpu_core.c **** *                   See also 'cpu_core.h  CPU_SW_EXCEPTION()  Note #1'.
 230:uC-CPU/cpu_core.c **** ***************************************************************************************************
 231:uC-CPU/cpu_core.c **** */
 232:uC-CPU/cpu_core.c **** 
 233:uC-CPU/cpu_core.c **** void  CPU_SW_Exception (void)
 234:uC-CPU/cpu_core.c **** {
 235:uC-CPU/cpu_core.c ****     while (DEF_ON) {
 236:uC-CPU/cpu_core.c ****         ;
 237:uC-CPU/cpu_core.c ****     }
 238:uC-CPU/cpu_core.c **** }
 239:uC-CPU/cpu_core.c **** 
 240:uC-CPU/cpu_core.c **** 
 241:uC-CPU/cpu_core.c **** /*$PAGE*/
 242:uC-CPU/cpu_core.c **** /*
 243:uC-CPU/cpu_core.c **** ***************************************************************************************************
 244:uC-CPU/cpu_core.c **** *                                            CPU_NameClr()
 245:uC-CPU/cpu_core.c **** *
 246:uC-CPU/cpu_core.c **** * Description : Clear CPU Name.
 247:uC-CPU/cpu_core.c **** *
 248:uC-CPU/cpu_core.c **** * Argument(s) : none.
 249:uC-CPU/cpu_core.c **** *
 250:uC-CPU/cpu_core.c **** * Return(s)   : none.
 251:uC-CPU/cpu_core.c **** *
 252:uC-CPU/cpu_core.c **** * Caller(s)   : CPU_NameInit(),
 253:uC-CPU/cpu_core.c **** *               Application.
 254:uC-CPU/cpu_core.c **** *
 255:uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
 256:uC-CPU/cpu_core.c **** *               called by application function(s).
 257:uC-CPU/cpu_core.c **** *
 258:uC-CPU/cpu_core.c **** * Note(s)     : none.
 259:uC-CPU/cpu_core.c **** ***************************************************************************************************
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 6


 260:uC-CPU/cpu_core.c **** */
 261:uC-CPU/cpu_core.c **** 
 262:uC-CPU/cpu_core.c **** #if (CPU_CFG_NAME_EN == DEF_ENABLED)
 263:uC-CPU/cpu_core.c **** void  CPU_NameClr (void)
 264:uC-CPU/cpu_core.c **** {
 265:uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 266:uC-CPU/cpu_core.c **** 
 267:uC-CPU/cpu_core.c **** 
 268:uC-CPU/cpu_core.c ****     CPU_CRITICAL_ENTER();
 269:uC-CPU/cpu_core.c ****     Mem_Clr((void     *)&CPU_Name[0],
 270:uC-CPU/cpu_core.c ****             (CPU_SIZE_T) CPU_CFG_NAME_SIZE);
 271:uC-CPU/cpu_core.c ****     CPU_CRITICAL_EXIT();
 272:uC-CPU/cpu_core.c **** }
 273:uC-CPU/cpu_core.c **** #endif
 274:uC-CPU/cpu_core.c **** 
 275:uC-CPU/cpu_core.c **** 
 276:uC-CPU/cpu_core.c **** /*$PAGE*/
 277:uC-CPU/cpu_core.c **** /*
 278:uC-CPU/cpu_core.c **** ***************************************************************************************************
 279:uC-CPU/cpu_core.c **** *                                            CPU_NameGet()
 280:uC-CPU/cpu_core.c **** *
 281:uC-CPU/cpu_core.c **** * Description : Get CPU host name.
 282:uC-CPU/cpu_core.c **** *
 283:uC-CPU/cpu_core.c **** * Argument(s) : p_name      Pointer to an ASCII character array that will receive the return CPU ho
 284:uC-CPU/cpu_core.c **** *                               name ASCII string from this function (see Note #1).
 285:uC-CPU/cpu_core.c **** *
 286:uC-CPU/cpu_core.c **** *               p_err       Pointer to variable that will receive the return error code from this f
 287:uC-CPU/cpu_core.c **** *
 288:uC-CPU/cpu_core.c **** *                               CPU_ERR_NONE                    CPU host name successfully returned
 289:uC-CPU/cpu_core.c **** *                               CPU_ERR_NULL_PTR                Argument 'p_name' passed a NULL poi
 290:uC-CPU/cpu_core.c **** *
 291:uC-CPU/cpu_core.c **** * Return(s)   : none.
 292:uC-CPU/cpu_core.c **** *
 293:uC-CPU/cpu_core.c **** * Caller(s)   : Application.
 294:uC-CPU/cpu_core.c **** *
 295:uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
 296:uC-CPU/cpu_core.c **** *               be called by application function(s).
 297:uC-CPU/cpu_core.c **** *
 298:uC-CPU/cpu_core.c **** * Note(s)     : (1) The size of the ASCII character array that will receive the return CPU host nam
 299:uC-CPU/cpu_core.c **** *                   ASCII string :
 300:uC-CPU/cpu_core.c **** *
 301:uC-CPU/cpu_core.c **** *                   (a) MUST   be greater than or equal to the current CPU host name's ASCII string
 302:uC-CPU/cpu_core.c **** *                           size including the terminating NULL character;
 303:uC-CPU/cpu_core.c **** *                   (b) SHOULD be greater than or equal to CPU_CFG_NAME_SIZE
 304:uC-CPU/cpu_core.c **** ***************************************************************************************************
 305:uC-CPU/cpu_core.c **** */
 306:uC-CPU/cpu_core.c **** 
 307:uC-CPU/cpu_core.c **** #if (CPU_CFG_NAME_EN == DEF_ENABLED)
 308:uC-CPU/cpu_core.c **** void  CPU_NameGet (CPU_CHAR  *p_name,
 309:uC-CPU/cpu_core.c ****                    CPU_ERR   *p_err)
 310:uC-CPU/cpu_core.c **** {
 311:uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 312:uC-CPU/cpu_core.c **** 
 313:uC-CPU/cpu_core.c **** 
 314:uC-CPU/cpu_core.c ****     if (p_err == (CPU_ERR *)0) {
 315:uC-CPU/cpu_core.c ****         CPU_SW_EXCEPTION(;);
 316:uC-CPU/cpu_core.c ****     }
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 7


 317:uC-CPU/cpu_core.c **** 
 318:uC-CPU/cpu_core.c ****     if (p_name == (CPU_CHAR *)0) {
 319:uC-CPU/cpu_core.c ****        *p_err = CPU_ERR_NULL_PTR;
 320:uC-CPU/cpu_core.c ****         return;
 321:uC-CPU/cpu_core.c ****     }
 322:uC-CPU/cpu_core.c **** 
 323:uC-CPU/cpu_core.c ****     CPU_CRITICAL_ENTER();
 324:uC-CPU/cpu_core.c ****    (void)Str_Copy_N(p_name,
 325:uC-CPU/cpu_core.c ****                    &CPU_Name[0],
 326:uC-CPU/cpu_core.c ****                     CPU_CFG_NAME_SIZE);
 327:uC-CPU/cpu_core.c ****     CPU_CRITICAL_EXIT();
 328:uC-CPU/cpu_core.c **** 
 329:uC-CPU/cpu_core.c ****    *p_err = CPU_ERR_NONE;
 330:uC-CPU/cpu_core.c **** }
 331:uC-CPU/cpu_core.c **** #endif
 332:uC-CPU/cpu_core.c **** 
 333:uC-CPU/cpu_core.c **** 
 334:uC-CPU/cpu_core.c **** /*$PAGE*/
 335:uC-CPU/cpu_core.c **** /*
 336:uC-CPU/cpu_core.c **** ***************************************************************************************************
 337:uC-CPU/cpu_core.c **** *                                            CPU_NameSet()
 338:uC-CPU/cpu_core.c **** *
 339:uC-CPU/cpu_core.c **** * Description : Set CPU host name.
 340:uC-CPU/cpu_core.c **** *
 341:uC-CPU/cpu_core.c **** * Argument(s) : p_name      Pointer to CPU host name to set.
 342:uC-CPU/cpu_core.c **** *
 343:uC-CPU/cpu_core.c **** *               p_err       Pointer to variable that will receive the return error code from this f
 344:uC-CPU/cpu_core.c **** *
 345:uC-CPU/cpu_core.c **** *                               CPU_ERR_NONE                    CPU host name successfully set.
 346:uC-CPU/cpu_core.c **** *                               CPU_ERR_NULL_PTR                Argument 'p_name' passed a NULL poi
 347:uC-CPU/cpu_core.c **** *                               CPU_ERR_NAME_SIZE               Invalid CPU host name size (see Not
 348:uC-CPU/cpu_core.c **** *
 349:uC-CPU/cpu_core.c **** * Return(s)   : none.
 350:uC-CPU/cpu_core.c **** *
 351:uC-CPU/cpu_core.c **** * Caller(s)   : Application.
 352:uC-CPU/cpu_core.c **** *
 353:uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
 354:uC-CPU/cpu_core.c **** *               called by application function(s).
 355:uC-CPU/cpu_core.c **** *
 356:uC-CPU/cpu_core.c **** * Note(s)     : (1) 'p_name' ASCII string size, including the terminating NULL character, MUST be l
 357:uC-CPU/cpu_core.c **** *                    than or equal to CPU_CFG_NAME_SIZE.
 358:uC-CPU/cpu_core.c **** ***************************************************************************************************
 359:uC-CPU/cpu_core.c **** */
 360:uC-CPU/cpu_core.c **** 
 361:uC-CPU/cpu_core.c **** #if (CPU_CFG_NAME_EN == DEF_ENABLED)
 362:uC-CPU/cpu_core.c **** void  CPU_NameSet (const  CPU_CHAR  *p_name,
 363:uC-CPU/cpu_core.c ****                           CPU_ERR   *p_err)
 364:uC-CPU/cpu_core.c **** {
 365:uC-CPU/cpu_core.c ****     CPU_SIZE_T  len;
 366:uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 367:uC-CPU/cpu_core.c **** 
 368:uC-CPU/cpu_core.c **** 
 369:uC-CPU/cpu_core.c ****     if (p_err == (CPU_ERR *)0) {
 370:uC-CPU/cpu_core.c ****         CPU_SW_EXCEPTION(;);
 371:uC-CPU/cpu_core.c ****     }
 372:uC-CPU/cpu_core.c **** 
 373:uC-CPU/cpu_core.c ****     if (p_name == (const CPU_CHAR *)0) {
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 8


 374:uC-CPU/cpu_core.c ****        *p_err = CPU_ERR_NULL_PTR;
 375:uC-CPU/cpu_core.c ****         return;
 376:uC-CPU/cpu_core.c ****     }
 377:uC-CPU/cpu_core.c **** 
 378:uC-CPU/cpu_core.c ****     len = Str_Len_N(p_name,
 379:uC-CPU/cpu_core.c ****                     CPU_CFG_NAME_SIZE);
 380:uC-CPU/cpu_core.c ****     if (len < CPU_CFG_NAME_SIZE) {                              /* If       cfg name len < max name
 381:uC-CPU/cpu_core.c ****         CPU_CRITICAL_ENTER();
 382:uC-CPU/cpu_core.c ****        (void)Str_Copy_N(&CPU_Name[0],                           /* ... copy cfg name to CPU host na
 383:uC-CPU/cpu_core.c ****                          p_name,
 384:uC-CPU/cpu_core.c ****                          CPU_CFG_NAME_SIZE);
 385:uC-CPU/cpu_core.c ****         CPU_CRITICAL_EXIT();
 386:uC-CPU/cpu_core.c ****        *p_err = CPU_ERR_NONE;
 387:uC-CPU/cpu_core.c **** 
 388:uC-CPU/cpu_core.c ****     } else {
 389:uC-CPU/cpu_core.c ****        *p_err = CPU_ERR_NAME_SIZE;
 390:uC-CPU/cpu_core.c ****     }
 391:uC-CPU/cpu_core.c **** }
 392:uC-CPU/cpu_core.c **** #endif
 393:uC-CPU/cpu_core.c **** 
 394:uC-CPU/cpu_core.c **** 
 395:uC-CPU/cpu_core.c **** /*$PAGE*/
 396:uC-CPU/cpu_core.c **** /*
 397:uC-CPU/cpu_core.c **** ***************************************************************************************************
 398:uC-CPU/cpu_core.c **** *                                           CPU_TS_Get32()
 399:uC-CPU/cpu_core.c **** *
 400:uC-CPU/cpu_core.c **** * Description : Get current 32-bit CPU timestamp.
 401:uC-CPU/cpu_core.c **** *
 402:uC-CPU/cpu_core.c **** * Argument(s) : none.
 403:uC-CPU/cpu_core.c **** *
 404:uC-CPU/cpu_core.c **** * Return(s)   : Current 32-bit CPU timestamp (in timestamp timer counts).
 405:uC-CPU/cpu_core.c **** *
 406:uC-CPU/cpu_core.c **** * Caller(s)   : Application.
 407:uC-CPU/cpu_core.c **** *
 408:uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
 409:uC-CPU/cpu_core.c **** *               be called by application function(s).
 410:uC-CPU/cpu_core.c **** *
 411:uC-CPU/cpu_core.c **** * Note(s)     : (1) When applicable, the amount of time measured by CPU timestamps is calculated by
 412:uC-CPU/cpu_core.c **** *                   either of the following equations :
 413:uC-CPU/cpu_core.c **** *
 414:uC-CPU/cpu_core.c **** *                       (a) Time measured  =  Number timer counts  *  Timer period
 415:uC-CPU/cpu_core.c **** *
 416:uC-CPU/cpu_core.c **** *                               where
 417:uC-CPU/cpu_core.c **** *
 418:uC-CPU/cpu_core.c **** *                                   Number timer counts     Number of timer counts measured
 419:uC-CPU/cpu_core.c **** *                                   Timer period            Timer's period in some units of
 420:uC-CPU/cpu_core.c **** *                                                               (fractional) seconds
 421:uC-CPU/cpu_core.c **** *                                   Time measured           Amount of time measured, in same
 422:uC-CPU/cpu_core.c **** *                                                               units of (fractional) seconds
 423:uC-CPU/cpu_core.c **** *                                                               as the Timer period
 424:uC-CPU/cpu_core.c **** *
 425:uC-CPU/cpu_core.c **** *                                              Number timer counts
 426:uC-CPU/cpu_core.c **** *                       (b) Time measured  =  ---------------------
 427:uC-CPU/cpu_core.c **** *                                                Timer frequency
 428:uC-CPU/cpu_core.c **** *
 429:uC-CPU/cpu_core.c **** *                               where
 430:uC-CPU/cpu_core.c **** *
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 9


 431:uC-CPU/cpu_core.c **** *                                   Number timer counts     Number of timer counts measured
 432:uC-CPU/cpu_core.c **** *                                   Timer frequency         Timer's frequency in some units
 433:uC-CPU/cpu_core.c **** *                                                               of counts per second
 434:uC-CPU/cpu_core.c **** *                                   Time measured           Amount of time measured, in seconds
 435:uC-CPU/cpu_core.c **** *
 436:uC-CPU/cpu_core.c **** *                   See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2c1'.
 437:uC-CPU/cpu_core.c **** *
 438:uC-CPU/cpu_core.c **** *               (2) In case the CPU timestamp timer has lower precision than the 32-bit CPU timesta
 439:uC-CPU/cpu_core.c **** *                   its precision is extended via periodic updates by accumulating the deltas of th
 440:uC-CPU/cpu_core.c **** *                   timestamp timer count values into the higher-precision 32-bit CPU timestamp.
 441:uC-CPU/cpu_core.c **** *
 442:uC-CPU/cpu_core.c **** *               (3) After initialization, 'CPU_TS_32_Accum' & 'CPU_TS_32_TmrPrev' MUST ALWAYS
 443:uC-CPU/cpu_core.c **** *                   be accessed AND updated exclusively with interrupts disabled -- but NOT
 444:uC-CPU/cpu_core.c **** *                   with critical sections.
 445:uC-CPU/cpu_core.c **** ***************************************************************************************************
 446:uC-CPU/cpu_core.c **** */
 447:uC-CPU/cpu_core.c **** 
 448:uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_32_EN == DEF_ENABLED)
 449:uC-CPU/cpu_core.c **** CPU_TS32  CPU_TS_Get32 (void)
 450:uC-CPU/cpu_core.c **** {
 451:uC-CPU/cpu_core.c ****     CPU_TS32    ts;
 452:uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32)
 453:uC-CPU/cpu_core.c ****     CPU_TS_TMR  tmr_cur;
 454:uC-CPU/cpu_core.c ****     CPU_TS_TMR  tmr_delta;
 455:uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 456:uC-CPU/cpu_core.c **** #endif
 457:uC-CPU/cpu_core.c **** 
 458:uC-CPU/cpu_core.c **** 
 459:uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_TMR_SIZE >= CPU_WORD_SIZE_32)
 460:uC-CPU/cpu_core.c ****     ts = (CPU_TS32)CPU_TS_TmrRd();                                  /* Get cur ts tmr val (in 32-bi
 461:uC-CPU/cpu_core.c **** 
 462:uC-CPU/cpu_core.c **** #else
 463:uC-CPU/cpu_core.c ****     CPU_INT_DIS();
 464:uC-CPU/cpu_core.c ****     tmr_cur            = (CPU_TS_TMR) CPU_TS_TmrRd();               /* Get cur ts tmr val (in ts tm
 465:uC-CPU/cpu_core.c ****     tmr_delta          = (CPU_TS_TMR)(tmr_cur - CPU_TS_32_TmrPrev); /* Calc      delta ts tmr cnts.
 466:uC-CPU/cpu_core.c ****     CPU_TS_32_Accum   += (CPU_TS32  ) tmr_delta;                    /* Inc ts by delta ts tmr cnts 
 467:uC-CPU/cpu_core.c ****     CPU_TS_32_TmrPrev  = (CPU_TS_TMR) tmr_cur;                      /* Save cur ts tmr cnts for nex
 468:uC-CPU/cpu_core.c ****     ts                 = (CPU_TS32  ) CPU_TS_32_Accum;
 469:uC-CPU/cpu_core.c ****     CPU_INT_EN();
 470:uC-CPU/cpu_core.c **** #endif
 471:uC-CPU/cpu_core.c **** 
 472:uC-CPU/cpu_core.c ****     return (ts);
 473:uC-CPU/cpu_core.c **** }
 474:uC-CPU/cpu_core.c **** #endif
 475:uC-CPU/cpu_core.c **** 
 476:uC-CPU/cpu_core.c **** 
 477:uC-CPU/cpu_core.c **** /*$PAGE*/
 478:uC-CPU/cpu_core.c **** /*
 479:uC-CPU/cpu_core.c **** ***************************************************************************************************
 480:uC-CPU/cpu_core.c **** *                                           CPU_TS_Get64()
 481:uC-CPU/cpu_core.c **** *
 482:uC-CPU/cpu_core.c **** * Description : Get current 64-bit CPU timestamp.
 483:uC-CPU/cpu_core.c **** *
 484:uC-CPU/cpu_core.c **** * Argument(s) : none.
 485:uC-CPU/cpu_core.c **** *
 486:uC-CPU/cpu_core.c **** * Return(s)   : Current 64-bit CPU timestamp (in timestamp timer counts).
 487:uC-CPU/cpu_core.c **** *
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 10


 488:uC-CPU/cpu_core.c **** * Caller(s)   : Application.
 489:uC-CPU/cpu_core.c **** *
 490:uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
 491:uC-CPU/cpu_core.c **** *               be called by application function(s).
 492:uC-CPU/cpu_core.c **** *
 493:uC-CPU/cpu_core.c **** * Note(s)     : (1) When applicable, the amount of time measured by CPU timestamps is calculated by
 494:uC-CPU/cpu_core.c **** *                   either of the following equations :
 495:uC-CPU/cpu_core.c **** *
 496:uC-CPU/cpu_core.c **** *                       (a) Time measured  =  Number timer counts  *  Timer period
 497:uC-CPU/cpu_core.c **** *
 498:uC-CPU/cpu_core.c **** *                               where
 499:uC-CPU/cpu_core.c **** *
 500:uC-CPU/cpu_core.c **** *                                   Number timer counts     Number of timer counts measured
 501:uC-CPU/cpu_core.c **** *                                   Timer period            Timer's period in some units of
 502:uC-CPU/cpu_core.c **** *                                                               (fractional) seconds
 503:uC-CPU/cpu_core.c **** *                                   Time measured           Amount of time measured, in same
 504:uC-CPU/cpu_core.c **** *                                                               units of (fractional) seconds
 505:uC-CPU/cpu_core.c **** *                                                               as the Timer period
 506:uC-CPU/cpu_core.c **** *
 507:uC-CPU/cpu_core.c **** *                                              Number timer counts
 508:uC-CPU/cpu_core.c **** *                       (b) Time measured  =  ---------------------
 509:uC-CPU/cpu_core.c **** *                                                Timer frequency
 510:uC-CPU/cpu_core.c **** *
 511:uC-CPU/cpu_core.c **** *                               where
 512:uC-CPU/cpu_core.c **** *
 513:uC-CPU/cpu_core.c **** *                                   Number timer counts     Number of timer counts measured
 514:uC-CPU/cpu_core.c **** *                                   Timer frequency         Timer's frequency in some units
 515:uC-CPU/cpu_core.c **** *                                                               of counts per second
 516:uC-CPU/cpu_core.c **** *                                   Time measured           Amount of time measured, in seconds
 517:uC-CPU/cpu_core.c **** *
 518:uC-CPU/cpu_core.c **** *                   See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2c1'.
 519:uC-CPU/cpu_core.c **** *
 520:uC-CPU/cpu_core.c **** *               (2) In case the CPU timestamp timer has lower precision than the 64-bit CPU timesta
 521:uC-CPU/cpu_core.c **** *                   its precision is extended via periodic updates by accumulating the deltas of th
 522:uC-CPU/cpu_core.c **** *                   timestamp timer count values into the higher-precision 64-bit CPU timestamp.
 523:uC-CPU/cpu_core.c **** *
 524:uC-CPU/cpu_core.c **** *               (3) After initialization, 'CPU_TS_64_Accum' & 'CPU_TS_64_TmrPrev' MUST ALWAYS
 525:uC-CPU/cpu_core.c **** *                   be accessed AND updated exclusively with interrupts disabled -- but NOT
 526:uC-CPU/cpu_core.c **** *                   with critical sections.
 527:uC-CPU/cpu_core.c **** ***************************************************************************************************
 528:uC-CPU/cpu_core.c **** */
 529:uC-CPU/cpu_core.c **** 
 530:uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_64_EN == DEF_ENABLED)
 531:uC-CPU/cpu_core.c **** CPU_TS64  CPU_TS_Get64 (void)
 532:uC-CPU/cpu_core.c **** {
 533:uC-CPU/cpu_core.c ****     CPU_TS64    ts;
 534:uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64)
 535:uC-CPU/cpu_core.c ****     CPU_TS_TMR  tmr_cur;
 536:uC-CPU/cpu_core.c ****     CPU_TS_TMR  tmr_delta;
 537:uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 538:uC-CPU/cpu_core.c **** #endif
 539:uC-CPU/cpu_core.c **** 
 540:uC-CPU/cpu_core.c **** 
 541:uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_TMR_SIZE >= CPU_WORD_SIZE_64)
 542:uC-CPU/cpu_core.c ****     ts = (CPU_TS64)CPU_TS_TmrRd();                                  /* Get cur ts tmr val (in 64-bi
 543:uC-CPU/cpu_core.c **** 
 544:uC-CPU/cpu_core.c **** #else
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 11


 545:uC-CPU/cpu_core.c ****     CPU_INT_DIS();
 546:uC-CPU/cpu_core.c ****     tmr_cur            = (CPU_TS_TMR) CPU_TS_TmrRd();               /* Get cur ts tmr val (in ts tm
 547:uC-CPU/cpu_core.c ****     tmr_delta          = (CPU_TS_TMR)(tmr_cur - CPU_TS_64_TmrPrev); /* Calc      delta ts tmr cnts.
 548:uC-CPU/cpu_core.c ****     CPU_TS_64_Accum   += (CPU_TS64  ) tmr_delta;                    /* Inc ts by delta ts tmr cnts 
 549:uC-CPU/cpu_core.c ****     CPU_TS_64_TmrPrev  = (CPU_TS_TMR) tmr_cur;                      /* Save cur ts tmr cnts for nex
 550:uC-CPU/cpu_core.c ****     ts                 = (CPU_TS64  ) CPU_TS_64_Accum;
 551:uC-CPU/cpu_core.c ****     CPU_INT_EN();
 552:uC-CPU/cpu_core.c **** #endif
 553:uC-CPU/cpu_core.c **** 
 554:uC-CPU/cpu_core.c ****     return (ts);
 555:uC-CPU/cpu_core.c **** }
 556:uC-CPU/cpu_core.c **** #endif
 557:uC-CPU/cpu_core.c **** 
 558:uC-CPU/cpu_core.c **** 
 559:uC-CPU/cpu_core.c **** /*$PAGE*/
 560:uC-CPU/cpu_core.c **** /*
 561:uC-CPU/cpu_core.c **** ***************************************************************************************************
 562:uC-CPU/cpu_core.c **** *                                           CPU_TS_Update()
 563:uC-CPU/cpu_core.c **** *
 564:uC-CPU/cpu_core.c **** * Description : Update current CPU timestamp(s).
 565:uC-CPU/cpu_core.c **** *
 566:uC-CPU/cpu_core.c **** * Argument(s) : none.
 567:uC-CPU/cpu_core.c **** *
 568:uC-CPU/cpu_core.c **** * Return(s)   : none.
 569:uC-CPU/cpu_core.c **** *
 570:uC-CPU/cpu_core.c **** * Caller(s)   : Application/BSP periodic time handler (see Note #1).
 571:uC-CPU/cpu_core.c **** *
 572:uC-CPU/cpu_core.c **** *               This function is a CPU timestamp BSP function & SHOULD be called only by appropriat
 573:uC-CPU/cpu_core.c **** *               application/BSP function(s).
 574:uC-CPU/cpu_core.c **** *
 575:uC-CPU/cpu_core.c **** * Note(s)     : (1) (a) CPU timestamp(s) MUST be updated periodically by some application (or BSP) 
 576:uC-CPU/cpu_core.c **** *                       handler in order to (adequately) maintain CPU timestamp(s)' time.
 577:uC-CPU/cpu_core.c **** *
 578:uC-CPU/cpu_core.c **** *                   (b) CPU timestamp(s) MUST be updated more frequently than the CPU timestamp tim
 579:uC-CPU/cpu_core.c **** *                       overflows; otherwise, CPU timestamp(s) will lose time.
 580:uC-CPU/cpu_core.c **** *
 581:uC-CPU/cpu_core.c **** *                       See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2c2'.
 582:uC-CPU/cpu_core.c **** ***************************************************************************************************
 583:uC-CPU/cpu_core.c **** */
 584:uC-CPU/cpu_core.c **** 
 585:uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_EN == DEF_ENABLED)
 586:uC-CPU/cpu_core.c **** void  CPU_TS_Update (void)
 587:uC-CPU/cpu_core.c **** {
 588:uC-CPU/cpu_core.c **** #if ((CPU_CFG_TS_32_EN    == DEF_ENABLED)  && \
 589:uC-CPU/cpu_core.c ****      (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32))
 590:uC-CPU/cpu_core.c ****    (void)CPU_TS_Get32();
 591:uC-CPU/cpu_core.c **** #endif
 592:uC-CPU/cpu_core.c **** 
 593:uC-CPU/cpu_core.c **** #if ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
 594:uC-CPU/cpu_core.c ****      (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
 595:uC-CPU/cpu_core.c ****    (void)CPU_TS_Get64();
 596:uC-CPU/cpu_core.c **** #endif
 597:uC-CPU/cpu_core.c **** }
 598:uC-CPU/cpu_core.c **** #endif
 599:uC-CPU/cpu_core.c **** 
 600:uC-CPU/cpu_core.c **** 
 601:uC-CPU/cpu_core.c **** /*$PAGE*/
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 12


 602:uC-CPU/cpu_core.c **** /*
 603:uC-CPU/cpu_core.c **** ***************************************************************************************************
 604:uC-CPU/cpu_core.c **** *                                         CPU_TS_TmrFreqGet()
 605:uC-CPU/cpu_core.c **** *
 606:uC-CPU/cpu_core.c **** * Description : Get CPU timestamp's timer frequency.
 607:uC-CPU/cpu_core.c **** *
 608:uC-CPU/cpu_core.c **** * Argument(s) : p_err       Pointer to variable that will receive the return error code from this f
 609:uC-CPU/cpu_core.c **** *
 610:uC-CPU/cpu_core.c **** *                               CPU_ERR_NONE                    CPU timestamp's timer frequency suc
 611:uC-CPU/cpu_core.c **** *                                                                   returned.
 612:uC-CPU/cpu_core.c **** *                               CPU_ERR_TS_FREQ_INVALID         CPU timestamp's timer frequency inv
 613:uC-CPU/cpu_core.c **** *                                                                   NOT yet configured.
 614:uC-CPU/cpu_core.c **** *
 615:uC-CPU/cpu_core.c **** * Return(s)   : CPU timestamp's timer frequency (in Hertz), if NO error(s).
 616:uC-CPU/cpu_core.c **** *
 617:uC-CPU/cpu_core.c **** *               0,                                          otherwise.
 618:uC-CPU/cpu_core.c **** *
 619:uC-CPU/cpu_core.c **** * Caller(s)   : Application.
 620:uC-CPU/cpu_core.c **** *
 621:uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
 622:uC-CPU/cpu_core.c **** *               called by application function(s).
 623:uC-CPU/cpu_core.c **** *
 624:uC-CPU/cpu_core.c **** * Note(s)     : none.
 625:uC-CPU/cpu_core.c **** ***************************************************************************************************
 626:uC-CPU/cpu_core.c **** */
 627:uC-CPU/cpu_core.c **** 
 628:uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
 629:uC-CPU/cpu_core.c **** CPU_TS_TMR_FREQ  CPU_TS_TmrFreqGet (CPU_ERR  *p_err)
 630:uC-CPU/cpu_core.c **** {
 631:uC-CPU/cpu_core.c ****     CPU_TS_TMR_FREQ  freq_hz;
 632:uC-CPU/cpu_core.c **** 
 633:uC-CPU/cpu_core.c **** 
 634:uC-CPU/cpu_core.c ****     if (p_err == (CPU_ERR *)0) {
 635:uC-CPU/cpu_core.c ****         CPU_SW_EXCEPTION(;);
 636:uC-CPU/cpu_core.c ****     }
 637:uC-CPU/cpu_core.c **** 
 638:uC-CPU/cpu_core.c ****     freq_hz =  CPU_TS_TmrFreq_Hz;
 639:uC-CPU/cpu_core.c ****    *p_err   = (freq_hz != 0u) ? CPU_ERR_NONE : CPU_ERR_TS_FREQ_INVALID;
 640:uC-CPU/cpu_core.c **** 
 641:uC-CPU/cpu_core.c ****     return (freq_hz);
 642:uC-CPU/cpu_core.c **** }
 643:uC-CPU/cpu_core.c **** #endif
 644:uC-CPU/cpu_core.c **** 
 645:uC-CPU/cpu_core.c **** 
 646:uC-CPU/cpu_core.c **** /*$PAGE*/
 647:uC-CPU/cpu_core.c **** /*
 648:uC-CPU/cpu_core.c **** ***************************************************************************************************
 649:uC-CPU/cpu_core.c **** *                                         CPU_TS_TmrFreqSet()
 650:uC-CPU/cpu_core.c **** *
 651:uC-CPU/cpu_core.c **** * Description : Set CPU timestamp's timer frequency.
 652:uC-CPU/cpu_core.c **** *
 653:uC-CPU/cpu_core.c **** * Argument(s) : freq_hz     Frequency (in Hertz) to set for CPU timestamp's timer.
 654:uC-CPU/cpu_core.c **** *
 655:uC-CPU/cpu_core.c **** * Return(s)   : none.
 656:uC-CPU/cpu_core.c **** *
 657:uC-CPU/cpu_core.c **** * Caller(s)   : CPU_TS_TmrInit(),
 658:uC-CPU/cpu_core.c **** *               Application/BSP initialization function(s).
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 13


 659:uC-CPU/cpu_core.c **** *
 660:uC-CPU/cpu_core.c **** *               This function is a CPU module BSP function & SHOULD be called only by appropriate
 661:uC-CPU/cpu_core.c **** *               application/BSP function(s) [see Note #1].
 662:uC-CPU/cpu_core.c **** *
 663:uC-CPU/cpu_core.c **** * Note(s)     : (1) (a) (1) CPU timestamp timer frequency is NOT required for internal CPU timestam
 664:uC-CPU/cpu_core.c **** *                           operations but may OPTIONALLY be configured by CPU_TS_TmrInit() or othe
 665:uC-CPU/cpu_core.c **** *                           application/BSP initialization functions.
 666:uC-CPU/cpu_core.c **** *
 667:uC-CPU/cpu_core.c **** *                       (2) CPU timestamp timer frequency MAY be used with optional CPU_TSxx_to_uSe
 668:uC-CPU/cpu_core.c **** *                           to convert CPU timestamps from timer counts into microseconds.
 669:uC-CPU/cpu_core.c **** *
 670:uC-CPU/cpu_core.c **** *                           See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2a
 671:uC-CPU/cpu_core.c **** *
 672:uC-CPU/cpu_core.c **** *                   (b) CPU timestamp timer period SHOULD be less than the typical measured time bu
 673:uC-CPU/cpu_core.c **** *                       be less than the maximum measured time; otherwise, timer resolution inadequ
 674:uC-CPU/cpu_core.c **** *                       measure desired times.
 675:uC-CPU/cpu_core.c **** *
 676:uC-CPU/cpu_core.c **** *                       See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2b'.
 677:uC-CPU/cpu_core.c **** ***************************************************************************************************
 678:uC-CPU/cpu_core.c **** */
 679:uC-CPU/cpu_core.c **** 
 680:uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
 681:uC-CPU/cpu_core.c **** void  CPU_TS_TmrFreqSet (CPU_TS_TMR_FREQ  freq_hz)
 682:uC-CPU/cpu_core.c **** {
 683:uC-CPU/cpu_core.c ****     CPU_TS_TmrFreq_Hz = freq_hz;
 684:uC-CPU/cpu_core.c **** }
 685:uC-CPU/cpu_core.c **** #endif
 686:uC-CPU/cpu_core.c **** 
 687:uC-CPU/cpu_core.c **** 
 688:uC-CPU/cpu_core.c **** /*$PAGE*/
 689:uC-CPU/cpu_core.c **** /*
 690:uC-CPU/cpu_core.c **** ***************************************************************************************************
 691:uC-CPU/cpu_core.c **** *                                     CPU_IntDisMeasMaxCurReset()
 692:uC-CPU/cpu_core.c **** *
 693:uC-CPU/cpu_core.c **** * Description : Reset current maximum interrupts disabled time.
 694:uC-CPU/cpu_core.c **** *
 695:uC-CPU/cpu_core.c **** * Argument(s) : none.
 696:uC-CPU/cpu_core.c **** *
 697:uC-CPU/cpu_core.c **** * Return(s)   : Maximum interrupts disabled time (in CPU timestamp timer counts) before resetting.
 698:uC-CPU/cpu_core.c **** *
 699:uC-CPU/cpu_core.c **** *               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()      Note #2c'
 700:uC-CPU/cpu_core.c **** *                      & 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2'.
 701:uC-CPU/cpu_core.c **** *
 702:uC-CPU/cpu_core.c **** * Caller(s)   : Application.
 703:uC-CPU/cpu_core.c **** *
 704:uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function 
 705:uC-CPU/cpu_core.c **** *               & MAY be called by application function(s).
 706:uC-CPU/cpu_core.c **** *
 707:uC-CPU/cpu_core.c **** * Note(s)     : (1) After initialization, 'CPU_IntDisMeasMaxCur_cnts' MUST ALWAYS be accessed
 708:uC-CPU/cpu_core.c **** *                   exclusively with interrupts disabled -- but NOT with critical sections.
 709:uC-CPU/cpu_core.c **** ***************************************************************************************************
 710:uC-CPU/cpu_core.c **** */
 711:uC-CPU/cpu_core.c **** 
 712:uC-CPU/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 713:uC-CPU/cpu_core.c **** CPU_TS_TMR  CPU_IntDisMeasMaxCurReset (void)
 714:uC-CPU/cpu_core.c **** {
 715:uC-CPU/cpu_core.c ****     CPU_TS_TMR  time_max_cnts;
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 14


 716:uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 717:uC-CPU/cpu_core.c **** 
 718:uC-CPU/cpu_core.c **** 
 719:uC-CPU/cpu_core.c ****     time_max_cnts             = CPU_IntDisMeasMaxCurGet();
 720:uC-CPU/cpu_core.c ****     CPU_INT_DIS();
 721:uC-CPU/cpu_core.c ****     CPU_IntDisMeasMaxCur_cnts = 0u;
 722:uC-CPU/cpu_core.c ****     CPU_INT_EN();
 723:uC-CPU/cpu_core.c **** 
 724:uC-CPU/cpu_core.c ****     return (time_max_cnts);
 725:uC-CPU/cpu_core.c **** }
 726:uC-CPU/cpu_core.c **** #endif
 727:uC-CPU/cpu_core.c **** 
 728:uC-CPU/cpu_core.c **** 
 729:uC-CPU/cpu_core.c **** /*$PAGE*/
 730:uC-CPU/cpu_core.c **** /*
 731:uC-CPU/cpu_core.c **** ***************************************************************************************************
 732:uC-CPU/cpu_core.c **** *                                      CPU_IntDisMeasMaxCurGet()
 733:uC-CPU/cpu_core.c **** *
 734:uC-CPU/cpu_core.c **** * Description : Get current maximum interrupts disabled time.
 735:uC-CPU/cpu_core.c **** *
 736:uC-CPU/cpu_core.c **** * Argument(s) : none.
 737:uC-CPU/cpu_core.c **** *
 738:uC-CPU/cpu_core.c **** * Return(s)   : Current maximum interrupts disabled time (in CPU timestamp timer counts).
 739:uC-CPU/cpu_core.c **** *
 740:uC-CPU/cpu_core.c **** *               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()      Note #2c'
 741:uC-CPU/cpu_core.c **** *                      & 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2'.
 742:uC-CPU/cpu_core.c **** *
 743:uC-CPU/cpu_core.c **** * Caller(s)   : CPU_IntDisMeasMaxCurReset(),
 744:uC-CPU/cpu_core.c **** *               Application.
 745:uC-CPU/cpu_core.c **** *
 746:uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function 
 747:uC-CPU/cpu_core.c **** *               & MAY be called by application function(s).
 748:uC-CPU/cpu_core.c **** *
 749:uC-CPU/cpu_core.c **** * Note(s)     : (1) After initialization, 'CPU_IntDisMeasMaxCur_cnts' MUST ALWAYS be accessed
 750:uC-CPU/cpu_core.c **** *                   exclusively with interrupts disabled -- but NOT with critical sections.
 751:uC-CPU/cpu_core.c **** ***************************************************************************************************
 752:uC-CPU/cpu_core.c **** */
 753:uC-CPU/cpu_core.c **** 
 754:uC-CPU/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 755:uC-CPU/cpu_core.c **** CPU_TS_TMR  CPU_IntDisMeasMaxCurGet (void)
 756:uC-CPU/cpu_core.c **** {
 757:uC-CPU/cpu_core.c ****     CPU_TS_TMR  time_tot_cnts;
 758:uC-CPU/cpu_core.c ****     CPU_TS_TMR  time_max_cnts;
 759:uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 760:uC-CPU/cpu_core.c **** 
 761:uC-CPU/cpu_core.c **** 
 762:uC-CPU/cpu_core.c ****     CPU_INT_DIS();
 763:uC-CPU/cpu_core.c ****     time_tot_cnts = CPU_IntDisMeasMaxCur_cnts;
 764:uC-CPU/cpu_core.c ****     CPU_INT_EN();
 765:uC-CPU/cpu_core.c ****     time_max_cnts = CPU_IntDisMeasMaxCalc(time_tot_cnts);
 766:uC-CPU/cpu_core.c **** 
 767:uC-CPU/cpu_core.c ****     return (time_max_cnts);
 768:uC-CPU/cpu_core.c **** }
 769:uC-CPU/cpu_core.c **** #endif
 770:uC-CPU/cpu_core.c **** 
 771:uC-CPU/cpu_core.c **** 
 772:uC-CPU/cpu_core.c **** /*$PAGE*/
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 15


 773:uC-CPU/cpu_core.c **** /*
 774:uC-CPU/cpu_core.c **** ***************************************************************************************************
 775:uC-CPU/cpu_core.c **** *                                       CPU_IntDisMeasMaxGet()
 776:uC-CPU/cpu_core.c **** *
 777:uC-CPU/cpu_core.c **** * Description : Get (non-resetable) maximum interrupts disabled time.
 778:uC-CPU/cpu_core.c **** *
 779:uC-CPU/cpu_core.c **** * Argument(s) : none.
 780:uC-CPU/cpu_core.c **** *
 781:uC-CPU/cpu_core.c **** * Return(s)   : (Non-resetable) maximum interrupts disabled time (in CPU timestamp timer counts).
 782:uC-CPU/cpu_core.c **** *
 783:uC-CPU/cpu_core.c **** *               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()      Note #2c'
 784:uC-CPU/cpu_core.c **** *                      & 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2'.
 785:uC-CPU/cpu_core.c **** *
 786:uC-CPU/cpu_core.c **** * Caller(s)   : CPU_IntDisMeasInit(),
 787:uC-CPU/cpu_core.c **** *               Application.
 788:uC-CPU/cpu_core.c **** *
 789:uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function 
 790:uC-CPU/cpu_core.c **** *               & MAY be called by application function(s).
 791:uC-CPU/cpu_core.c **** *
 792:uC-CPU/cpu_core.c **** * Note(s)     : (1) After initialization, 'CPU_IntDisMeasMax_cnts' MUST ALWAYS be accessed
 793:uC-CPU/cpu_core.c **** *                   exclusively with interrupts disabled -- but NOT with critical sections.
 794:uC-CPU/cpu_core.c **** ***************************************************************************************************
 795:uC-CPU/cpu_core.c **** */
 796:uC-CPU/cpu_core.c **** 
 797:uC-CPU/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 798:uC-CPU/cpu_core.c **** CPU_TS_TMR  CPU_IntDisMeasMaxGet (void)
 799:uC-CPU/cpu_core.c **** {
 800:uC-CPU/cpu_core.c ****     CPU_TS_TMR  time_tot_cnts;
 801:uC-CPU/cpu_core.c ****     CPU_TS_TMR  time_max_cnts;
 802:uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 803:uC-CPU/cpu_core.c **** 
 804:uC-CPU/cpu_core.c **** 
 805:uC-CPU/cpu_core.c ****     CPU_INT_DIS();
 806:uC-CPU/cpu_core.c ****     time_tot_cnts = CPU_IntDisMeasMax_cnts;
 807:uC-CPU/cpu_core.c ****     CPU_INT_EN();
 808:uC-CPU/cpu_core.c ****     time_max_cnts = CPU_IntDisMeasMaxCalc(time_tot_cnts);
 809:uC-CPU/cpu_core.c **** 
 810:uC-CPU/cpu_core.c ****     return (time_max_cnts);
 811:uC-CPU/cpu_core.c **** }
 812:uC-CPU/cpu_core.c **** #endif
 813:uC-CPU/cpu_core.c **** 
 814:uC-CPU/cpu_core.c **** 
 815:uC-CPU/cpu_core.c **** /*$PAGE*/
 816:uC-CPU/cpu_core.c **** /*
 817:uC-CPU/cpu_core.c **** ***************************************************************************************************
 818:uC-CPU/cpu_core.c **** *                                        CPU_IntDisMeasStart()
 819:uC-CPU/cpu_core.c **** *
 820:uC-CPU/cpu_core.c **** * Description : Start interrupts disabled time measurement.
 821:uC-CPU/cpu_core.c **** *
 822:uC-CPU/cpu_core.c **** * Argument(s) : none.
 823:uC-CPU/cpu_core.c **** *
 824:uC-CPU/cpu_core.c **** * Return(s)   : none.
 825:uC-CPU/cpu_core.c **** *
 826:uC-CPU/cpu_core.c **** * Caller(s)   : CPU_CRITICAL_ENTER().
 827:uC-CPU/cpu_core.c **** *
 828:uC-CPU/cpu_core.c **** *               This function is an INTERNAL CPU module function & MUST NOT be called by applicatio
 829:uC-CPU/cpu_core.c **** *               function(s).
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 16


 830:uC-CPU/cpu_core.c **** *
 831:uC-CPU/cpu_core.c **** * Note(s)     : none.
 832:uC-CPU/cpu_core.c **** ***************************************************************************************************
 833:uC-CPU/cpu_core.c **** */
 834:uC-CPU/cpu_core.c **** 
 835:uC-CPU/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 836:uC-CPU/cpu_core.c **** void  CPU_IntDisMeasStart (void)
 837:uC-CPU/cpu_core.c **** {
 838:uC-CPU/cpu_core.c ****     CPU_IntDisMeasCtr++;
 839:uC-CPU/cpu_core.c ****     if (CPU_IntDisNestCtr == 0u) {                                  /* If ints NOT yet dis'd, ...  
 840:uC-CPU/cpu_core.c ****         CPU_IntDisMeasStart_cnts = CPU_TS_TmrRd();                  /* ... get ints dis'd start tim
 841:uC-CPU/cpu_core.c ****     }
 842:uC-CPU/cpu_core.c ****     CPU_IntDisNestCtr++;
 843:uC-CPU/cpu_core.c **** }
 844:uC-CPU/cpu_core.c **** #endif
 845:uC-CPU/cpu_core.c **** 
 846:uC-CPU/cpu_core.c **** 
 847:uC-CPU/cpu_core.c **** /*$PAGE*/
 848:uC-CPU/cpu_core.c **** /*
 849:uC-CPU/cpu_core.c **** ***************************************************************************************************
 850:uC-CPU/cpu_core.c **** *                                        CPU_IntDisMeasStop()
 851:uC-CPU/cpu_core.c **** *
 852:uC-CPU/cpu_core.c **** * Description : Stop interrupts disabled time measurement.
 853:uC-CPU/cpu_core.c **** *
 854:uC-CPU/cpu_core.c **** * Argument(s) : none.
 855:uC-CPU/cpu_core.c **** *
 856:uC-CPU/cpu_core.c **** * Return(s)   : none.
 857:uC-CPU/cpu_core.c **** *
 858:uC-CPU/cpu_core.c **** * Caller(s)   : CPU_CRITICAL_EXIT().
 859:uC-CPU/cpu_core.c **** *
 860:uC-CPU/cpu_core.c **** *               This function is an INTERNAL CPU module function & MUST NOT be called by applicatio
 861:uC-CPU/cpu_core.c **** *               function(s).
 862:uC-CPU/cpu_core.c **** *
 863:uC-CPU/cpu_core.c **** * Note(s)     : (1) (a) The total amount of time interrupts are disabled by system &/or application
 864:uC-CPU/cpu_core.c **** *                       during critical sections is calculated by the following equations :
 865:uC-CPU/cpu_core.c **** *
 866:uC-CPU/cpu_core.c **** *                       (1) When interrupts disabled time measurements are disabled :
 867:uC-CPU/cpu_core.c **** *
 868:uC-CPU/cpu_core.c **** *
 869:uC-CPU/cpu_core.c **** *                               |   CRITICAL  |                           |   CRITICAL  |
 870:uC-CPU/cpu_core.c **** *                               |<- SECTION ->|                           |<- SECTION ->|
 871:uC-CPU/cpu_core.c **** *                               |    ENTER    |                           |    EXIT     |
 872:uC-CPU/cpu_core.c **** *
 873:uC-CPU/cpu_core.c **** *                            Disable                                    Enable
 874:uC-CPU/cpu_core.c **** *                           Interrupts                                Interrupts
 875:uC-CPU/cpu_core.c **** *
 876:uC-CPU/cpu_core.c **** *                               ||           ||                           ||           ||
 877:uC-CPU/cpu_core.c **** *                               ||           ||                           ||           ||
 878:uC-CPU/cpu_core.c **** *                               ||       |   ||<------------------------->||       |   ||
 879:uC-CPU/cpu_core.c **** *                               ||       |<->||             |             ||<----->|   ||
 880:uC-CPU/cpu_core.c **** *                               ||       | | ||             |             ||   |   |   ||
 881:uC-CPU/cpu_core.c **** *                                        | |                |                  |   |
 882:uC-CPU/cpu_core.c **** *                                   interrupts            time                 interrupts
 883:uC-CPU/cpu_core.c **** *                                    disabled                 interrupts       |enabled
 884:uC-CPU/cpu_core.c **** *                                          |                   disabled        |
 885:uC-CPU/cpu_core.c **** *                                          |              (via application)    |
 886:uC-CPU/cpu_core.c **** *                                       time                                 time
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 17


 887:uC-CPU/cpu_core.c **** *                                           interrupts                           interrupts
 888:uC-CPU/cpu_core.c **** *                                         disabled ovrhd                        enabled ovrhd
 889:uC-CPU/cpu_core.c **** *
 890:uC-CPU/cpu_core.c **** *
 891:uC-CPU/cpu_core.c **** *                           (A) time            =  [ time            -  time           ]  -  time
 892:uC-CPU/cpu_core.c **** *                                   interrupts     [     interrupts         interrupts ]         to
 893:uC-CPU/cpu_core.c **** *                                    disabled      [      enabled            disabled  ]         ov
 894:uC-CPU/cpu_core.c **** *                               (via application)
 895:uC-CPU/cpu_core.c **** *
 896:uC-CPU/cpu_core.c **** *
 897:uC-CPU/cpu_core.c **** *                           (B) time       =  time              +  time
 898:uC-CPU/cpu_core.c **** *                                   total         interrupts           interrupts
 899:uC-CPU/cpu_core.c **** *                                   ovrhd        enabled ovrhd       disabled ovrhd
 900:uC-CPU/cpu_core.c **** *
 901:uC-CPU/cpu_core.c **** *
 902:uC-CPU/cpu_core.c **** *                                   where
 903:uC-CPU/cpu_core.c **** *
 904:uC-CPU/cpu_core.c **** *                                           time                    time interrupts are disabled be
 905:uC-CPU/cpu_core.c **** *                                               interrupts              first critical section ente
 906:uC-CPU/cpu_core.c **** *                                                disabled               last  critical section exit
 907:uC-CPU/cpu_core.c **** *                                           (via application)           minus total overhead time)
 908:uC-CPU/cpu_core.c **** *
 909:uC-CPU/cpu_core.c **** *                                           time                    time when interrupts are disabl
 910:uC-CPU/cpu_core.c **** *                                               interrupts
 911:uC-CPU/cpu_core.c **** *                                                disabled
 912:uC-CPU/cpu_core.c **** *
 913:uC-CPU/cpu_core.c **** *                                           time                    time when interrupts are  enabl
 914:uC-CPU/cpu_core.c **** *                                               interrupts
 915:uC-CPU/cpu_core.c **** *                                                enabled
 916:uC-CPU/cpu_core.c **** *
 917:uC-CPU/cpu_core.c **** *
 918:uC-CPU/cpu_core.c **** *                                           time                    total overhead time to disable/
 919:uC-CPU/cpu_core.c **** *                                               total                   interrupts during critical 
 920:uC-CPU/cpu_core.c **** *                                               ovrhd                   enter & exit
 921:uC-CPU/cpu_core.c **** *
 922:uC-CPU/cpu_core.c **** *                                           time                    total overhead time to disable 
 923:uC-CPU/cpu_core.c **** *                                               interrupts              during critical section ent
 924:uC-CPU/cpu_core.c **** *                                             disabled ovrhd
 925:uC-CPU/cpu_core.c **** *
 926:uC-CPU/cpu_core.c **** *                                           time                    total overhead time to enable  
 927:uC-CPU/cpu_core.c **** *                                               interrupts              during critical section exi
 928:uC-CPU/cpu_core.c **** *                                              enabled ovrhd
 929:uC-CPU/cpu_core.c **** *
 930:uC-CPU/cpu_core.c **** *$PAGE*
 931:uC-CPU/cpu_core.c **** *
 932:uC-CPU/cpu_core.c **** *                       (2) When interrupts disabled time measurements are enabled :
 933:uC-CPU/cpu_core.c **** *
 934:uC-CPU/cpu_core.c **** *
 935:uC-CPU/cpu_core.c **** *        |                                    |                           |                        
 936:uC-CPU/cpu_core.c **** *        |<----- CRITICAL SECTION ENTER ----->|                           |<------- CRITICAL SECTIO
 937:uC-CPU/cpu_core.c **** *        |                                    |                           |                        
 938:uC-CPU/cpu_core.c **** *
 939:uC-CPU/cpu_core.c **** *                   Time                                                 Time
 940:uC-CPU/cpu_core.c **** *     Disable    Measurement                                          Measurement                  
 941:uC-CPU/cpu_core.c **** *    Interrupts     Start                                                Stop                    In
 942:uC-CPU/cpu_core.c **** *
 943:uC-CPU/cpu_core.c **** *        ||           |                      ||                           ||                       
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 18


 944:uC-CPU/cpu_core.c **** *        ||           |                      ||                           ||                       
 945:uC-CPU/cpu_core.c **** *        ||           |        |             ||<------------------------->||               |       
 946:uC-CPU/cpu_core.c **** *        ||       |   |        |<----------->||             |             ||<------------->|       
 947:uC-CPU/cpu_core.c **** *        ||       |   |        |      |      ||             |             ||       |       |       
 948:uC-CPU/cpu_core.c **** *                 |            |      |                     |                      |       |       
 949:uC-CPU/cpu_core.c **** *            interrupts       get     |                   time                     |      get      
 950:uC-CPU/cpu_core.c **** *             disabled    start time  |                       interrupts           |   stop time   
 951:uC-CPU/cpu_core.c **** *                            meas     |                        disabled            |     meas
 952:uC-CPU/cpu_core.c **** *                                   time                  (via application)      time
 953:uC-CPU/cpu_core.c **** *                                       start meas                                   stop meas
 954:uC-CPU/cpu_core.c **** *                                         ovrhd                                        ovrhd
 955:uC-CPU/cpu_core.c **** *
 956:uC-CPU/cpu_core.c **** *
 957:uC-CPU/cpu_core.c **** *                           (A) time            =  [ time       -  time      ]  -  time
 958:uC-CPU/cpu_core.c **** *                                   interrupts     [      stop         start ]         total meas
 959:uC-CPU/cpu_core.c **** *                                    disabled      [      meas         meas  ]           ovrhd
 960:uC-CPU/cpu_core.c **** *                               (via application)
 961:uC-CPU/cpu_core.c **** *
 962:uC-CPU/cpu_core.c **** *
 963:uC-CPU/cpu_core.c **** *                           (B) time            =  time            +  time
 964:uC-CPU/cpu_core.c **** *                                   total meas         start meas         stop meas
 965:uC-CPU/cpu_core.c **** *                                     ovrhd              ovrhd              ovrhd
 966:uC-CPU/cpu_core.c **** *
 967:uC-CPU/cpu_core.c **** *
 968:uC-CPU/cpu_core.c **** *                                   where
 969:uC-CPU/cpu_core.c **** *
 970:uC-CPU/cpu_core.c **** *                                           time                    time interrupts are disabled be
 971:uC-CPU/cpu_core.c **** *                                               interrupts              critical section enter & la
 972:uC-CPU/cpu_core.c **** *                                                disabled               section exit (i.e. minus me
 973:uC-CPU/cpu_core.c **** *                                           (via application)           overhead time; however, thi
 974:uC-CPU/cpu_core.c **** *                                                                       include any overhead time t
 975:uC-CPU/cpu_core.c **** *                                                                       or enable interrupts during
 976:uC-CPU/cpu_core.c **** *                                                                       section enter & exit)
 977:uC-CPU/cpu_core.c **** *
 978:uC-CPU/cpu_core.c **** *                                           time                    time of disable interrupts star
 979:uC-CPU/cpu_core.c **** *                                               start                   measurement (in timer count
 980:uC-CPU/cpu_core.c **** *                                               meas
 981:uC-CPU/cpu_core.c **** *
 982:uC-CPU/cpu_core.c **** *                                           time                    time of disable interrupts stop
 983:uC-CPU/cpu_core.c **** *                                               stop                    measurement (in timer count
 984:uC-CPU/cpu_core.c **** *                                               meas
 985:uC-CPU/cpu_core.c **** *
 986:uC-CPU/cpu_core.c **** *
 987:uC-CPU/cpu_core.c **** *                                           time                    total overhead time to start/st
 988:uC-CPU/cpu_core.c **** *                                               total meas              interrupts time measurement
 989:uC-CPU/cpu_core.c **** *                                                 ovrhd                 counts)
 990:uC-CPU/cpu_core.c **** *
 991:uC-CPU/cpu_core.c **** *                                           time                    total overhead time after getti
 992:uC-CPU/cpu_core.c **** *                                               start meas              time until end of start mea
 993:uC-CPU/cpu_core.c **** *                                                 ovrhd                 function  (in timer counts)
 994:uC-CPU/cpu_core.c **** *
 995:uC-CPU/cpu_core.c **** *                                           time                    total overhead time from beginn
 996:uC-CPU/cpu_core.c **** *                                               stop meas               measurement function until 
 997:uC-CPU/cpu_core.c **** *                                                 ovrhd                 stop time (in timer counts)
 998:uC-CPU/cpu_core.c **** *
 999:uC-CPU/cpu_core.c **** *
1000:uC-CPU/cpu_core.c **** *$PAGE*
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 19


1001:uC-CPU/cpu_core.c **** *                   (b) (1) (A) In order to correctly handle unsigned subtraction overflows of star
1002:uC-CPU/cpu_core.c **** *                               from stop times, CPU timestamp timer count values MUST be returned 
1003:uC-CPU/cpu_core.c **** *                               word-size-configurable 'CPU_TS_TMR' data type.
1004:uC-CPU/cpu_core.c **** *
1005:uC-CPU/cpu_core.c **** *                               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2a
1006:uC-CPU/cpu_core.c **** *
1007:uC-CPU/cpu_core.c **** *                           (B) Since unsigned subtraction of start times from stop times assumes i
1008:uC-CPU/cpu_core.c **** *                               values, timestamp timer count values MUST increase with each time c
1009:uC-CPU/cpu_core.c **** *
1010:uC-CPU/cpu_core.c **** *                               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2b
1011:uC-CPU/cpu_core.c **** *
1012:uC-CPU/cpu_core.c **** *                       (2) (A) To expedite & reduce interrupts disabled time measurement overhead;
1013:uC-CPU/cpu_core.c **** *                               subtraction of start times from stop times is performed.
1014:uC-CPU/cpu_core.c **** *
1015:uC-CPU/cpu_core.c **** *                           (B) The final calculations to subtract the interrupts disabled time mea
1016:uC-CPU/cpu_core.c **** *                               overhead is performed asynchronously in appropriate API functions.
1017:uC-CPU/cpu_core.c **** *
1018:uC-CPU/cpu_core.c **** *                               See also 'CPU_IntDisMeasMaxCalc()  Note #1b'.
1019:uC-CPU/cpu_core.c **** ***************************************************************************************************
1020:uC-CPU/cpu_core.c **** */
1021:uC-CPU/cpu_core.c **** 
1022:uC-CPU/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
1023:uC-CPU/cpu_core.c **** void  CPU_IntDisMeasStop (void)
1024:uC-CPU/cpu_core.c **** {
1025:uC-CPU/cpu_core.c ****     CPU_TS_TMR  time_ints_disd_cnts;
1026:uC-CPU/cpu_core.c **** 
1027:uC-CPU/cpu_core.c **** 
1028:uC-CPU/cpu_core.c ****     CPU_IntDisNestCtr--;
1029:uC-CPU/cpu_core.c ****     if (CPU_IntDisNestCtr == 0u) {                                  /* If ints NO longer dis'd,    
1030:uC-CPU/cpu_core.c ****         CPU_IntDisMeasStop_cnts = CPU_TS_TmrRd();                   /* ... get  ints dis'd stop tim
1031:uC-CPU/cpu_core.c ****                                                                     /* ... calc ints dis'd tot  tim
1032:uC-CPU/cpu_core.c ****         time_ints_disd_cnts     = CPU_IntDisMeasStop_cnts -
1033:uC-CPU/cpu_core.c ****                                   CPU_IntDisMeasStart_cnts;
1034:uC-CPU/cpu_core.c ****                                                                     /* Calc max ints dis'd times.  
1035:uC-CPU/cpu_core.c ****         if (CPU_IntDisMeasMaxCur_cnts < time_ints_disd_cnts) {
1036:uC-CPU/cpu_core.c ****             CPU_IntDisMeasMaxCur_cnts = time_ints_disd_cnts;
1037:uC-CPU/cpu_core.c ****         }
1038:uC-CPU/cpu_core.c ****         if (CPU_IntDisMeasMax_cnts    < time_ints_disd_cnts) {
1039:uC-CPU/cpu_core.c ****             CPU_IntDisMeasMax_cnts    = time_ints_disd_cnts;
1040:uC-CPU/cpu_core.c ****         }
1041:uC-CPU/cpu_core.c ****     }
1042:uC-CPU/cpu_core.c **** }
1043:uC-CPU/cpu_core.c **** #endif
1044:uC-CPU/cpu_core.c **** 
1045:uC-CPU/cpu_core.c **** 
1046:uC-CPU/cpu_core.c **** /*$PAGE*/
1047:uC-CPU/cpu_core.c **** /*
1048:uC-CPU/cpu_core.c **** ***************************************************************************************************
1049:uC-CPU/cpu_core.c **** *                                         CPU_CntLeadZeros()
1050:uC-CPU/cpu_core.c **** *
1051:uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in a data value
1052:uC-CPU/cpu_core.c **** *
1053:uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
1054:uC-CPU/cpu_core.c **** *
1055:uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val', if NO error(s).
1056:uC-CPU/cpu_core.c **** *
1057:uC-CPU/cpu_core.c **** *               DEF_INT_CPU_U_MAX_VAL,                                              otherwise.
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 20


1058:uC-CPU/cpu_core.c **** *
1059:uC-CPU/cpu_core.c **** * Caller(s)   : CPU_CntTrailZeros(),
1060:uC-CPU/cpu_core.c **** *               Application.
1061:uC-CPU/cpu_core.c **** *
1062:uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1063:uC-CPU/cpu_core.c **** *               be called by application function(s).
1064:uC-CPU/cpu_core.c **** *
1065:uC-CPU/cpu_core.c **** * Note(s)     : (1) (a) Supports the following data value sizes :
1066:uC-CPU/cpu_core.c **** *
1067:uC-CPU/cpu_core.c **** *                       (1)  8-bits
1068:uC-CPU/cpu_core.c **** *                       (2) 16-bits
1069:uC-CPU/cpu_core.c **** *                       (3) 32-bits
1070:uC-CPU/cpu_core.c **** *                       (4) 64-bits
1071:uC-CPU/cpu_core.c **** *
1072:uC-CPU/cpu_core.c **** *                       See also 'cpu_def.h  CPU WORD CONFIGURATION  Note #1'.
1073:uC-CPU/cpu_core.c **** *
1074:uC-CPU/cpu_core.c **** *                   (b) (1) For  8-bit values :
1075:uC-CPU/cpu_core.c **** *
1076:uC-CPU/cpu_core.c **** *                                  b07  b06  b05  b04  b03  b02  b01  b00    # Leading Zeros
1077:uC-CPU/cpu_core.c **** *                                  ---  ---  ---  ---  ---  ---  ---  ---    ---------------
1078:uC-CPU/cpu_core.c **** *                                   1    x    x    x    x    x    x    x            0
1079:uC-CPU/cpu_core.c **** *                                   0    1    x    x    x    x    x    x            1
1080:uC-CPU/cpu_core.c **** *                                   0    0    1    x    x    x    x    x            2
1081:uC-CPU/cpu_core.c **** *                                   0    0    0    1    x    x    x    x            3
1082:uC-CPU/cpu_core.c **** *                                   0    0    0    0    1    x    x    x            4
1083:uC-CPU/cpu_core.c **** *                                   0    0    0    0    0    1    x    x            5
1084:uC-CPU/cpu_core.c **** *                                   0    0    0    0    0    0    1    x            6
1085:uC-CPU/cpu_core.c **** *                                   0    0    0    0    0    0    0    1            7
1086:uC-CPU/cpu_core.c **** *                                   0    0    0    0    0    0    0    0            8
1087:uC-CPU/cpu_core.c **** *
1088:uC-CPU/cpu_core.c **** *
1089:uC-CPU/cpu_core.c **** *                       (2) For 16-bit values :
1090:uC-CPU/cpu_core.c **** *
1091:uC-CPU/cpu_core.c **** *                             b15  b14  b13  ...  b04  b03  b02  b01  b00    # Leading Zeros
1092:uC-CPU/cpu_core.c **** *                             ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1093:uC-CPU/cpu_core.c **** *                              1    x    x         x    x    x    x    x            0
1094:uC-CPU/cpu_core.c **** *                              0    1    x         x    x    x    x    x            1
1095:uC-CPU/cpu_core.c **** *                              0    0    1         x    x    x    x    x            2
1096:uC-CPU/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1097:uC-CPU/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1098:uC-CPU/cpu_core.c **** *                              0    0    0         1    x    x    x    x           11
1099:uC-CPU/cpu_core.c **** *                              0    0    0         0    1    x    x    x           12
1100:uC-CPU/cpu_core.c **** *                              0    0    0         0    0    1    x    x           13
1101:uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    1    x           14
1102:uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    0    1           15
1103:uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    0    0           16
1104:uC-CPU/cpu_core.c **** *
1105:uC-CPU/cpu_core.c **** *$PAGE*
1106:uC-CPU/cpu_core.c **** *                       (3) For 32-bit values :
1107:uC-CPU/cpu_core.c **** *
1108:uC-CPU/cpu_core.c **** *                             b31  b30  b29  ...  b04  b03  b02  b01  b00    # Leading Zeros
1109:uC-CPU/cpu_core.c **** *                             ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1110:uC-CPU/cpu_core.c **** *                              1    x    x         x    x    x    x    x            0
1111:uC-CPU/cpu_core.c **** *                              0    1    x         x    x    x    x    x            1
1112:uC-CPU/cpu_core.c **** *                              0    0    1         x    x    x    x    x            2
1113:uC-CPU/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1114:uC-CPU/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 21


1115:uC-CPU/cpu_core.c **** *                              0    0    0         1    x    x    x    x           27
1116:uC-CPU/cpu_core.c **** *                              0    0    0         0    1    x    x    x           28
1117:uC-CPU/cpu_core.c **** *                              0    0    0         0    0    1    x    x           29
1118:uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    1    x           30
1119:uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    0    1           31
1120:uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    0    0           32
1121:uC-CPU/cpu_core.c **** *
1122:uC-CPU/cpu_core.c **** *
1123:uC-CPU/cpu_core.c **** *                       (4) For 64-bit values :
1124:uC-CPU/cpu_core.c **** *
1125:uC-CPU/cpu_core.c **** *                             b63  b62  b61  ...  b04  b03  b02  b01  b00    # Leading Zeros
1126:uC-CPU/cpu_core.c **** *                             ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1127:uC-CPU/cpu_core.c **** *                              1    x    x         x    x    x    x    x            0
1128:uC-CPU/cpu_core.c **** *                              0    1    x         x    x    x    x    x            1
1129:uC-CPU/cpu_core.c **** *                              0    0    1         x    x    x    x    x            2
1130:uC-CPU/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1131:uC-CPU/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1132:uC-CPU/cpu_core.c **** *                              0    0    0         1    x    x    x    x           59
1133:uC-CPU/cpu_core.c **** *                              0    0    0         0    1    x    x    x           60
1134:uC-CPU/cpu_core.c **** *                              0    0    0         0    0    1    x    x           61
1135:uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    1    x           62
1136:uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    0    1           63
1137:uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    0    0           64
1138:uC-CPU/cpu_core.c **** *
1139:uC-CPU/cpu_core.c **** *
1140:uC-CPU/cpu_core.c **** *                       See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1141:uC-CPU/cpu_core.c **** ***************************************************************************************************
1142:uC-CPU/cpu_core.c **** */
1143:uC-CPU/cpu_core.c **** 
1144:uC-CPU/cpu_core.c **** #ifndef   CPU_CFG_LEAD_ZEROS_ASM_PRESENT
1145:uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntLeadZeros (CPU_DATA  val)
1146:uC-CPU/cpu_core.c **** {
1147:uC-CPU/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1148:uC-CPU/cpu_core.c **** 
1149:uC-CPU/cpu_core.c **** 
1150:uC-CPU/cpu_core.c **** #if   (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_08)
1151:uC-CPU/cpu_core.c ****     nbr_lead_zeros = CPU_CntLeadZeros08((CPU_INT08U)val);
1152:uC-CPU/cpu_core.c **** 
1153:uC-CPU/cpu_core.c **** #elif (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_16)
1154:uC-CPU/cpu_core.c ****     nbr_lead_zeros = CPU_CntLeadZeros16((CPU_INT16U)val);
1155:uC-CPU/cpu_core.c **** 
1156:uC-CPU/cpu_core.c **** #elif (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_32)
1157:uC-CPU/cpu_core.c ****     nbr_lead_zeros = CPU_CntLeadZeros32((CPU_INT32U)val);
1158:uC-CPU/cpu_core.c **** 
1159:uC-CPU/cpu_core.c **** #elif (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_64)
1160:uC-CPU/cpu_core.c ****     nbr_lead_zeros = CPU_CntLeadZeros64((CPU_INT64U)val);
1161:uC-CPU/cpu_core.c **** 
1162:uC-CPU/cpu_core.c **** #else                                                           /* See Note #1a.                   
1163:uC-CPU/cpu_core.c ****     nbr_lead_zeros = DEF_INT_CPU_U_MAX_VAL;
1164:uC-CPU/cpu_core.c **** #endif
1165:uC-CPU/cpu_core.c **** 
1166:uC-CPU/cpu_core.c **** 
1167:uC-CPU/cpu_core.c ****     return (nbr_lead_zeros);
1168:uC-CPU/cpu_core.c **** }
1169:uC-CPU/cpu_core.c **** #endif
1170:uC-CPU/cpu_core.c **** 
1171:uC-CPU/cpu_core.c **** 
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 22


1172:uC-CPU/cpu_core.c **** /*$PAGE*/
1173:uC-CPU/cpu_core.c **** /*
1174:uC-CPU/cpu_core.c **** ***************************************************************************************************
1175:uC-CPU/cpu_core.c **** *                                        CPU_CntLeadZeros08()
1176:uC-CPU/cpu_core.c **** *
1177:uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in an 8-bit dat
1178:uC-CPU/cpu_core.c **** *
1179:uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
1180:uC-CPU/cpu_core.c **** *
1181:uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.
1182:uC-CPU/cpu_core.c **** *
1183:uC-CPU/cpu_core.c **** * Caller(s)   : CPU_CntLeadZeros(),
1184:uC-CPU/cpu_core.c **** *               CPU_CntTrailZeros08(),
1185:uC-CPU/cpu_core.c **** *               Application.
1186:uC-CPU/cpu_core.c **** *
1187:uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1188:uC-CPU/cpu_core.c **** *               called by application function(s).
1189:uC-CPU/cpu_core.c **** *
1190:uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports  8-bit values :
1191:uC-CPU/cpu_core.c **** *
1192:uC-CPU/cpu_core.c **** *                               b07  b06  b05  b04  b03  b02  b01  b00    # Leading Zeros
1193:uC-CPU/cpu_core.c **** *                               ---  ---  ---  ---  ---  ---  ---  ---    ---------------
1194:uC-CPU/cpu_core.c **** *                                1    x    x    x    x    x    x    x            0
1195:uC-CPU/cpu_core.c **** *                                0    1    x    x    x    x    x    x            1
1196:uC-CPU/cpu_core.c **** *                                0    0    1    x    x    x    x    x            2
1197:uC-CPU/cpu_core.c **** *                                0    0    0    1    x    x    x    x            3
1198:uC-CPU/cpu_core.c **** *                                0    0    0    0    1    x    x    x            4
1199:uC-CPU/cpu_core.c **** *                                0    0    0    0    0    1    x    x            5
1200:uC-CPU/cpu_core.c **** *                                0    0    0    0    0    0    1    x            6
1201:uC-CPU/cpu_core.c **** *                                0    0    0    0    0    0    0    1            7
1202:uC-CPU/cpu_core.c **** *                                0    0    0    0    0    0    0    0            8
1203:uC-CPU/cpu_core.c **** *
1204:uC-CPU/cpu_core.c **** *
1205:uC-CPU/cpu_core.c **** *                   See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1206:uC-CPU/cpu_core.c **** ***************************************************************************************************
1207:uC-CPU/cpu_core.c **** */
1208:uC-CPU/cpu_core.c **** 
1209:uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_08)
1210:uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntLeadZeros08 (CPU_INT08U  val)
1211:uC-CPU/cpu_core.c **** {
1212:uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1213:uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08)))
1214:uC-CPU/cpu_core.c ****     CPU_DATA  ix;
1215:uC-CPU/cpu_core.c **** #endif
1216:uC-CPU/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1217:uC-CPU/cpu_core.c **** 
1218:uC-CPU/cpu_core.c ****                                                                                 /* ---------- ASM-O
1219:uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1220:uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08))
1221:uC-CPU/cpu_core.c ****     nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
1222:uC-CPU/cpu_core.c ****     nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_08) * DEF_OCTET_NBR_BITS;
1223:uC-CPU/cpu_core.c **** 
1224:uC-CPU/cpu_core.c **** 
1225:uC-CPU/cpu_core.c **** #else                                                                           /* ----------- C-OP
1226:uC-CPU/cpu_core.c ****                                                                                 /* Chk bits [07:00]
1227:uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1228:uC-CPU/cpu_core.c ****     ix              = (CPU_DATA)(val >>  0u);                                   /* .. lookup tbl ix
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 23


1229:uC-CPU/cpu_core.c ****     nbr_lead_zeros  = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  0u);                /* .. plus nbr msb 
1230:uC-CPU/cpu_core.c **** #endif
1231:uC-CPU/cpu_core.c **** 
1232:uC-CPU/cpu_core.c **** 
1233:uC-CPU/cpu_core.c ****     return (nbr_lead_zeros);
1234:uC-CPU/cpu_core.c **** }
1235:uC-CPU/cpu_core.c **** #endif
1236:uC-CPU/cpu_core.c **** 
1237:uC-CPU/cpu_core.c **** 
1238:uC-CPU/cpu_core.c **** /*$PAGE*/
1239:uC-CPU/cpu_core.c **** /*
1240:uC-CPU/cpu_core.c **** ***************************************************************************************************
1241:uC-CPU/cpu_core.c **** *                                        CPU_CntLeadZeros16()
1242:uC-CPU/cpu_core.c **** *
1243:uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in a 16-bit dat
1244:uC-CPU/cpu_core.c **** *
1245:uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
1246:uC-CPU/cpu_core.c **** *
1247:uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.
1248:uC-CPU/cpu_core.c **** *
1249:uC-CPU/cpu_core.c **** * Caller(s)   : CPU_CntLeadZeros(),
1250:uC-CPU/cpu_core.c **** *               CPU_CntTrailZeros16(),
1251:uC-CPU/cpu_core.c **** *               Application.
1252:uC-CPU/cpu_core.c **** *
1253:uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1254:uC-CPU/cpu_core.c **** *               called by application function(s).
1255:uC-CPU/cpu_core.c **** *
1256:uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports 16-bit values :
1257:uC-CPU/cpu_core.c **** *
1258:uC-CPU/cpu_core.c **** *                          b15  b14  b13  ...  b04  b03  b02  b01  b00    # Leading Zeros
1259:uC-CPU/cpu_core.c **** *                          ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1260:uC-CPU/cpu_core.c **** *                           1    x    x         x    x    x    x    x            0
1261:uC-CPU/cpu_core.c **** *                           0    1    x         x    x    x    x    x            1
1262:uC-CPU/cpu_core.c **** *                           0    0    1         x    x    x    x    x            2
1263:uC-CPU/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1264:uC-CPU/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1265:uC-CPU/cpu_core.c **** *                           0    0    0         1    x    x    x    x           11
1266:uC-CPU/cpu_core.c **** *                           0    0    0         0    1    x    x    x           12
1267:uC-CPU/cpu_core.c **** *                           0    0    0         0    0    1    x    x           13
1268:uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    1    x           14
1269:uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    0    1           15
1270:uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    0    0           16
1271:uC-CPU/cpu_core.c **** *
1272:uC-CPU/cpu_core.c **** *
1273:uC-CPU/cpu_core.c **** *                   See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1274:uC-CPU/cpu_core.c **** ***************************************************************************************************
1275:uC-CPU/cpu_core.c **** */
1276:uC-CPU/cpu_core.c **** 
1277:uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_16)
1278:uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntLeadZeros16 (CPU_INT16U  val)
1279:uC-CPU/cpu_core.c **** {
1280:uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1281:uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16)))
1282:uC-CPU/cpu_core.c ****     CPU_DATA  ix;
1283:uC-CPU/cpu_core.c **** #endif
1284:uC-CPU/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1285:uC-CPU/cpu_core.c **** 
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 24


1286:uC-CPU/cpu_core.c ****                                                                                 /* ---------- ASM-O
1287:uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1288:uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16))
1289:uC-CPU/cpu_core.c ****     nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
1290:uC-CPU/cpu_core.c ****     nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_16) * DEF_OCTET_NBR_BITS;
1291:uC-CPU/cpu_core.c **** 
1292:uC-CPU/cpu_core.c **** 
1293:uC-CPU/cpu_core.c **** #else                                                                           /* ----------- C-OP
1294:uC-CPU/cpu_core.c ****     if (val > 0x00FFu) {                                                        /* Chk bits [15:08]
1295:uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1296:uC-CPU/cpu_core.c ****         ix             = (CPU_DATA)(val >>  8u);                                /* .. lookup tbl ix
1297:uC-CPU/cpu_core.c ****         nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  0u);             /* .. plus nbr msb 
1298:uC-CPU/cpu_core.c **** 
1299:uC-CPU/cpu_core.c ****     } else {                                                                    /* Chk bits [07:00]
1300:uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1301:uC-CPU/cpu_core.c ****         ix             = (CPU_DATA)(val >>  0u);                                /* .. lookup tbl ix
1302:uC-CPU/cpu_core.c ****         nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  8u);             /* .. plus nbr msb 
1303:uC-CPU/cpu_core.c ****     }
1304:uC-CPU/cpu_core.c **** #endif
1305:uC-CPU/cpu_core.c **** 
1306:uC-CPU/cpu_core.c **** 
1307:uC-CPU/cpu_core.c ****     return (nbr_lead_zeros);
1308:uC-CPU/cpu_core.c **** }
1309:uC-CPU/cpu_core.c **** #endif
1310:uC-CPU/cpu_core.c **** 
1311:uC-CPU/cpu_core.c **** 
1312:uC-CPU/cpu_core.c **** /*$PAGE*/
1313:uC-CPU/cpu_core.c **** /*
1314:uC-CPU/cpu_core.c **** ***************************************************************************************************
1315:uC-CPU/cpu_core.c **** *                                        CPU_CntLeadZeros32()
1316:uC-CPU/cpu_core.c **** *
1317:uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in a 32-bit dat
1318:uC-CPU/cpu_core.c **** *
1319:uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
1320:uC-CPU/cpu_core.c **** *
1321:uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.
1322:uC-CPU/cpu_core.c **** *
1323:uC-CPU/cpu_core.c **** * Caller(s)   : CPU_CntLeadZeros(),
1324:uC-CPU/cpu_core.c **** *               CPU_CntTrailZeros32(),
1325:uC-CPU/cpu_core.c **** *               Application.
1326:uC-CPU/cpu_core.c **** *
1327:uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1328:uC-CPU/cpu_core.c **** *               called by application function(s).
1329:uC-CPU/cpu_core.c **** *
1330:uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports 32-bit values :
1331:uC-CPU/cpu_core.c **** *
1332:uC-CPU/cpu_core.c **** *                          b31  b30  b29  ...  b04  b03  b02  b01  b00    # Leading Zeros
1333:uC-CPU/cpu_core.c **** *                          ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1334:uC-CPU/cpu_core.c **** *                           1    x    x         x    x    x    x    x            0
1335:uC-CPU/cpu_core.c **** *                           0    1    x         x    x    x    x    x            1
1336:uC-CPU/cpu_core.c **** *                           0    0    1         x    x    x    x    x            2
1337:uC-CPU/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1338:uC-CPU/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1339:uC-CPU/cpu_core.c **** *                           0    0    0         1    x    x    x    x           27
1340:uC-CPU/cpu_core.c **** *                           0    0    0         0    1    x    x    x           28
1341:uC-CPU/cpu_core.c **** *                           0    0    0         0    0    1    x    x           29
1342:uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    1    x           30
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 25


1343:uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    0    1           31
1344:uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    0    0           32
1345:uC-CPU/cpu_core.c **** *
1346:uC-CPU/cpu_core.c **** *
1347:uC-CPU/cpu_core.c **** *                   See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1348:uC-CPU/cpu_core.c **** ***************************************************************************************************
1349:uC-CPU/cpu_core.c **** */
1350:uC-CPU/cpu_core.c **** 
1351:uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_32)
1352:uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntLeadZeros32 (CPU_INT32U  val)
1353:uC-CPU/cpu_core.c **** {
1354:uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1355:uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32)))
1356:uC-CPU/cpu_core.c ****     CPU_DATA  ix;
1357:uC-CPU/cpu_core.c **** #endif
1358:uC-CPU/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1359:uC-CPU/cpu_core.c **** 
1360:uC-CPU/cpu_core.c ****                                                                                 /* ---------- ASM-O
1361:uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1362:uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32))
1363:uC-CPU/cpu_core.c ****     nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
1364:uC-CPU/cpu_core.c ****     nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_32) * DEF_OCTET_NBR_BITS;
1365:uC-CPU/cpu_core.c **** 
1366:uC-CPU/cpu_core.c **** 
1367:uC-CPU/cpu_core.c **** #else                                                                           /* ----------- C-OP
1368:uC-CPU/cpu_core.c ****     if (val > 0x0000FFFFu) {
1369:uC-CPU/cpu_core.c ****         if (val > 0x00FFFFFFu) {                                                /* Chk bits [31:24]
1370:uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1371:uC-CPU/cpu_core.c ****             ix             = (CPU_DATA)(val >> 24u);                            /* .. lookup tbl ix
1372:uC-CPU/cpu_core.c ****             nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  0u);         /* .. plus nbr msb 
1373:uC-CPU/cpu_core.c **** 
1374:uC-CPU/cpu_core.c ****         } else {                                                                /* Chk bits [23:16]
1375:uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1376:uC-CPU/cpu_core.c ****             ix             = (CPU_DATA)(val >> 16u);                            /* .. lookup tbl ix
1377:uC-CPU/cpu_core.c ****             nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  8u);         /* .. plus nbr msb 
1378:uC-CPU/cpu_core.c ****         }
1379:uC-CPU/cpu_core.c **** 
1380:uC-CPU/cpu_core.c ****     } else {
1381:uC-CPU/cpu_core.c ****         if (val > 0x000000FFu) {                                                /* Chk bits [15:08]
1382:uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1383:uC-CPU/cpu_core.c ****             ix             = (CPU_DATA)(val >>  8u);                            /* .. lookup tbl ix
1384:uC-CPU/cpu_core.c ****             nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 16u);         /* .. plus nbr msb 
1385:uC-CPU/cpu_core.c **** 
1386:uC-CPU/cpu_core.c ****         } else {                                                                /* Chk bits [07:00]
1387:uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1388:uC-CPU/cpu_core.c ****             ix             = (CPU_DATA)(val >>  0u);                            /* .. lookup tbl ix
1389:uC-CPU/cpu_core.c ****             nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 24u);         /* .. plus nbr msb 
1390:uC-CPU/cpu_core.c ****         }
1391:uC-CPU/cpu_core.c ****     }
1392:uC-CPU/cpu_core.c **** #endif
1393:uC-CPU/cpu_core.c **** 
1394:uC-CPU/cpu_core.c **** 
1395:uC-CPU/cpu_core.c ****     return (nbr_lead_zeros);
1396:uC-CPU/cpu_core.c **** }
1397:uC-CPU/cpu_core.c **** #endif
1398:uC-CPU/cpu_core.c **** 
1399:uC-CPU/cpu_core.c **** 
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 26


1400:uC-CPU/cpu_core.c **** /*$PAGE*/
1401:uC-CPU/cpu_core.c **** /*
1402:uC-CPU/cpu_core.c **** ***************************************************************************************************
1403:uC-CPU/cpu_core.c **** *                                        CPU_CntLeadZeros64()
1404:uC-CPU/cpu_core.c **** *
1405:uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in a 64-bit dat
1406:uC-CPU/cpu_core.c **** *
1407:uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
1408:uC-CPU/cpu_core.c **** *
1409:uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.
1410:uC-CPU/cpu_core.c **** *
1411:uC-CPU/cpu_core.c **** * Caller(s)   : CPU_CntLeadZeros(),
1412:uC-CPU/cpu_core.c **** *               CPU_CntTrailZeros64(),
1413:uC-CPU/cpu_core.c **** *               Application.
1414:uC-CPU/cpu_core.c **** *
1415:uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1416:uC-CPU/cpu_core.c **** *               called by application function(s).
1417:uC-CPU/cpu_core.c **** *
1418:uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports 64-bit values :
1419:uC-CPU/cpu_core.c **** *
1420:uC-CPU/cpu_core.c **** *                          b63  b62  b61  ...  b04  b03  b02  b01  b00    # Leading Zeros
1421:uC-CPU/cpu_core.c **** *                          ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1422:uC-CPU/cpu_core.c **** *                           1    x    x         x    x    x    x    x            0
1423:uC-CPU/cpu_core.c **** *                           0    1    x         x    x    x    x    x            1
1424:uC-CPU/cpu_core.c **** *                           0    0    1         x    x    x    x    x            2
1425:uC-CPU/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1426:uC-CPU/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1427:uC-CPU/cpu_core.c **** *                           0    0    0         1    x    x    x    x           59
1428:uC-CPU/cpu_core.c **** *                           0    0    0         0    1    x    x    x           60
1429:uC-CPU/cpu_core.c **** *                           0    0    0         0    0    1    x    x           61
1430:uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    1    x           62
1431:uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    0    1           63
1432:uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    0    0           64
1433:uC-CPU/cpu_core.c **** *
1434:uC-CPU/cpu_core.c **** *
1435:uC-CPU/cpu_core.c **** *                   See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1436:uC-CPU/cpu_core.c **** ***************************************************************************************************
1437:uC-CPU/cpu_core.c **** */
1438:uC-CPU/cpu_core.c **** /*$PAGE*/
1439:uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_64)
1440:uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntLeadZeros64 (CPU_INT64U  val)
1441:uC-CPU/cpu_core.c **** {
1442:uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1443:uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64)))
1444:uC-CPU/cpu_core.c ****     CPU_DATA  ix;
1445:uC-CPU/cpu_core.c **** #endif
1446:uC-CPU/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1447:uC-CPU/cpu_core.c **** 
1448:uC-CPU/cpu_core.c ****                                                                                 /* ---------- ASM-O
1449:uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1450:uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64))
1451:uC-CPU/cpu_core.c ****     nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
1452:uC-CPU/cpu_core.c ****     nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_64) * DEF_OCTET_NBR_BITS;
1453:uC-CPU/cpu_core.c **** 
1454:uC-CPU/cpu_core.c **** 
1455:uC-CPU/cpu_core.c **** #else                                                                           /* ----------- C-OP
1456:uC-CPU/cpu_core.c ****     if (val > 0x00000000FFFFFFFFu) {
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 27


1457:uC-CPU/cpu_core.c ****         if (val > 0x0000FFFFFFFFFFFFu) {
1458:uC-CPU/cpu_core.c ****             if (val > 0x00FFFFFFFFFFFFFFu) {                                    /* Chk bits [63:56]
1459:uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1460:uC-CPU/cpu_core.c ****                 ix             = (CPU_DATA)(val >> 56u);                        /* .. lookup tbl ix
1461:uC-CPU/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  0u);     /* .. plus nbr msb 
1462:uC-CPU/cpu_core.c **** 
1463:uC-CPU/cpu_core.c ****             } else {                                                            /* Chk bits [55:48]
1464:uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1465:uC-CPU/cpu_core.c ****                 ix             = (CPU_DATA)(val >> 48u);                        /* .. lookup tbl ix
1466:uC-CPU/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  8u);     /* .. plus nbr msb 
1467:uC-CPU/cpu_core.c ****             }
1468:uC-CPU/cpu_core.c **** 
1469:uC-CPU/cpu_core.c ****         } else {
1470:uC-CPU/cpu_core.c ****             if (val > 0x000000FFFFFFFFFFu) {                                    /* Chk bits [47:40]
1471:uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1472:uC-CPU/cpu_core.c ****                 ix             = (CPU_DATA)(val >> 40u);                        /* .. lookup tbl ix
1473:uC-CPU/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 16u);     /* .. plus nbr msb 
1474:uC-CPU/cpu_core.c **** 
1475:uC-CPU/cpu_core.c ****             } else {                                                            /* Chk bits [39:32]
1476:uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1477:uC-CPU/cpu_core.c ****                 ix             = (CPU_DATA)(val >> 32u);                        /* .. lookup tbl ix
1478:uC-CPU/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 24u);     /* .. plus nbr msb 
1479:uC-CPU/cpu_core.c ****             }
1480:uC-CPU/cpu_core.c ****         }
1481:uC-CPU/cpu_core.c **** 
1482:uC-CPU/cpu_core.c ****     } else {
1483:uC-CPU/cpu_core.c ****         if (val > 0x000000000000FFFFu) {
1484:uC-CPU/cpu_core.c ****             if (val > 0x0000000000FFFFFFu) {                                    /* Chk bits [31:24]
1485:uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1486:uC-CPU/cpu_core.c ****                 ix             = (CPU_DATA)(val >> 24u);                        /* .. lookup tbl ix
1487:uC-CPU/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 32u);     /* .. plus nbr msb 
1488:uC-CPU/cpu_core.c **** 
1489:uC-CPU/cpu_core.c ****             } else {                                                            /* Chk bits [23:16]
1490:uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1491:uC-CPU/cpu_core.c ****                 ix             = (CPU_DATA)(val >> 16u);                        /* .. lookup tbl ix
1492:uC-CPU/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 40u);     /* .. plus nbr msb 
1493:uC-CPU/cpu_core.c ****             }
1494:uC-CPU/cpu_core.c **** 
1495:uC-CPU/cpu_core.c ****         } else {
1496:uC-CPU/cpu_core.c ****             if (val > 0x00000000000000FFu) {                                    /* Chk bits [15:08]
1497:uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1498:uC-CPU/cpu_core.c ****                 ix             = (CPU_DATA)(val >>  8u);                        /* .. lookup tbl ix
1499:uC-CPU/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 48u);     /* .. plus nbr msb 
1500:uC-CPU/cpu_core.c **** 
1501:uC-CPU/cpu_core.c ****             } else {                                                            /* Chk bits [07:00]
1502:uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1503:uC-CPU/cpu_core.c ****                 ix             = (CPU_DATA)(val >>  0u);                        /* .. lookup tbl ix
1504:uC-CPU/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 56u);     /* .. plus nbr msb 
1505:uC-CPU/cpu_core.c ****             }
1506:uC-CPU/cpu_core.c ****         }
1507:uC-CPU/cpu_core.c ****     }
1508:uC-CPU/cpu_core.c **** #endif
1509:uC-CPU/cpu_core.c **** 
1510:uC-CPU/cpu_core.c **** 
1511:uC-CPU/cpu_core.c ****     return (nbr_lead_zeros);
1512:uC-CPU/cpu_core.c **** }
1513:uC-CPU/cpu_core.c **** #endif
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 28


1514:uC-CPU/cpu_core.c **** 
1515:uC-CPU/cpu_core.c **** 
1516:uC-CPU/cpu_core.c **** /*$PAGE*/
1517:uC-CPU/cpu_core.c **** /*
1518:uC-CPU/cpu_core.c **** ***************************************************************************************************
1519:uC-CPU/cpu_core.c **** *                                         CPU_CntTrailZeros()
1520:uC-CPU/cpu_core.c **** *
1521:uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in a data val
1522:uC-CPU/cpu_core.c **** *
1523:uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1524:uC-CPU/cpu_core.c **** *
1525:uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1526:uC-CPU/cpu_core.c **** *
1527:uC-CPU/cpu_core.c **** * Caller(s)   : Application.
1528:uC-CPU/cpu_core.c **** *
1529:uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1530:uC-CPU/cpu_core.c **** *               be called by application function(s).
1531:uC-CPU/cpu_core.c **** *
1532:uC-CPU/cpu_core.c **** * Note(s)     : (1) (a) Supports the following data value sizes :
1533:uC-CPU/cpu_core.c **** *
1534:uC-CPU/cpu_core.c **** *                       (1)  8-bits
1535:uC-CPU/cpu_core.c **** *                       (2) 16-bits
1536:uC-CPU/cpu_core.c **** *                       (3) 32-bits
1537:uC-CPU/cpu_core.c **** *                       (4) 64-bits
1538:uC-CPU/cpu_core.c **** *
1539:uC-CPU/cpu_core.c **** *                       See also 'cpu_def.h  CPU WORD CONFIGURATION  Note #1'.
1540:uC-CPU/cpu_core.c **** *
1541:uC-CPU/cpu_core.c **** *                   (b) (1) For  8-bit values :
1542:uC-CPU/cpu_core.c **** *
1543:uC-CPU/cpu_core.c **** *                                  b07  b06  b05  b04  b03  b02  b01  b00    # Trailing Zeros
1544:uC-CPU/cpu_core.c **** *                                  ---  ---  ---  ---  ---  ---  ---  ---    ----------------
1545:uC-CPU/cpu_core.c **** *                                   x    x    x    x    x    x    x    1            0
1546:uC-CPU/cpu_core.c **** *                                   x    x    x    x    x    x    1    0            1
1547:uC-CPU/cpu_core.c **** *                                   x    x    x    x    x    1    0    0            2
1548:uC-CPU/cpu_core.c **** *                                   x    x    x    x    1    0    0    0            3
1549:uC-CPU/cpu_core.c **** *                                   x    x    x    1    0    0    0    0            4
1550:uC-CPU/cpu_core.c **** *                                   x    x    1    0    0    0    0    0            5
1551:uC-CPU/cpu_core.c **** *                                   x    1    0    0    0    0    0    0            6
1552:uC-CPU/cpu_core.c **** *                                   1    0    0    0    0    0    0    0            7
1553:uC-CPU/cpu_core.c **** *                                   0    0    0    0    0    0    0    0            8
1554:uC-CPU/cpu_core.c **** *
1555:uC-CPU/cpu_core.c **** *
1556:uC-CPU/cpu_core.c **** *                       (2) For 16-bit values :
1557:uC-CPU/cpu_core.c **** *
1558:uC-CPU/cpu_core.c **** *                             b15  b14  b13  b12  b11  ...  b02  b01  b00    # Trailing Zeros
1559:uC-CPU/cpu_core.c **** *                             ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1560:uC-CPU/cpu_core.c **** *                              x    x    x    x    x         x    x    1            0
1561:uC-CPU/cpu_core.c **** *                              x    x    x    x    x         x    1    0            1
1562:uC-CPU/cpu_core.c **** *                              x    x    x    x    x         1    0    0            2
1563:uC-CPU/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1564:uC-CPU/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1565:uC-CPU/cpu_core.c **** *                              x    x    x    x    1         0    0    0           11
1566:uC-CPU/cpu_core.c **** *                              x    x    x    1    0         0    0    0           12
1567:uC-CPU/cpu_core.c **** *                              x    x    1    0    0         0    0    0           13
1568:uC-CPU/cpu_core.c **** *                              x    1    0    0    0         0    0    0           14
1569:uC-CPU/cpu_core.c **** *                              1    0    0    0    0         0    0    0           15
1570:uC-CPU/cpu_core.c **** *                              0    0    0    0    0         0    0    0           16
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 29


1571:uC-CPU/cpu_core.c **** *
1572:uC-CPU/cpu_core.c **** *
1573:uC-CPU/cpu_core.c **** *                       (3) For 32-bit values :
1574:uC-CPU/cpu_core.c **** *
1575:uC-CPU/cpu_core.c **** *                             b31  b30  b29  b28  b27  ...  b02  b01  b00    # Trailing Zeros
1576:uC-CPU/cpu_core.c **** *                             ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1577:uC-CPU/cpu_core.c **** *                              x    x    x    x    x         x    x    1            0
1578:uC-CPU/cpu_core.c **** *                              x    x    x    x    x         x    1    0            1
1579:uC-CPU/cpu_core.c **** *                              x    x    x    x    x         1    0    0            2
1580:uC-CPU/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1581:uC-CPU/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1582:uC-CPU/cpu_core.c **** *                              x    x    x    x    1         0    0    0           27
1583:uC-CPU/cpu_core.c **** *                              x    x    x    1    0         0    0    0           28
1584:uC-CPU/cpu_core.c **** *                              x    x    1    0    0         0    0    0           29
1585:uC-CPU/cpu_core.c **** *                              x    1    0    0    0         0    0    0           30
1586:uC-CPU/cpu_core.c **** *                              1    0    0    0    0         0    0    0           31
1587:uC-CPU/cpu_core.c **** *                              0    0    0    0    0         0    0    0           32
1588:uC-CPU/cpu_core.c **** *
1589:uC-CPU/cpu_core.c **** *
1590:uC-CPU/cpu_core.c **** *                       (4) For 64-bit values :
1591:uC-CPU/cpu_core.c **** *
1592:uC-CPU/cpu_core.c **** *                             b63  b62  b61  b60  b59  ...  b02  b01  b00    # Trailing Zeros
1593:uC-CPU/cpu_core.c **** *                             ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1594:uC-CPU/cpu_core.c **** *                              x    x    x    x    x         x    x    1            0
1595:uC-CPU/cpu_core.c **** *                              x    x    x    x    x         x    1    0            1
1596:uC-CPU/cpu_core.c **** *                              x    x    x    x    x         1    0    0            2
1597:uC-CPU/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1598:uC-CPU/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1599:uC-CPU/cpu_core.c **** *                              x    x    x    x    1         0    0    0           59
1600:uC-CPU/cpu_core.c **** *                              x    x    x    1    0         0    0    0           60
1601:uC-CPU/cpu_core.c **** *                              x    x    1    0    0         0    0    0           61
1602:uC-CPU/cpu_core.c **** *                              x    1    0    0    0         0    0    0           62
1603:uC-CPU/cpu_core.c **** *                              1    0    0    0    0         0    0    0           63
1604:uC-CPU/cpu_core.c **** *                              0    0    0    0    0         0    0    0           64
1605:uC-CPU/cpu_core.c **** *
1606:uC-CPU/cpu_core.c **** *$PAGE*
1607:uC-CPU/cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1608:uC-CPU/cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1609:uC-CPU/cpu_core.c **** *
1610:uC-CPU/cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
1611:uC-CPU/cpu_core.c **** *
1612:uC-CPU/cpu_core.c **** *                   (a) CPU_CntTrailZeros()'s final conditional statement calculates 'val's number 
1613:uC-CPU/cpu_core.c **** *                       trailing zeros based on its return data size, 'CPU_CFG_DATA_SIZE', & 'val's
1614:uC-CPU/cpu_core.c **** *                       calculated number of lead zeros ONLY if the initial 'val' is non-'0' :
1615:uC-CPU/cpu_core.c **** *
1616:uC-CPU/cpu_core.c **** *                           if (val != 0u) {
1617:uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = ((CPU_CFG_DATA_SIZE * DEF_OCTET_NBR_BITS) - 1u) -
1618:uC-CPU/cpu_core.c **** *                           } else {
1619:uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
1620:uC-CPU/cpu_core.c **** *                           }
1621:uC-CPU/cpu_core.c **** *
1622:uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
1623:uC-CPU/cpu_core.c **** *                       execute the final 'if' statement.
1624:uC-CPU/cpu_core.c **** ***************************************************************************************************
1625:uC-CPU/cpu_core.c **** */
1626:uC-CPU/cpu_core.c **** 
1627:uC-CPU/cpu_core.c **** #ifndef   CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 30


1628:uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntTrailZeros (CPU_DATA  val)
1629:uC-CPU/cpu_core.c **** {
1630:uC-CPU/cpu_core.c ****     CPU_DATA  val_bit_mask;
1631:uC-CPU/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1632:uC-CPU/cpu_core.c ****     CPU_DATA  nbr_trail_zeros;
1633:uC-CPU/cpu_core.c **** 
1634:uC-CPU/cpu_core.c **** 
1635:uC-CPU/cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
1636:uC-CPU/cpu_core.c ****         return (CPU_CFG_DATA_SIZE * DEF_OCTET_NBR_BITS);
1637:uC-CPU/cpu_core.c ****     }
1638:uC-CPU/cpu_core.c **** 
1639:uC-CPU/cpu_core.c **** 
1640:uC-CPU/cpu_core.c ****     val_bit_mask    = val & ((CPU_DATA)~val + 1u);              /* Zero/clr all bits EXCEPT least-s
1641:uC-CPU/cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros(val_bit_mask);           /* Cnt  nbr lead  0s.              
1642:uC-CPU/cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
1643:uC-CPU/cpu_core.c ****     nbr_trail_zeros = ((CPU_CFG_DATA_SIZE * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
1644:uC-CPU/cpu_core.c **** 
1645:uC-CPU/cpu_core.c **** 
1646:uC-CPU/cpu_core.c ****     return (nbr_trail_zeros);
1647:uC-CPU/cpu_core.c **** }
1648:uC-CPU/cpu_core.c **** #endif
1649:uC-CPU/cpu_core.c **** 
1650:uC-CPU/cpu_core.c **** 
1651:uC-CPU/cpu_core.c **** /*$PAGE*/
1652:uC-CPU/cpu_core.c **** /*
1653:uC-CPU/cpu_core.c **** ***************************************************************************************************
1654:uC-CPU/cpu_core.c **** *                                        CPU_CntTrailZeros08()
1655:uC-CPU/cpu_core.c **** *
1656:uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in an 8-bit d
1657:uC-CPU/cpu_core.c **** *
1658:uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1659:uC-CPU/cpu_core.c **** *
1660:uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1661:uC-CPU/cpu_core.c **** *
1662:uC-CPU/cpu_core.c **** * Caller(s)   : Application.
1663:uC-CPU/cpu_core.c **** *
1664:uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1665:uC-CPU/cpu_core.c **** *               called by application function(s).
1666:uC-CPU/cpu_core.c **** *
1667:uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports  8-bit values :
1668:uC-CPU/cpu_core.c **** *
1669:uC-CPU/cpu_core.c **** *                               b07  b06  b05  b04  b03  b02  b01  b00    # Trailing Zeros
1670:uC-CPU/cpu_core.c **** *                               ---  ---  ---  ---  ---  ---  ---  ---    ----------------
1671:uC-CPU/cpu_core.c **** *                                x    x    x    x    x    x    x    1            0
1672:uC-CPU/cpu_core.c **** *                                x    x    x    x    x    x    1    0            1
1673:uC-CPU/cpu_core.c **** *                                x    x    x    x    x    1    0    0            2
1674:uC-CPU/cpu_core.c **** *                                x    x    x    x    1    0    0    0            3
1675:uC-CPU/cpu_core.c **** *                                x    x    x    1    0    0    0    0            4
1676:uC-CPU/cpu_core.c **** *                                x    x    1    0    0    0    0    0            5
1677:uC-CPU/cpu_core.c **** *                                x    1    0    0    0    0    0    0            6
1678:uC-CPU/cpu_core.c **** *                                1    0    0    0    0    0    0    0            7
1679:uC-CPU/cpu_core.c **** *                                0    0    0    0    0    0    0    0            8
1680:uC-CPU/cpu_core.c **** *
1681:uC-CPU/cpu_core.c **** *
1682:uC-CPU/cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1683:uC-CPU/cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1684:uC-CPU/cpu_core.c **** *
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 31


1685:uC-CPU/cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
1686:uC-CPU/cpu_core.c **** *
1687:uC-CPU/cpu_core.c **** *                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's 
1688:uC-CPU/cpu_core.c **** *                       number of trailing zeros via CPU's native data size, 'CPU_CFG_DATA_SIZE'.  
1689:uC-CPU/cpu_core.c **** *                       If the returned number of zeros exceeds CPU_CntTrailZeros08()'s  8-bit retu
1690:uC-CPU/cpu_core.c **** *                       data size, then the returned number of zeros must be offset by the differen
1691:uC-CPU/cpu_core.c **** *                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros08()'s return data size :
1692:uC-CPU/cpu_core.c **** *
1693:uC-CPU/cpu_core.c **** *                           nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
1694:uC-CPU/cpu_core.c **** *                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_08  * DEF_OCTET_NBR_BITS)) {
1695:uC-CPU/cpu_core.c **** *                               nbr_trail_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_08) * DEF_OCT
1696:uC-CPU/cpu_core.c **** *                           }
1697:uC-CPU/cpu_core.c **** *
1698:uC-CPU/cpu_core.c **** *                       However, this ONLY occurs for an initial 'val' of '0' since all non-'0'  8-
1699:uC-CPU/cpu_core.c **** *                       values would return a number of trailing zeros less than or equal to  8 bit
1700:uC-CPU/cpu_core.c **** *
1701:uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values prior to calling assembl
1702:uC-CPU/cpu_core.c **** *                       optimized CPU_CntTrailZeros() avoids having to offset the number of returne
1703:uC-CPU/cpu_core.c **** *                       trailing zeros by the difference in CPU data size and  8-bit data value bit
1704:uC-CPU/cpu_core.c **** *
1705:uC-CPU/cpu_core.c **** *                   (b) For CPU_CntTrailZeros08()'s C implementation, the final conditional stateme
1706:uC-CPU/cpu_core.c **** *                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros08()'s
1707:uC-CPU/cpu_core.c **** *                        8-bit return data size & 'val's calculated number of lead zeros ONLY if th
1708:uC-CPU/cpu_core.c **** *                       initial 'val' is non-'0' :
1709:uC-CPU/cpu_core.c **** *
1710:uC-CPU/cpu_core.c **** *                           if (val != 0u) {
1711:uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = ((CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS) - 1u) - 
1712:uC-CPU/cpu_core.c **** *                           } else {
1713:uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
1714:uC-CPU/cpu_core.c **** *                           }
1715:uC-CPU/cpu_core.c **** *
1716:uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
1717:uC-CPU/cpu_core.c **** *                       execute the final 'if' statement.
1718:uC-CPU/cpu_core.c **** ***************************************************************************************************
1719:uC-CPU/cpu_core.c **** */
1720:uC-CPU/cpu_core.c **** /*$PAGE*/
1721:uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_08)
1722:uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntTrailZeros08 (CPU_INT08U  val)
1723:uC-CPU/cpu_core.c **** {
1724:uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1725:uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08)))
1726:uC-CPU/cpu_core.c ****     CPU_INT08U  val_bit_mask;
1727:uC-CPU/cpu_core.c ****     CPU_DATA    nbr_lead_zeros;
1728:uC-CPU/cpu_core.c **** #endif
1729:uC-CPU/cpu_core.c ****     CPU_DATA    nbr_trail_zeros;
1730:uC-CPU/cpu_core.c **** 
1731:uC-CPU/cpu_core.c **** 
1732:uC-CPU/cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
1733:uC-CPU/cpu_core.c ****         return (CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS);
1734:uC-CPU/cpu_core.c ****     }
1735:uC-CPU/cpu_core.c **** 
1736:uC-CPU/cpu_core.c ****                                                                 /* ------------------ ASM-OPTIMIZED
1737:uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1738:uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08))
1739:uC-CPU/cpu_core.c ****     nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
1740:uC-CPU/cpu_core.c **** 
1741:uC-CPU/cpu_core.c **** #else                                                           /* ------------------- C-OPTIMIZED 
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 32


1742:uC-CPU/cpu_core.c ****     val_bit_mask    = val & ((CPU_INT08U)~val + 1u);            /* Zero/clr all bits EXCEPT least-s
1743:uC-CPU/cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros08(val_bit_mask);         /* Cnt  nbr lead  0s.              
1744:uC-CPU/cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
1745:uC-CPU/cpu_core.c ****     nbr_trail_zeros = ((CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
1746:uC-CPU/cpu_core.c **** #endif
1747:uC-CPU/cpu_core.c **** 
1748:uC-CPU/cpu_core.c **** 
1749:uC-CPU/cpu_core.c ****     return (nbr_trail_zeros);
1750:uC-CPU/cpu_core.c **** }
1751:uC-CPU/cpu_core.c **** #endif
1752:uC-CPU/cpu_core.c **** 
1753:uC-CPU/cpu_core.c **** 
1754:uC-CPU/cpu_core.c **** /*$PAGE*/
1755:uC-CPU/cpu_core.c **** /*
1756:uC-CPU/cpu_core.c **** ***************************************************************************************************
1757:uC-CPU/cpu_core.c **** *                                        CPU_CntTrailZeros16()
1758:uC-CPU/cpu_core.c **** *
1759:uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in a 16-bit d
1760:uC-CPU/cpu_core.c **** *
1761:uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1762:uC-CPU/cpu_core.c **** *
1763:uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1764:uC-CPU/cpu_core.c **** *
1765:uC-CPU/cpu_core.c **** * Caller(s)   : Application.
1766:uC-CPU/cpu_core.c **** *
1767:uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1768:uC-CPU/cpu_core.c **** *               called by application function(s).
1769:uC-CPU/cpu_core.c **** *
1770:uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports 16-bit values :
1771:uC-CPU/cpu_core.c **** *
1772:uC-CPU/cpu_core.c **** *                          b15  b14  b13  b12  b11  ...  b02  b01  b00    # Trailing Zeros
1773:uC-CPU/cpu_core.c **** *                          ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1774:uC-CPU/cpu_core.c **** *                           x    x    x    x    x         x    x    1            0
1775:uC-CPU/cpu_core.c **** *                           x    x    x    x    x         x    1    0            1
1776:uC-CPU/cpu_core.c **** *                           x    x    x    x    x         1    0    0            2
1777:uC-CPU/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1778:uC-CPU/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1779:uC-CPU/cpu_core.c **** *                           x    x    x    x    1         0    0    0           11
1780:uC-CPU/cpu_core.c **** *                           x    x    x    1    0         0    0    0           12
1781:uC-CPU/cpu_core.c **** *                           x    x    1    0    0         0    0    0           13
1782:uC-CPU/cpu_core.c **** *                           x    1    0    0    0         0    0    0           14
1783:uC-CPU/cpu_core.c **** *                           1    0    0    0    0         0    0    0           15
1784:uC-CPU/cpu_core.c **** *                           0    0    0    0    0         0    0    0           16
1785:uC-CPU/cpu_core.c **** *
1786:uC-CPU/cpu_core.c **** *
1787:uC-CPU/cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1788:uC-CPU/cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1789:uC-CPU/cpu_core.c **** *
1790:uC-CPU/cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
1791:uC-CPU/cpu_core.c **** *
1792:uC-CPU/cpu_core.c **** *                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's 
1793:uC-CPU/cpu_core.c **** *                       number of trailing zeros via CPU's native data size, 'CPU_CFG_DATA_SIZE'.  
1794:uC-CPU/cpu_core.c **** *                       If the returned number of zeros exceeds CPU_CntTrailZeros16()'s 16-bit retu
1795:uC-CPU/cpu_core.c **** *                       data size, then the returned number of zeros must be offset by the differen
1796:uC-CPU/cpu_core.c **** *                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros16()'s return data size :
1797:uC-CPU/cpu_core.c **** *
1798:uC-CPU/cpu_core.c **** *                           nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 33


1799:uC-CPU/cpu_core.c **** *                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_16  * DEF_OCTET_NBR_BITS)) {
1800:uC-CPU/cpu_core.c **** *                               nbr_trail_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_16) * DEF_OCT
1801:uC-CPU/cpu_core.c **** *                           }
1802:uC-CPU/cpu_core.c **** *
1803:uC-CPU/cpu_core.c **** *                       However, this ONLY occurs for an initial 'val' of '0' since all non-'0' 16-
1804:uC-CPU/cpu_core.c **** *                       values would return a number of trailing zeros less than or equal to 16 bit
1805:uC-CPU/cpu_core.c **** *
1806:uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values prior to calling assembl
1807:uC-CPU/cpu_core.c **** *                       optimized CPU_CntTrailZeros() avoids having to offset the number of returne
1808:uC-CPU/cpu_core.c **** *                       trailing zeros by the difference in CPU data size and 16-bit data value bit
1809:uC-CPU/cpu_core.c **** *
1810:uC-CPU/cpu_core.c **** *                   (b) For CPU_CntTrailZeros16()'s C implementation, the final conditional stateme
1811:uC-CPU/cpu_core.c **** *                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros16()'s
1812:uC-CPU/cpu_core.c **** *                       16-bit return data size & 'val's calculated number of lead zeros ONLY if th
1813:uC-CPU/cpu_core.c **** *                       initial 'val' is non-'0' :
1814:uC-CPU/cpu_core.c **** *
1815:uC-CPU/cpu_core.c **** *                           if (val != 0u) {
1816:uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = ((CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS) - 1u) - 
1817:uC-CPU/cpu_core.c **** *                           } else {
1818:uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
1819:uC-CPU/cpu_core.c **** *                           }
1820:uC-CPU/cpu_core.c **** *
1821:uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
1822:uC-CPU/cpu_core.c **** *                       execute the final 'if' statement.
1823:uC-CPU/cpu_core.c **** ***************************************************************************************************
1824:uC-CPU/cpu_core.c **** */
1825:uC-CPU/cpu_core.c **** /*$PAGE*/
1826:uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_16)
1827:uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntTrailZeros16 (CPU_INT16U  val)
1828:uC-CPU/cpu_core.c **** {
1829:uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1830:uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16)))
1831:uC-CPU/cpu_core.c ****     CPU_INT16U  val_bit_mask;
1832:uC-CPU/cpu_core.c ****     CPU_DATA    nbr_lead_zeros;
1833:uC-CPU/cpu_core.c **** #endif
1834:uC-CPU/cpu_core.c ****     CPU_DATA    nbr_trail_zeros;
1835:uC-CPU/cpu_core.c **** 
1836:uC-CPU/cpu_core.c **** 
1837:uC-CPU/cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
1838:uC-CPU/cpu_core.c ****         return (CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS);
1839:uC-CPU/cpu_core.c ****     }
1840:uC-CPU/cpu_core.c **** 
1841:uC-CPU/cpu_core.c ****                                                                 /* ------------------ ASM-OPTIMIZED
1842:uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1843:uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16))
1844:uC-CPU/cpu_core.c ****     nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
1845:uC-CPU/cpu_core.c **** 
1846:uC-CPU/cpu_core.c **** #else                                                           /* ------------------- C-OPTIMIZED 
1847:uC-CPU/cpu_core.c ****     val_bit_mask    = val & ((CPU_INT16U)~val + 1u);            /* Zero/clr all bits EXCEPT least-s
1848:uC-CPU/cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros16(val_bit_mask);         /* Cnt  nbr lead  0s.              
1849:uC-CPU/cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
1850:uC-CPU/cpu_core.c ****     nbr_trail_zeros = ((CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
1851:uC-CPU/cpu_core.c **** #endif
1852:uC-CPU/cpu_core.c **** 
1853:uC-CPU/cpu_core.c **** 
1854:uC-CPU/cpu_core.c ****     return (nbr_trail_zeros);
1855:uC-CPU/cpu_core.c **** }
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 34


1856:uC-CPU/cpu_core.c **** #endif
1857:uC-CPU/cpu_core.c **** 
1858:uC-CPU/cpu_core.c **** 
1859:uC-CPU/cpu_core.c **** /*$PAGE*/
1860:uC-CPU/cpu_core.c **** /*
1861:uC-CPU/cpu_core.c **** ***************************************************************************************************
1862:uC-CPU/cpu_core.c **** *                                        CPU_CntTrailZeros32()
1863:uC-CPU/cpu_core.c **** *
1864:uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in a 32-bit d
1865:uC-CPU/cpu_core.c **** *
1866:uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1867:uC-CPU/cpu_core.c **** *
1868:uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1869:uC-CPU/cpu_core.c **** *
1870:uC-CPU/cpu_core.c **** * Caller(s)   : Application.
1871:uC-CPU/cpu_core.c **** *
1872:uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1873:uC-CPU/cpu_core.c **** *               called by application function(s).
1874:uC-CPU/cpu_core.c **** *
1875:uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports 32-bit values :
1876:uC-CPU/cpu_core.c **** *
1877:uC-CPU/cpu_core.c **** *                          b31  b30  b29  b28  b27  ...  b02  b01  b00    # Trailing Zeros
1878:uC-CPU/cpu_core.c **** *                          ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1879:uC-CPU/cpu_core.c **** *                           x    x    x    x    x         x    x    1            0
1880:uC-CPU/cpu_core.c **** *                           x    x    x    x    x         x    1    0            1
1881:uC-CPU/cpu_core.c **** *                           x    x    x    x    x         1    0    0            2
1882:uC-CPU/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1883:uC-CPU/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1884:uC-CPU/cpu_core.c **** *                           x    x    x    x    1         0    0    0           27
1885:uC-CPU/cpu_core.c **** *                           x    x    x    1    0         0    0    0           28
1886:uC-CPU/cpu_core.c **** *                           x    x    1    0    0         0    0    0           29
1887:uC-CPU/cpu_core.c **** *                           x    1    0    0    0         0    0    0           30
1888:uC-CPU/cpu_core.c **** *                           1    0    0    0    0         0    0    0           31
1889:uC-CPU/cpu_core.c **** *                           0    0    0    0    0         0    0    0           32
1890:uC-CPU/cpu_core.c **** *
1891:uC-CPU/cpu_core.c **** *
1892:uC-CPU/cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1893:uC-CPU/cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1894:uC-CPU/cpu_core.c **** *
1895:uC-CPU/cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
1896:uC-CPU/cpu_core.c **** *
1897:uC-CPU/cpu_core.c **** *                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's 
1898:uC-CPU/cpu_core.c **** *                       number of trailing zeros via CPU's native data size, 'CPU_CFG_DATA_SIZE'.  
1899:uC-CPU/cpu_core.c **** *                       If the returned number of zeros exceeds CPU_CntTrailZeros32()'s 32-bit retu
1900:uC-CPU/cpu_core.c **** *                       data size, then the returned number of zeros must be offset by the differen
1901:uC-CPU/cpu_core.c **** *                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros32()'s return data size :
1902:uC-CPU/cpu_core.c **** *
1903:uC-CPU/cpu_core.c **** *                           nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
1904:uC-CPU/cpu_core.c **** *                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_32  * DEF_OCTET_NBR_BITS)) {
1905:uC-CPU/cpu_core.c **** *                               nbr_trail_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_32) * DEF_OCT
1906:uC-CPU/cpu_core.c **** *                           }
1907:uC-CPU/cpu_core.c **** *
1908:uC-CPU/cpu_core.c **** *                       However, this ONLY occurs for an initial 'val' of '0' since all non-'0' 32-
1909:uC-CPU/cpu_core.c **** *                       values would return a number of trailing zeros less than or equal to 32 bit
1910:uC-CPU/cpu_core.c **** *
1911:uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values prior to calling assembl
1912:uC-CPU/cpu_core.c **** *                       optimized CPU_CntTrailZeros() avoids having to offset the number of returne
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 35


1913:uC-CPU/cpu_core.c **** *                       trailing zeros by the difference in CPU data size and 32-bit data value bit
1914:uC-CPU/cpu_core.c **** *
1915:uC-CPU/cpu_core.c **** *                   (b) For CPU_CntTrailZeros32()'s C implementation, the final conditional stateme
1916:uC-CPU/cpu_core.c **** *                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros32()'s
1917:uC-CPU/cpu_core.c **** *                       32-bit return data size & 'val's calculated number of lead zeros ONLY if th
1918:uC-CPU/cpu_core.c **** *                       initial 'val' is non-'0' :
1919:uC-CPU/cpu_core.c **** *
1920:uC-CPU/cpu_core.c **** *                           if (val != 0u) {
1921:uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = ((CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS) - 1u) - 
1922:uC-CPU/cpu_core.c **** *                           } else {
1923:uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
1924:uC-CPU/cpu_core.c **** *                           }
1925:uC-CPU/cpu_core.c **** *
1926:uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
1927:uC-CPU/cpu_core.c **** *                       execute the final 'if' statement.
1928:uC-CPU/cpu_core.c **** ***************************************************************************************************
1929:uC-CPU/cpu_core.c **** */
1930:uC-CPU/cpu_core.c **** /*$PAGE*/
1931:uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_32)
1932:uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntTrailZeros32 (CPU_INT32U  val)
1933:uC-CPU/cpu_core.c **** {
1934:uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1935:uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32)))
1936:uC-CPU/cpu_core.c ****     CPU_INT32U  val_bit_mask;
1937:uC-CPU/cpu_core.c ****     CPU_DATA    nbr_lead_zeros;
1938:uC-CPU/cpu_core.c **** #endif
1939:uC-CPU/cpu_core.c ****     CPU_DATA    nbr_trail_zeros;
1940:uC-CPU/cpu_core.c **** 
1941:uC-CPU/cpu_core.c **** 
1942:uC-CPU/cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
1943:uC-CPU/cpu_core.c ****         return (CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS);
1944:uC-CPU/cpu_core.c ****     }
1945:uC-CPU/cpu_core.c **** 
1946:uC-CPU/cpu_core.c ****                                                                 /* ------------------ ASM-OPTIMIZED
1947:uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1948:uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32))
1949:uC-CPU/cpu_core.c ****     nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
1950:uC-CPU/cpu_core.c **** 
1951:uC-CPU/cpu_core.c **** #else                                                           /* ------------------- C-OPTIMIZED 
1952:uC-CPU/cpu_core.c ****     val_bit_mask    = val & ((CPU_INT32U)~val + 1u);            /* Zero/clr all bits EXCEPT least-s
1953:uC-CPU/cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros32(val_bit_mask);         /* Cnt  nbr lead  0s.              
1954:uC-CPU/cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
1955:uC-CPU/cpu_core.c ****     nbr_trail_zeros = ((CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
1956:uC-CPU/cpu_core.c **** #endif
1957:uC-CPU/cpu_core.c **** 
1958:uC-CPU/cpu_core.c **** 
1959:uC-CPU/cpu_core.c ****     return (nbr_trail_zeros);
1960:uC-CPU/cpu_core.c **** }
1961:uC-CPU/cpu_core.c **** #endif
1962:uC-CPU/cpu_core.c **** 
1963:uC-CPU/cpu_core.c **** 
1964:uC-CPU/cpu_core.c **** /*$PAGE*/
1965:uC-CPU/cpu_core.c **** /*
1966:uC-CPU/cpu_core.c **** ***************************************************************************************************
1967:uC-CPU/cpu_core.c **** *                                        CPU_CntTrailZeros64()
1968:uC-CPU/cpu_core.c **** *
1969:uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in a 64-bit d
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 36


1970:uC-CPU/cpu_core.c **** *
1971:uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1972:uC-CPU/cpu_core.c **** *
1973:uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1974:uC-CPU/cpu_core.c **** *
1975:uC-CPU/cpu_core.c **** * Caller(s)   : Application.
1976:uC-CPU/cpu_core.c **** *
1977:uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1978:uC-CPU/cpu_core.c **** *               called by application function(s).
1979:uC-CPU/cpu_core.c **** *
1980:uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports 64-bit values :
1981:uC-CPU/cpu_core.c **** *
1982:uC-CPU/cpu_core.c **** *                          b63  b62  b61  b60  b59  ...  b02  b01  b00    # Trailing Zeros
1983:uC-CPU/cpu_core.c **** *                          ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1984:uC-CPU/cpu_core.c **** *                           x    x    x    x    x         x    x    1            0
1985:uC-CPU/cpu_core.c **** *                           x    x    x    x    x         x    1    0            1
1986:uC-CPU/cpu_core.c **** *                           x    x    x    x    x         1    0    0            2
1987:uC-CPU/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1988:uC-CPU/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1989:uC-CPU/cpu_core.c **** *                           x    x    x    x    1         0    0    0           59
1990:uC-CPU/cpu_core.c **** *                           x    x    x    1    0         0    0    0           60
1991:uC-CPU/cpu_core.c **** *                           x    x    1    0    0         0    0    0           61
1992:uC-CPU/cpu_core.c **** *                           x    1    0    0    0         0    0    0           62
1993:uC-CPU/cpu_core.c **** *                           1    0    0    0    0         0    0    0           63
1994:uC-CPU/cpu_core.c **** *                           0    0    0    0    0         0    0    0           64
1995:uC-CPU/cpu_core.c **** *
1996:uC-CPU/cpu_core.c **** *
1997:uC-CPU/cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1998:uC-CPU/cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1999:uC-CPU/cpu_core.c **** *
2000:uC-CPU/cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
2001:uC-CPU/cpu_core.c **** *
2002:uC-CPU/cpu_core.c **** *                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's 
2003:uC-CPU/cpu_core.c **** *                       number of trailing zeros via CPU's native data size, 'CPU_CFG_DATA_SIZE'.  
2004:uC-CPU/cpu_core.c **** *                       If the returned number of zeros exceeds CPU_CntTrailZeros64()'s 64-bit retu
2005:uC-CPU/cpu_core.c **** *                       data size, then the returned number of zeros must be offset by the differen
2006:uC-CPU/cpu_core.c **** *                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros64()'s return data size :
2007:uC-CPU/cpu_core.c **** *
2008:uC-CPU/cpu_core.c **** *                           nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
2009:uC-CPU/cpu_core.c **** *                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_64  * DEF_OCTET_NBR_BITS)) {
2010:uC-CPU/cpu_core.c **** *                               nbr_trail_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_64) * DEF_OCT
2011:uC-CPU/cpu_core.c **** *                           }
2012:uC-CPU/cpu_core.c **** *
2013:uC-CPU/cpu_core.c **** *                       However, this ONLY occurs for an initial 'val' of '0' since all non-'0' 64-
2014:uC-CPU/cpu_core.c **** *                       values would return a number of trailing zeros less than or equal to 64 bit
2015:uC-CPU/cpu_core.c **** *
2016:uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values prior to calling assembl
2017:uC-CPU/cpu_core.c **** *                       optimized CPU_CntTrailZeros() avoids having to offset the number of returne
2018:uC-CPU/cpu_core.c **** *                       trailing zeros by the difference in CPU data size and 64-bit data value bit
2019:uC-CPU/cpu_core.c **** *
2020:uC-CPU/cpu_core.c **** *                   (b) For CPU_CntTrailZeros64()'s C implementation, the final conditional stateme
2021:uC-CPU/cpu_core.c **** *                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros64()'s
2022:uC-CPU/cpu_core.c **** *                       64-bit return data size & 'val's calculated number of lead zeros ONLY if th
2023:uC-CPU/cpu_core.c **** *                       initial 'val' is non-'0' :
2024:uC-CPU/cpu_core.c **** *
2025:uC-CPU/cpu_core.c **** *                           if (val != 0u) {
2026:uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = ((CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS) - 1u) - 
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 37


2027:uC-CPU/cpu_core.c **** *                           } else {
2028:uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
2029:uC-CPU/cpu_core.c **** *                           }
2030:uC-CPU/cpu_core.c **** *
2031:uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
2032:uC-CPU/cpu_core.c **** *                       execute the final 'if' statement.
2033:uC-CPU/cpu_core.c **** ***************************************************************************************************
2034:uC-CPU/cpu_core.c **** */
2035:uC-CPU/cpu_core.c **** /*$PAGE*/
2036:uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_64)
2037:uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntTrailZeros64 (CPU_INT64U  val)
2038:uC-CPU/cpu_core.c **** {
2039:uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
2040:uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64)))
2041:uC-CPU/cpu_core.c ****     CPU_INT64U  val_bit_mask;
2042:uC-CPU/cpu_core.c ****     CPU_DATA    nbr_lead_zeros;
2043:uC-CPU/cpu_core.c **** #endif
2044:uC-CPU/cpu_core.c ****     CPU_DATA    nbr_trail_zeros;
2045:uC-CPU/cpu_core.c **** 
2046:uC-CPU/cpu_core.c **** 
2047:uC-CPU/cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
2048:uC-CPU/cpu_core.c ****         return (CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS);
2049:uC-CPU/cpu_core.c ****     }
2050:uC-CPU/cpu_core.c **** 
2051:uC-CPU/cpu_core.c ****                                                                 /* ------------------ ASM-OPTIMIZED
2052:uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
2053:uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64))
2054:uC-CPU/cpu_core.c ****     nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
2055:uC-CPU/cpu_core.c **** 
2056:uC-CPU/cpu_core.c **** #else                                                           /* ------------------- C-OPTIMIZED 
2057:uC-CPU/cpu_core.c ****     val_bit_mask    = val & ((CPU_INT64U)~val + 1u);            /* Zero/clr all bits EXCEPT least-s
2058:uC-CPU/cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros64(val_bit_mask);         /* Cnt  nbr lead  0s.              
2059:uC-CPU/cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
2060:uC-CPU/cpu_core.c ****     nbr_trail_zeros = ((CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
2061:uC-CPU/cpu_core.c **** #endif
2062:uC-CPU/cpu_core.c **** 
2063:uC-CPU/cpu_core.c **** 
2064:uC-CPU/cpu_core.c ****     return (nbr_trail_zeros);
2065:uC-CPU/cpu_core.c **** }
2066:uC-CPU/cpu_core.c **** #endif
2067:uC-CPU/cpu_core.c **** 
2068:uC-CPU/cpu_core.c **** 
2069:uC-CPU/cpu_core.c **** /*$PAGE*/
2070:uC-CPU/cpu_core.c **** /*
2071:uC-CPU/cpu_core.c **** ***************************************************************************************************
2072:uC-CPU/cpu_core.c **** ***************************************************************************************************
2073:uC-CPU/cpu_core.c **** *                                           LOCAL FUNCTIONS
2074:uC-CPU/cpu_core.c **** ***************************************************************************************************
2075:uC-CPU/cpu_core.c **** ***************************************************************************************************
2076:uC-CPU/cpu_core.c **** */
2077:uC-CPU/cpu_core.c **** 
2078:uC-CPU/cpu_core.c **** /*
2079:uC-CPU/cpu_core.c **** ***************************************************************************************************
2080:uC-CPU/cpu_core.c **** *                                           CPU_NameInit()
2081:uC-CPU/cpu_core.c **** *
2082:uC-CPU/cpu_core.c **** * Description : Initialize CPU Name.
2083:uC-CPU/cpu_core.c **** *
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 38


2084:uC-CPU/cpu_core.c **** * Argument(s) : none.
2085:uC-CPU/cpu_core.c **** *
2086:uC-CPU/cpu_core.c **** * Return(s)   : none.
2087:uC-CPU/cpu_core.c **** *
2088:uC-CPU/cpu_core.c **** * Caller(s)   : CPU_Init().
2089:uC-CPU/cpu_core.c **** *
2090:uC-CPU/cpu_core.c **** * Note(s)     : none.
2091:uC-CPU/cpu_core.c **** ***************************************************************************************************
2092:uC-CPU/cpu_core.c **** */
2093:uC-CPU/cpu_core.c **** 
2094:uC-CPU/cpu_core.c **** #if (CPU_CFG_NAME_EN == DEF_ENABLED)
2095:uC-CPU/cpu_core.c **** static  void  CPU_NameInit (void)
2096:uC-CPU/cpu_core.c **** {
2097:uC-CPU/cpu_core.c ****     CPU_NameClr();
2098:uC-CPU/cpu_core.c **** }
2099:uC-CPU/cpu_core.c **** #endif
2100:uC-CPU/cpu_core.c **** 
2101:uC-CPU/cpu_core.c **** 
2102:uC-CPU/cpu_core.c **** /*$PAGE*/
2103:uC-CPU/cpu_core.c **** /*
2104:uC-CPU/cpu_core.c **** ***************************************************************************************************
2105:uC-CPU/cpu_core.c **** *                                            CPU_TS_Init()
2106:uC-CPU/cpu_core.c **** *
2107:uC-CPU/cpu_core.c **** * Description : (1) Initialize CPU timestamp :
2108:uC-CPU/cpu_core.c **** *
2109:uC-CPU/cpu_core.c **** *                   (a) Initialize/start CPU timestamp timer                            See Note #1
2110:uC-CPU/cpu_core.c **** *                   (b) Initialize       CPU timestamp controls
2111:uC-CPU/cpu_core.c **** *
2112:uC-CPU/cpu_core.c **** *
2113:uC-CPU/cpu_core.c **** * Argument(s) : none.
2114:uC-CPU/cpu_core.c **** *
2115:uC-CPU/cpu_core.c **** * Return(s)   : none.
2116:uC-CPU/cpu_core.c **** *
2117:uC-CPU/cpu_core.c **** * Caller(s)   : CPU_Init().
2118:uC-CPU/cpu_core.c **** *
2119:uC-CPU/cpu_core.c **** * Note(s)     : (1) The following initialization MUST be sequenced as follows :
2120:uC-CPU/cpu_core.c **** *
2121:uC-CPU/cpu_core.c **** *                   (a) CPU_TS_TmrFreq_Hz     MUST be initialized prior to CPU_TS_TmrInit()
2122:uC-CPU/cpu_core.c **** *                   (b) CPU_TS_TmrInit()      SHOULD precede calls to all other CPU timestamp funct
2123:uC-CPU/cpu_core.c **** *                                                 otherwise, invalid time measurements may be calcu
2124:uC-CPU/cpu_core.c **** *                                                 returned.
2125:uC-CPU/cpu_core.c **** *
2126:uC-CPU/cpu_core.c **** *                   See also 'CPU_Init()  Note #3a'.
2127:uC-CPU/cpu_core.c **** ***************************************************************************************************
2128:uC-CPU/cpu_core.c **** */
2129:uC-CPU/cpu_core.c **** 
2130:uC-CPU/cpu_core.c **** #if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
2131:uC-CPU/cpu_core.c ****      (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
2132:uC-CPU/cpu_core.c **** static  void  CPU_TS_Init (void)
2133:uC-CPU/cpu_core.c **** {
  27              		.loc 1 2133 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 08B5     		push	{r3, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 3, -8
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 39


  34              		.cfi_offset 14, -4
2134:uC-CPU/cpu_core.c **** #if (((CPU_CFG_TS_32_EN    == DEF_ENABLED     )  && \
2135:uC-CPU/cpu_core.c ****       (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32)) || \
2136:uC-CPU/cpu_core.c ****      ((CPU_CFG_TS_64_EN    == DEF_ENABLED     )  && \
2137:uC-CPU/cpu_core.c ****       (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64)))
2138:uC-CPU/cpu_core.c ****     CPU_TS_TMR  ts_tmr_cnts;
2139:uC-CPU/cpu_core.c **** #endif
2140:uC-CPU/cpu_core.c **** 
2141:uC-CPU/cpu_core.c **** 
2142:uC-CPU/cpu_core.c ****                                                                 /* ----------------- INIT CPU TS TM
2143:uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
2144:uC-CPU/cpu_core.c ****     CPU_TS_TmrFreq_Hz   = 0u;                                   /* Init/clr     ts tmr freq (see No
  35              		.loc 1 2144 0
  36 0002 0022     		movs	r2, #0
  37 0004 024B     		ldr	r3, .L3
  38 0006 1A60     		str	r2, [r3]
2145:uC-CPU/cpu_core.c ****     CPU_TS_TmrInit();                                           /* Init & start ts tmr      (see No
  39              		.loc 1 2145 0
  40 0008 FFF7FEFF 		bl	CPU_TS_TmrInit
  41              	.LVL0:
  42 000c 08BD     		pop	{r3, pc}
  43              	.L4:
  44 000e 00BF     		.align	2
  45              	.L3:
  46 0010 00000000 		.word	CPU_TS_TmrFreq_Hz
  47              		.cfi_endproc
  48              	.LFE19:
  49              		.size	CPU_TS_Init, .-CPU_TS_Init
  50              		.section	.text.CPU_SW_Exception,"ax",%progbits
  51              		.align	2
  52              		.global	CPU_SW_Exception
  53              		.thumb
  54              		.thumb_func
  55              		.type	CPU_SW_Exception, %function
  56              	CPU_SW_Exception:
  57              	.LFB2:
 234:uC-CPU/cpu_core.c ****     while (DEF_ON) {
  58              		.loc 1 234 0
  59              		.cfi_startproc
  60              		@ Volatile: function does not return.
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 0, uses_anonymous_args = 0
  63              		@ link register save eliminated.
  64              	.L6:
  65 0000 FEE7     		b	.L6
  66              		.cfi_endproc
  67              	.LFE2:
  68              		.size	CPU_SW_Exception, .-CPU_SW_Exception
  69 0002 00BF     		.section	.text.CPU_NameClr,"ax",%progbits
  70              		.align	2
  71              		.global	CPU_NameClr
  72              		.thumb
  73              		.thumb_func
  74              		.type	CPU_NameClr, %function
  75              	CPU_NameClr:
  76              	.LFB3:
 264:uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 40


  77              		.loc 1 264 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
 264:uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
  81              		.loc 1 264 0
  82 0000 10B5     		push	{r4, lr}
  83              		.cfi_def_cfa_offset 8
  84              		.cfi_offset 4, -8
  85              		.cfi_offset 14, -4
  86              	.LVL1:
 268:uC-CPU/cpu_core.c ****     Mem_Clr((void     *)&CPU_Name[0],
  87              		.loc 1 268 0
  88 0002 FFF7FEFF 		bl	CPU_SR_Save
  89              	.LVL2:
  90 0006 0446     		mov	r4, r0
  91              	.LVL3:
 269:uC-CPU/cpu_core.c ****             (CPU_SIZE_T) CPU_CFG_NAME_SIZE);
  92              		.loc 1 269 0
  93 0008 1021     		movs	r1, #16
  94 000a 0348     		ldr	r0, .L9
  95              	.LVL4:
  96 000c FFF7FEFF 		bl	Mem_Clr
  97              	.LVL5:
 271:uC-CPU/cpu_core.c **** }
  98              		.loc 1 271 0
  99 0010 2046     		mov	r0, r4
 100 0012 FFF7FEFF 		bl	CPU_SR_Restore
 101              	.LVL6:
 102 0016 10BD     		pop	{r4, pc}
 103              	.LVL7:
 104              	.L10:
 105              		.align	2
 106              	.L9:
 107 0018 00000000 		.word	CPU_Name
 108              		.cfi_endproc
 109              	.LFE3:
 110              		.size	CPU_NameClr, .-CPU_NameClr
 111              		.section	.text.CPU_NameInit,"ax",%progbits
 112              		.align	2
 113              		.thumb
 114              		.thumb_func
 115              		.type	CPU_NameInit, %function
 116              	CPU_NameInit:
 117              	.LFB18:
2096:uC-CPU/cpu_core.c ****     CPU_NameClr();
 118              		.loc 1 2096 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122 0000 08B5     		push	{r3, lr}
 123              		.cfi_def_cfa_offset 8
 124              		.cfi_offset 3, -8
 125              		.cfi_offset 14, -4
2097:uC-CPU/cpu_core.c **** }
 126              		.loc 1 2097 0
 127 0002 FFF7FEFF 		bl	CPU_NameClr
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 41


 128              	.LVL8:
 129 0006 08BD     		pop	{r3, pc}
 130              		.cfi_endproc
 131              	.LFE18:
 132              		.size	CPU_NameInit, .-CPU_NameInit
 133              		.section	.text.CPU_Init,"ax",%progbits
 134              		.align	2
 135              		.global	CPU_Init
 136              		.thumb
 137              		.thumb_func
 138              		.type	CPU_Init, %function
 139              	CPU_Init:
 140              	.LFB1:
 194:uC-CPU/cpu_core.c ****                                                                 /* --------------------- INIT TS --
 141              		.loc 1 194 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145 0000 08B5     		push	{r3, lr}
 146              		.cfi_def_cfa_offset 8
 147              		.cfi_offset 3, -8
 148              		.cfi_offset 14, -4
 198:uC-CPU/cpu_core.c **** #endif
 149              		.loc 1 198 0
 150 0002 FFF7FEFF 		bl	CPU_TS_Init
 151              	.LVL9:
 207:uC-CPU/cpu_core.c **** #endif
 152              		.loc 1 207 0
 153 0006 FFF7FEFF 		bl	CPU_NameInit
 154              	.LVL10:
 155 000a 08BD     		pop	{r3, pc}
 156              		.cfi_endproc
 157              	.LFE1:
 158              		.size	CPU_Init, .-CPU_Init
 159              		.section	.text.CPU_NameGet,"ax",%progbits
 160              		.align	2
 161              		.global	CPU_NameGet
 162              		.thumb
 163              		.thumb_func
 164              		.type	CPU_NameGet, %function
 165              	CPU_NameGet:
 166              	.LFB4:
 310:uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 167              		.loc 1 310 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              	.LVL11:
 172 0000 70B5     		push	{r4, r5, r6, lr}
 173              		.cfi_def_cfa_offset 16
 174              		.cfi_offset 4, -16
 175              		.cfi_offset 5, -12
 176              		.cfi_offset 6, -8
 177              		.cfi_offset 14, -4
 178              	.LVL12:
 314:uC-CPU/cpu_core.c ****         CPU_SW_EXCEPTION(;);
 179              		.loc 1 314 0
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 42


 180 0002 09B9     		cbnz	r1, .L16
 315:uC-CPU/cpu_core.c ****     }
 181              		.loc 1 315 0
 182 0004 FFF7FEFF 		bl	CPU_SW_Exception
 183              	.LVL13:
 184              	.L16:
 185 0008 0446     		mov	r4, r0
 186 000a 0D46     		mov	r5, r1
 318:uC-CPU/cpu_core.c ****        *p_err = CPU_ERR_NULL_PTR;
 187              		.loc 1 318 0
 188 000c 10B9     		cbnz	r0, .L17
 319:uC-CPU/cpu_core.c ****         return;
 189              		.loc 1 319 0
 190 000e 0A23     		movs	r3, #10
 191 0010 0B80     		strh	r3, [r1]	@ movhi
 320:uC-CPU/cpu_core.c ****     }
 192              		.loc 1 320 0
 193 0012 70BD     		pop	{r4, r5, r6, pc}
 194              	.L17:
 323:uC-CPU/cpu_core.c ****    (void)Str_Copy_N(p_name,
 195              		.loc 1 323 0
 196 0014 FFF7FEFF 		bl	CPU_SR_Save
 197              	.LVL14:
 198 0018 0646     		mov	r6, r0
 199              	.LVL15:
 324:uC-CPU/cpu_core.c ****                    &CPU_Name[0],
 200              		.loc 1 324 0
 201 001a 1022     		movs	r2, #16
 202 001c 0449     		ldr	r1, .L20
 203 001e 2046     		mov	r0, r4
 204              	.LVL16:
 205 0020 FFF7FEFF 		bl	Str_Copy_N
 206              	.LVL17:
 327:uC-CPU/cpu_core.c **** 
 207              		.loc 1 327 0
 208 0024 3046     		mov	r0, r6
 209 0026 FFF7FEFF 		bl	CPU_SR_Restore
 210              	.LVL18:
 329:uC-CPU/cpu_core.c **** }
 211              		.loc 1 329 0
 212 002a 0023     		movs	r3, #0
 213 002c 2B80     		strh	r3, [r5]	@ movhi
 214 002e 70BD     		pop	{r4, r5, r6, pc}
 215              	.LVL19:
 216              	.L21:
 217              		.align	2
 218              	.L20:
 219 0030 00000000 		.word	CPU_Name
 220              		.cfi_endproc
 221              	.LFE4:
 222              		.size	CPU_NameGet, .-CPU_NameGet
 223              		.section	.text.CPU_NameSet,"ax",%progbits
 224              		.align	2
 225              		.global	CPU_NameSet
 226              		.thumb
 227              		.thumb_func
 228              		.type	CPU_NameSet, %function
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 43


 229              	CPU_NameSet:
 230              	.LFB5:
 364:uC-CPU/cpu_core.c ****     CPU_SIZE_T  len;
 231              		.loc 1 364 0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 0
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 235              	.LVL20:
 236 0000 70B5     		push	{r4, r5, r6, lr}
 237              		.cfi_def_cfa_offset 16
 238              		.cfi_offset 4, -16
 239              		.cfi_offset 5, -12
 240              		.cfi_offset 6, -8
 241              		.cfi_offset 14, -4
 242              	.LVL21:
 369:uC-CPU/cpu_core.c ****         CPU_SW_EXCEPTION(;);
 243              		.loc 1 369 0
 244 0002 09B9     		cbnz	r1, .L23
 370:uC-CPU/cpu_core.c ****     }
 245              		.loc 1 370 0
 246 0004 FFF7FEFF 		bl	CPU_SW_Exception
 247              	.LVL22:
 248              	.L23:
 249 0008 0446     		mov	r4, r0
 250 000a 0D46     		mov	r5, r1
 373:uC-CPU/cpu_core.c ****        *p_err = CPU_ERR_NULL_PTR;
 251              		.loc 1 373 0
 252 000c 10B9     		cbnz	r0, .L24
 374:uC-CPU/cpu_core.c ****         return;
 253              		.loc 1 374 0
 254 000e 0A23     		movs	r3, #10
 255 0010 0B80     		strh	r3, [r1]	@ movhi
 375:uC-CPU/cpu_core.c ****     }
 256              		.loc 1 375 0
 257 0012 70BD     		pop	{r4, r5, r6, pc}
 258              	.L24:
 378:uC-CPU/cpu_core.c ****                     CPU_CFG_NAME_SIZE);
 259              		.loc 1 378 0
 260 0014 1021     		movs	r1, #16
 261              	.LVL23:
 262 0016 FFF7FEFF 		bl	Str_Len_N
 263              	.LVL24:
 380:uC-CPU/cpu_core.c ****         CPU_CRITICAL_ENTER();
 264              		.loc 1 380 0
 265 001a 0F28     		cmp	r0, #15
 266 001c 0DD8     		bhi	.L26
 381:uC-CPU/cpu_core.c ****        (void)Str_Copy_N(&CPU_Name[0],                           /* ... copy cfg name to CPU host na
 267              		.loc 1 381 0
 268 001e FFF7FEFF 		bl	CPU_SR_Save
 269              	.LVL25:
 270 0022 0646     		mov	r6, r0
 271              	.LVL26:
 382:uC-CPU/cpu_core.c ****                          p_name,
 272              		.loc 1 382 0
 273 0024 1022     		movs	r2, #16
 274 0026 2146     		mov	r1, r4
 275 0028 0648     		ldr	r0, .L28
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 44


 276              	.LVL27:
 277 002a FFF7FEFF 		bl	Str_Copy_N
 278              	.LVL28:
 385:uC-CPU/cpu_core.c ****        *p_err = CPU_ERR_NONE;
 279              		.loc 1 385 0
 280 002e 3046     		mov	r0, r6
 281 0030 FFF7FEFF 		bl	CPU_SR_Restore
 282              	.LVL29:
 386:uC-CPU/cpu_core.c **** 
 283              		.loc 1 386 0
 284 0034 0023     		movs	r3, #0
 285 0036 2B80     		strh	r3, [r5]	@ movhi
 286 0038 70BD     		pop	{r4, r5, r6, pc}
 287              	.LVL30:
 288              	.L26:
 389:uC-CPU/cpu_core.c ****     }
 289              		.loc 1 389 0
 290 003a 4FF47A73 		mov	r3, #1000
 291 003e 2B80     		strh	r3, [r5]	@ movhi
 292 0040 70BD     		pop	{r4, r5, r6, pc}
 293              	.LVL31:
 294              	.L29:
 295 0042 00BF     		.align	2
 296              	.L28:
 297 0044 00000000 		.word	CPU_Name
 298              		.cfi_endproc
 299              	.LFE5:
 300              		.size	CPU_NameSet, .-CPU_NameSet
 301              		.section	.text.CPU_TS_Get32,"ax",%progbits
 302              		.align	2
 303              		.global	CPU_TS_Get32
 304              		.thumb
 305              		.thumb_func
 306              		.type	CPU_TS_Get32, %function
 307              	CPU_TS_Get32:
 308              	.LFB6:
 450:uC-CPU/cpu_core.c ****     CPU_TS32    ts;
 309              		.loc 1 450 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313 0000 08B5     		push	{r3, lr}
 314              		.cfi_def_cfa_offset 8
 315              		.cfi_offset 3, -8
 316              		.cfi_offset 14, -4
 460:uC-CPU/cpu_core.c **** 
 317              		.loc 1 460 0
 318 0002 FFF7FEFF 		bl	CPU_TS_TmrRd
 319              	.LVL32:
 473:uC-CPU/cpu_core.c **** #endif
 320              		.loc 1 473 0
 321 0006 08BD     		pop	{r3, pc}
 322              		.cfi_endproc
 323              	.LFE6:
 324              		.size	CPU_TS_Get32, .-CPU_TS_Get32
 325              		.section	.text.CPU_TS_Update,"ax",%progbits
 326              		.align	2
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 45


 327              		.global	CPU_TS_Update
 328              		.thumb
 329              		.thumb_func
 330              		.type	CPU_TS_Update, %function
 331              	CPU_TS_Update:
 332              	.LFB7:
 587:uC-CPU/cpu_core.c **** #if ((CPU_CFG_TS_32_EN    == DEF_ENABLED)  && \
 333              		.loc 1 587 0
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 0
 336              		@ frame_needed = 0, uses_anonymous_args = 0
 337              		@ link register save eliminated.
 338 0000 7047     		bx	lr
 339              		.cfi_endproc
 340              	.LFE7:
 341              		.size	CPU_TS_Update, .-CPU_TS_Update
 342 0002 00BF     		.section	.text.CPU_TS_TmrFreqGet,"ax",%progbits
 343              		.align	2
 344              		.global	CPU_TS_TmrFreqGet
 345              		.thumb
 346              		.thumb_func
 347              		.type	CPU_TS_TmrFreqGet, %function
 348              	CPU_TS_TmrFreqGet:
 349              	.LFB8:
 630:uC-CPU/cpu_core.c ****     CPU_TS_TMR_FREQ  freq_hz;
 350              		.loc 1 630 0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 0
 353              		@ frame_needed = 0, uses_anonymous_args = 0
 354              	.LVL33:
 630:uC-CPU/cpu_core.c ****     CPU_TS_TMR_FREQ  freq_hz;
 355              		.loc 1 630 0
 356 0000 08B5     		push	{r3, lr}
 357              		.cfi_def_cfa_offset 8
 358              		.cfi_offset 3, -8
 359              		.cfi_offset 14, -4
 634:uC-CPU/cpu_core.c ****         CPU_SW_EXCEPTION(;);
 360              		.loc 1 634 0
 361 0002 08B9     		cbnz	r0, .L34
 635:uC-CPU/cpu_core.c ****     }
 362              		.loc 1 635 0
 363 0004 FFF7FEFF 		bl	CPU_SW_Exception
 364              	.LVL34:
 365              	.L34:
 366 0008 0346     		mov	r3, r0
 638:uC-CPU/cpu_core.c ****    *p_err   = (freq_hz != 0u) ? CPU_ERR_NONE : CPU_ERR_TS_FREQ_INVALID;
 367              		.loc 1 638 0
 368 000a 044A     		ldr	r2, .L38
 369 000c 1068     		ldr	r0, [r2]
 370              	.LVL35:
 639:uC-CPU/cpu_core.c **** 
 371              		.loc 1 639 0
 372 000e 08B1     		cbz	r0, .L36
 373 0010 0022     		movs	r2, #0
 374 0012 01E0     		b	.L35
 375              	.L36:
 376 0014 4FF4FA62 		mov	r2, #2000
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 46


 377              	.L35:
 639:uC-CPU/cpu_core.c **** 
 378              		.loc 1 639 0 is_stmt 0 discriminator 4
 379 0018 1A80     		strh	r2, [r3]	@ movhi
 642:uC-CPU/cpu_core.c **** #endif
 380              		.loc 1 642 0 is_stmt 1 discriminator 4
 381 001a 08BD     		pop	{r3, pc}
 382              	.LVL36:
 383              	.L39:
 384              		.align	2
 385              	.L38:
 386 001c 00000000 		.word	CPU_TS_TmrFreq_Hz
 387              		.cfi_endproc
 388              	.LFE8:
 389              		.size	CPU_TS_TmrFreqGet, .-CPU_TS_TmrFreqGet
 390              		.section	.text.CPU_TS_TmrFreqSet,"ax",%progbits
 391              		.align	2
 392              		.global	CPU_TS_TmrFreqSet
 393              		.thumb
 394              		.thumb_func
 395              		.type	CPU_TS_TmrFreqSet, %function
 396              	CPU_TS_TmrFreqSet:
 397              	.LFB9:
 682:uC-CPU/cpu_core.c ****     CPU_TS_TmrFreq_Hz = freq_hz;
 398              		.loc 1 682 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402              		@ link register save eliminated.
 403              	.LVL37:
 683:uC-CPU/cpu_core.c **** }
 404              		.loc 1 683 0
 405 0000 014B     		ldr	r3, .L41
 406 0002 1860     		str	r0, [r3]
 407 0004 7047     		bx	lr
 408              	.L42:
 409 0006 00BF     		.align	2
 410              	.L41:
 411 0008 00000000 		.word	CPU_TS_TmrFreq_Hz
 412              		.cfi_endproc
 413              	.LFE9:
 414              		.size	CPU_TS_TmrFreqSet, .-CPU_TS_TmrFreqSet
 415              		.section	.text.CPU_CntLeadZeros08,"ax",%progbits
 416              		.align	2
 417              		.global	CPU_CntLeadZeros08
 418              		.thumb
 419              		.thumb_func
 420              		.type	CPU_CntLeadZeros08, %function
 421              	CPU_CntLeadZeros08:
 422              	.LFB10:
1211:uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
 423              		.loc 1 1211 0
 424              		.cfi_startproc
 425              		@ args = 0, pretend = 0, frame = 0
 426              		@ frame_needed = 0, uses_anonymous_args = 0
 427              	.LVL38:
 428 0000 08B5     		push	{r3, lr}
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 47


 429              		.cfi_def_cfa_offset 8
 430              		.cfi_offset 3, -8
 431              		.cfi_offset 14, -4
1221:uC-CPU/cpu_core.c ****     nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_08) * DEF_OCTET_NBR_BITS;
 432              		.loc 1 1221 0
 433 0002 FFF7FEFF 		bl	CPU_CntLeadZeros
 434              	.LVL39:
1234:uC-CPU/cpu_core.c **** #endif
 435              		.loc 1 1234 0
 436 0006 1838     		subs	r0, r0, #24
 437              	.LVL40:
 438 0008 08BD     		pop	{r3, pc}
 439              		.cfi_endproc
 440              	.LFE10:
 441              		.size	CPU_CntLeadZeros08, .-CPU_CntLeadZeros08
 442 000a 00BF     		.section	.text.CPU_CntLeadZeros16,"ax",%progbits
 443              		.align	2
 444              		.global	CPU_CntLeadZeros16
 445              		.thumb
 446              		.thumb_func
 447              		.type	CPU_CntLeadZeros16, %function
 448              	CPU_CntLeadZeros16:
 449              	.LFB11:
1279:uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
 450              		.loc 1 1279 0
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 0
 453              		@ frame_needed = 0, uses_anonymous_args = 0
 454              	.LVL41:
 455 0000 08B5     		push	{r3, lr}
 456              		.cfi_def_cfa_offset 8
 457              		.cfi_offset 3, -8
 458              		.cfi_offset 14, -4
1289:uC-CPU/cpu_core.c ****     nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_16) * DEF_OCTET_NBR_BITS;
 459              		.loc 1 1289 0
 460 0002 FFF7FEFF 		bl	CPU_CntLeadZeros
 461              	.LVL42:
1308:uC-CPU/cpu_core.c **** #endif
 462              		.loc 1 1308 0
 463 0006 1038     		subs	r0, r0, #16
 464              	.LVL43:
 465 0008 08BD     		pop	{r3, pc}
 466              		.cfi_endproc
 467              	.LFE11:
 468              		.size	CPU_CntLeadZeros16, .-CPU_CntLeadZeros16
 469 000a 00BF     		.section	.text.CPU_CntLeadZeros32,"ax",%progbits
 470              		.align	2
 471              		.global	CPU_CntLeadZeros32
 472              		.thumb
 473              		.thumb_func
 474              		.type	CPU_CntLeadZeros32, %function
 475              	CPU_CntLeadZeros32:
 476              	.LFB12:
1353:uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
 477              		.loc 1 1353 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 48


 480              		@ frame_needed = 0, uses_anonymous_args = 0
 481              	.LVL44:
 482 0000 08B5     		push	{r3, lr}
 483              		.cfi_def_cfa_offset 8
 484              		.cfi_offset 3, -8
 485              		.cfi_offset 14, -4
1363:uC-CPU/cpu_core.c ****     nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_32) * DEF_OCTET_NBR_BITS;
 486              		.loc 1 1363 0
 487 0002 FFF7FEFF 		bl	CPU_CntLeadZeros
 488              	.LVL45:
1396:uC-CPU/cpu_core.c **** #endif
 489              		.loc 1 1396 0
 490 0006 08BD     		pop	{r3, pc}
 491              		.cfi_endproc
 492              	.LFE12:
 493              		.size	CPU_CntLeadZeros32, .-CPU_CntLeadZeros32
 494              		.section	.text.CPU_CntLeadZeros64,"ax",%progbits
 495              		.align	2
 496              		.global	CPU_CntLeadZeros64
 497              		.thumb
 498              		.thumb_func
 499              		.type	CPU_CntLeadZeros64, %function
 500              	CPU_CntLeadZeros64:
 501              	.LFB13:
1441:uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
 502              		.loc 1 1441 0
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 0
 505              		@ frame_needed = 0, uses_anonymous_args = 0
 506              		@ link register save eliminated.
 507              	.LVL46:
1456:uC-CPU/cpu_core.c ****         if (val > 0x0000FFFFFFFFFFFFu) {
 508              		.loc 1 1456 0
 509 0000 0129     		cmp	r1, #1
 510 0002 08BF     		it	eq
 511 0004 0028     		cmpeq	r0, #0
 512 0006 20D3     		bcc	.L50
1457:uC-CPU/cpu_core.c ****             if (val > 0x00FFFFFFFFFFFFFFu) {                                    /* Chk bits [63:56]
 513              		.loc 1 1457 0
 514 0008 B1F5803F 		cmp	r1, #65536
 515 000c 08BF     		it	eq
 516 000e 0028     		cmpeq	r0, #0
 517 0010 0DD3     		bcc	.L51
1458:uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
 518              		.loc 1 1458 0
 519 0012 B1F1807F 		cmp	r1, #16777216
 520 0016 08BF     		it	eq
 521 0018 0028     		cmpeq	r0, #0
 522 001a 03D3     		bcc	.L52
1460:uC-CPU/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  0u);     /* .. plus nbr msb 
 523              		.loc 1 1460 0
 524 001c 0B0E     		lsrs	r3, r1, #24
 525              	.LVL47:
1461:uC-CPU/cpu_core.c **** 
 526              		.loc 1 1461 0
 527 001e 1F4A     		ldr	r2, .L58
 528 0020 D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 49


 529              	.LVL48:
 530 0022 7047     		bx	lr
 531              	.LVL49:
 532              	.L52:
1465:uC-CPU/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  8u);     /* .. plus nbr msb 
 533              		.loc 1 1465 0
 534 0024 0B0C     		lsrs	r3, r1, #16
 535              	.LVL50:
1466:uC-CPU/cpu_core.c ****             }
 536              		.loc 1 1466 0
 537 0026 1D4A     		ldr	r2, .L58
 538 0028 D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 539              	.LVL51:
 540 002a 0830     		adds	r0, r0, #8
 541              	.LVL52:
 542 002c 7047     		bx	lr
 543              	.LVL53:
 544              	.L51:
1470:uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
 545              		.loc 1 1470 0
 546 002e B1F5807F 		cmp	r1, #256
 547 0032 08BF     		it	eq
 548 0034 0028     		cmpeq	r0, #0
 549 0036 04D3     		bcc	.L54
1472:uC-CPU/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 16u);     /* .. plus nbr msb 
 550              		.loc 1 1472 0
 551 0038 0B0A     		lsrs	r3, r1, #8
 552              	.LVL54:
1473:uC-CPU/cpu_core.c **** 
 553              		.loc 1 1473 0
 554 003a 184A     		ldr	r2, .L58
 555 003c D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 556              	.LVL55:
 557 003e 1030     		adds	r0, r0, #16
 558              	.LVL56:
 559 0040 7047     		bx	lr
 560              	.LVL57:
 561              	.L54:
1478:uC-CPU/cpu_core.c ****             }
 562              		.loc 1 1478 0
 563 0042 164A     		ldr	r2, .L58
 564 0044 505C     		ldrb	r0, [r2, r1]	@ zero_extendqisi2
 565              	.LVL58:
 566 0046 1830     		adds	r0, r0, #24
 567              	.LVL59:
 568 0048 7047     		bx	lr
 569              	.LVL60:
 570              	.L50:
1483:uC-CPU/cpu_core.c ****             if (val > 0x0000000000FFFFFFu) {                                    /* Chk bits [31:24]
 571              		.loc 1 1483 0
 572 004a 0029     		cmp	r1, #0
 573 004c 08BF     		it	eq
 574 004e B0F5803F 		cmpeq	r0, #65536
 575 0052 12D3     		bcc	.L55
1484:uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
 576              		.loc 1 1484 0
 577 0054 0029     		cmp	r1, #0
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 50


 578 0056 08BF     		it	eq
 579 0058 B0F1807F 		cmpeq	r0, #16777216
 580 005c 06D3     		bcc	.L56
1486:uC-CPU/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 32u);     /* .. plus nbr msb 
 581              		.loc 1 1486 0
 582 005e 030E     		lsrs	r3, r0, #24
 583 0060 43EA0123 		orr	r3, r3, r1, lsl #8
 584              	.LVL61:
1487:uC-CPU/cpu_core.c **** 
 585              		.loc 1 1487 0
 586 0064 0D4A     		ldr	r2, .L58
 587 0066 D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 588              	.LVL62:
 589 0068 2030     		adds	r0, r0, #32
 590              	.LVL63:
 591 006a 7047     		bx	lr
 592              	.LVL64:
 593              	.L56:
1491:uC-CPU/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 40u);     /* .. plus nbr msb 
 594              		.loc 1 1491 0
 595 006c 030C     		lsrs	r3, r0, #16
 596 006e 43EA0143 		orr	r3, r3, r1, lsl #16
 597              	.LVL65:
1492:uC-CPU/cpu_core.c ****             }
 598              		.loc 1 1492 0
 599 0072 0A4A     		ldr	r2, .L58
 600 0074 D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 601              	.LVL66:
 602 0076 2830     		adds	r0, r0, #40
 603              	.LVL67:
 604 0078 7047     		bx	lr
 605              	.LVL68:
 606              	.L55:
1496:uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
 607              		.loc 1 1496 0
 608 007a 0029     		cmp	r1, #0
 609 007c 08BF     		it	eq
 610 007e B0F5807F 		cmpeq	r0, #256
 611 0082 06D3     		bcc	.L57
1498:uC-CPU/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 48u);     /* .. plus nbr msb 
 612              		.loc 1 1498 0
 613 0084 030A     		lsrs	r3, r0, #8
 614 0086 43EA0163 		orr	r3, r3, r1, lsl #24
 615              	.LVL69:
1499:uC-CPU/cpu_core.c **** 
 616              		.loc 1 1499 0
 617 008a 044A     		ldr	r2, .L58
 618 008c D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 619              	.LVL70:
 620 008e 3030     		adds	r0, r0, #48
 621              	.LVL71:
 622 0090 7047     		bx	lr
 623              	.LVL72:
 624              	.L57:
1504:uC-CPU/cpu_core.c ****             }
 625              		.loc 1 1504 0
 626 0092 024B     		ldr	r3, .L58
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 51


 627 0094 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 628              	.LVL73:
 629 0096 3830     		adds	r0, r0, #56
 630              	.LVL74:
1512:uC-CPU/cpu_core.c **** #endif
 631              		.loc 1 1512 0
 632 0098 7047     		bx	lr
 633              	.L59:
 634 009a 00BF     		.align	2
 635              	.L58:
 636 009c 00000000 		.word	.LANCHOR0
 637              		.cfi_endproc
 638              	.LFE13:
 639              		.size	CPU_CntLeadZeros64, .-CPU_CntLeadZeros64
 640              		.section	.text.CPU_CntTrailZeros08,"ax",%progbits
 641              		.align	2
 642              		.global	CPU_CntTrailZeros08
 643              		.thumb
 644              		.thumb_func
 645              		.type	CPU_CntTrailZeros08, %function
 646              	CPU_CntTrailZeros08:
 647              	.LFB14:
1723:uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
 648              		.loc 1 1723 0
 649              		.cfi_startproc
 650              		@ args = 0, pretend = 0, frame = 0
 651              		@ frame_needed = 0, uses_anonymous_args = 0
 652              	.LVL75:
1732:uC-CPU/cpu_core.c ****         return (CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS);
 653              		.loc 1 1732 0
 654 0000 18B1     		cbz	r0, .L62
1723:uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
 655              		.loc 1 1723 0
 656 0002 08B5     		push	{r3, lr}
 657              		.cfi_def_cfa_offset 8
 658              		.cfi_offset 3, -8
 659              		.cfi_offset 14, -4
1739:uC-CPU/cpu_core.c **** 
 660              		.loc 1 1739 0
 661 0004 FFF7FEFF 		bl	CPU_CntTrailZeros
 662              	.LVL76:
1749:uC-CPU/cpu_core.c **** }
 663              		.loc 1 1749 0
 664 0008 08BD     		pop	{r3, pc}
 665              	.LVL77:
 666              	.L62:
 667              		.cfi_def_cfa_offset 0
 668              		.cfi_restore 3
 669              		.cfi_restore 14
1733:uC-CPU/cpu_core.c ****     }
 670              		.loc 1 1733 0
 671 000a 0820     		movs	r0, #8
 672              	.LVL78:
 673 000c 7047     		bx	lr
 674              		.cfi_endproc
 675              	.LFE14:
 676              		.size	CPU_CntTrailZeros08, .-CPU_CntTrailZeros08
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 52


 677 000e 00BF     		.section	.text.CPU_CntTrailZeros16,"ax",%progbits
 678              		.align	2
 679              		.global	CPU_CntTrailZeros16
 680              		.thumb
 681              		.thumb_func
 682              		.type	CPU_CntTrailZeros16, %function
 683              	CPU_CntTrailZeros16:
 684              	.LFB15:
1828:uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
 685              		.loc 1 1828 0
 686              		.cfi_startproc
 687              		@ args = 0, pretend = 0, frame = 0
 688              		@ frame_needed = 0, uses_anonymous_args = 0
 689              	.LVL79:
1837:uC-CPU/cpu_core.c ****         return (CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS);
 690              		.loc 1 1837 0
 691 0000 18B1     		cbz	r0, .L67
1828:uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
 692              		.loc 1 1828 0
 693 0002 08B5     		push	{r3, lr}
 694              		.cfi_def_cfa_offset 8
 695              		.cfi_offset 3, -8
 696              		.cfi_offset 14, -4
1844:uC-CPU/cpu_core.c **** 
 697              		.loc 1 1844 0
 698 0004 FFF7FEFF 		bl	CPU_CntTrailZeros
 699              	.LVL80:
1854:uC-CPU/cpu_core.c **** }
 700              		.loc 1 1854 0
 701 0008 08BD     		pop	{r3, pc}
 702              	.LVL81:
 703              	.L67:
 704              		.cfi_def_cfa_offset 0
 705              		.cfi_restore 3
 706              		.cfi_restore 14
1838:uC-CPU/cpu_core.c ****     }
 707              		.loc 1 1838 0
 708 000a 1020     		movs	r0, #16
 709              	.LVL82:
 710 000c 7047     		bx	lr
 711              		.cfi_endproc
 712              	.LFE15:
 713              		.size	CPU_CntTrailZeros16, .-CPU_CntTrailZeros16
 714 000e 00BF     		.section	.text.CPU_CntTrailZeros32,"ax",%progbits
 715              		.align	2
 716              		.global	CPU_CntTrailZeros32
 717              		.thumb
 718              		.thumb_func
 719              		.type	CPU_CntTrailZeros32, %function
 720              	CPU_CntTrailZeros32:
 721              	.LFB16:
1933:uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
 722              		.loc 1 1933 0
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 0
 725              		@ frame_needed = 0, uses_anonymous_args = 0
 726              	.LVL83:
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 53


1942:uC-CPU/cpu_core.c ****         return (CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS);
 727              		.loc 1 1942 0
 728 0000 18B1     		cbz	r0, .L72
1933:uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
 729              		.loc 1 1933 0
 730 0002 08B5     		push	{r3, lr}
 731              		.cfi_def_cfa_offset 8
 732              		.cfi_offset 3, -8
 733              		.cfi_offset 14, -4
1949:uC-CPU/cpu_core.c **** 
 734              		.loc 1 1949 0
 735 0004 FFF7FEFF 		bl	CPU_CntTrailZeros
 736              	.LVL84:
1959:uC-CPU/cpu_core.c **** }
 737              		.loc 1 1959 0
 738 0008 08BD     		pop	{r3, pc}
 739              	.LVL85:
 740              	.L72:
 741              		.cfi_def_cfa_offset 0
 742              		.cfi_restore 3
 743              		.cfi_restore 14
1943:uC-CPU/cpu_core.c ****     }
 744              		.loc 1 1943 0
 745 000a 2020     		movs	r0, #32
 746              	.LVL86:
 747 000c 7047     		bx	lr
 748              		.cfi_endproc
 749              	.LFE16:
 750              		.size	CPU_CntTrailZeros32, .-CPU_CntTrailZeros32
 751 000e 00BF     		.section	.text.CPU_CntTrailZeros64,"ax",%progbits
 752              		.align	2
 753              		.global	CPU_CntTrailZeros64
 754              		.thumb
 755              		.thumb_func
 756              		.type	CPU_CntTrailZeros64, %function
 757              	CPU_CntTrailZeros64:
 758              	.LFB17:
2038:uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
 759              		.loc 1 2038 0
 760              		.cfi_startproc
 761              		@ args = 0, pretend = 0, frame = 0
 762              		@ frame_needed = 0, uses_anonymous_args = 0
 763              	.LVL87:
 764 0000 08B5     		push	{r3, lr}
 765              		.cfi_def_cfa_offset 8
 766              		.cfi_offset 3, -8
 767              		.cfi_offset 14, -4
2047:uC-CPU/cpu_core.c ****         return (CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS);
 768              		.loc 1 2047 0
 769 0002 50EA0103 		orrs	r3, r0, r1
 770 0006 09D0     		beq	.L77
2057:uC-CPU/cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros64(val_bit_mask);         /* Cnt  nbr lead  0s.              
 771              		.loc 1 2057 0
 772 0008 4242     		rsbs	r2, r0, #0
 773 000a 61EB4103 		sbc	r3, r1, r1, lsl #1
 774              	.LVL88:
2058:uC-CPU/cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 54


 775              		.loc 1 2058 0
 776 000e 1040     		ands	r0, r0, r2
 777              	.LVL89:
 778 0010 1940     		ands	r1, r1, r3
 779 0012 FFF7FEFF 		bl	CPU_CntLeadZeros64
 780              	.LVL90:
2060:uC-CPU/cpu_core.c **** #endif
 781              		.loc 1 2060 0
 782 0016 C0F13F00 		rsb	r0, r0, #63
 783              	.LVL91:
2064:uC-CPU/cpu_core.c **** }
 784              		.loc 1 2064 0
 785 001a 08BD     		pop	{r3, pc}
 786              	.LVL92:
 787              	.L77:
2048:uC-CPU/cpu_core.c ****     }
 788              		.loc 1 2048 0
 789 001c 4020     		movs	r0, #64
 790              	.LVL93:
2065:uC-CPU/cpu_core.c **** #endif
 791              		.loc 1 2065 0
 792 001e 08BD     		pop	{r3, pc}
 793              		.cfi_endproc
 794              	.LFE17:
 795              		.size	CPU_CntTrailZeros64, .-CPU_CntTrailZeros64
 796              		.comm	CPU_TS_TmrFreq_Hz,4,4
 797              		.comm	CPU_Name,16,4
 798              		.section	.rodata
 799              		.align	2
 800              		.set	.LANCHOR0,. + 0
 801              		.type	CPU_CntLeadZerosTbl, %object
 802              		.size	CPU_CntLeadZerosTbl, 256
 803              	CPU_CntLeadZerosTbl:
 804 0000 08       		.byte	8
 805 0001 07       		.byte	7
 806 0002 06       		.byte	6
 807 0003 06       		.byte	6
 808 0004 05       		.byte	5
 809 0005 05       		.byte	5
 810 0006 05       		.byte	5
 811 0007 05       		.byte	5
 812 0008 04       		.byte	4
 813 0009 04       		.byte	4
 814 000a 04       		.byte	4
 815 000b 04       		.byte	4
 816 000c 04       		.byte	4
 817 000d 04       		.byte	4
 818 000e 04       		.byte	4
 819 000f 04       		.byte	4
 820 0010 03       		.byte	3
 821 0011 03       		.byte	3
 822 0012 03       		.byte	3
 823 0013 03       		.byte	3
 824 0014 03       		.byte	3
 825 0015 03       		.byte	3
 826 0016 03       		.byte	3
 827 0017 03       		.byte	3
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 55


 828 0018 03       		.byte	3
 829 0019 03       		.byte	3
 830 001a 03       		.byte	3
 831 001b 03       		.byte	3
 832 001c 03       		.byte	3
 833 001d 03       		.byte	3
 834 001e 03       		.byte	3
 835 001f 03       		.byte	3
 836 0020 02       		.byte	2
 837 0021 02       		.byte	2
 838 0022 02       		.byte	2
 839 0023 02       		.byte	2
 840 0024 02       		.byte	2
 841 0025 02       		.byte	2
 842 0026 02       		.byte	2
 843 0027 02       		.byte	2
 844 0028 02       		.byte	2
 845 0029 02       		.byte	2
 846 002a 02       		.byte	2
 847 002b 02       		.byte	2
 848 002c 02       		.byte	2
 849 002d 02       		.byte	2
 850 002e 02       		.byte	2
 851 002f 02       		.byte	2
 852 0030 02       		.byte	2
 853 0031 02       		.byte	2
 854 0032 02       		.byte	2
 855 0033 02       		.byte	2
 856 0034 02       		.byte	2
 857 0035 02       		.byte	2
 858 0036 02       		.byte	2
 859 0037 02       		.byte	2
 860 0038 02       		.byte	2
 861 0039 02       		.byte	2
 862 003a 02       		.byte	2
 863 003b 02       		.byte	2
 864 003c 02       		.byte	2
 865 003d 02       		.byte	2
 866 003e 02       		.byte	2
 867 003f 02       		.byte	2
 868 0040 01       		.byte	1
 869 0041 01       		.byte	1
 870 0042 01       		.byte	1
 871 0043 01       		.byte	1
 872 0044 01       		.byte	1
 873 0045 01       		.byte	1
 874 0046 01       		.byte	1
 875 0047 01       		.byte	1
 876 0048 01       		.byte	1
 877 0049 01       		.byte	1
 878 004a 01       		.byte	1
 879 004b 01       		.byte	1
 880 004c 01       		.byte	1
 881 004d 01       		.byte	1
 882 004e 01       		.byte	1
 883 004f 01       		.byte	1
 884 0050 01       		.byte	1
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 56


 885 0051 01       		.byte	1
 886 0052 01       		.byte	1
 887 0053 01       		.byte	1
 888 0054 01       		.byte	1
 889 0055 01       		.byte	1
 890 0056 01       		.byte	1
 891 0057 01       		.byte	1
 892 0058 01       		.byte	1
 893 0059 01       		.byte	1
 894 005a 01       		.byte	1
 895 005b 01       		.byte	1
 896 005c 01       		.byte	1
 897 005d 01       		.byte	1
 898 005e 01       		.byte	1
 899 005f 01       		.byte	1
 900 0060 01       		.byte	1
 901 0061 01       		.byte	1
 902 0062 01       		.byte	1
 903 0063 01       		.byte	1
 904 0064 01       		.byte	1
 905 0065 01       		.byte	1
 906 0066 01       		.byte	1
 907 0067 01       		.byte	1
 908 0068 01       		.byte	1
 909 0069 01       		.byte	1
 910 006a 01       		.byte	1
 911 006b 01       		.byte	1
 912 006c 01       		.byte	1
 913 006d 01       		.byte	1
 914 006e 01       		.byte	1
 915 006f 01       		.byte	1
 916 0070 01       		.byte	1
 917 0071 01       		.byte	1
 918 0072 01       		.byte	1
 919 0073 01       		.byte	1
 920 0074 01       		.byte	1
 921 0075 01       		.byte	1
 922 0076 01       		.byte	1
 923 0077 01       		.byte	1
 924 0078 01       		.byte	1
 925 0079 01       		.byte	1
 926 007a 01       		.byte	1
 927 007b 01       		.byte	1
 928 007c 01       		.byte	1
 929 007d 01       		.byte	1
 930 007e 01       		.byte	1
 931 007f 01       		.byte	1
 932 0080 00       		.byte	0
 933 0081 00       		.byte	0
 934 0082 00       		.byte	0
 935 0083 00       		.byte	0
 936 0084 00       		.byte	0
 937 0085 00       		.byte	0
 938 0086 00       		.byte	0
 939 0087 00       		.byte	0
 940 0088 00       		.byte	0
 941 0089 00       		.byte	0
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 57


 942 008a 00       		.byte	0
 943 008b 00       		.byte	0
 944 008c 00       		.byte	0
 945 008d 00       		.byte	0
 946 008e 00       		.byte	0
 947 008f 00       		.byte	0
 948 0090 00       		.byte	0
 949 0091 00       		.byte	0
 950 0092 00       		.byte	0
 951 0093 00       		.byte	0
 952 0094 00       		.byte	0
 953 0095 00       		.byte	0
 954 0096 00       		.byte	0
 955 0097 00       		.byte	0
 956 0098 00       		.byte	0
 957 0099 00       		.byte	0
 958 009a 00       		.byte	0
 959 009b 00       		.byte	0
 960 009c 00       		.byte	0
 961 009d 00       		.byte	0
 962 009e 00       		.byte	0
 963 009f 00       		.byte	0
 964 00a0 00       		.byte	0
 965 00a1 00       		.byte	0
 966 00a2 00       		.byte	0
 967 00a3 00       		.byte	0
 968 00a4 00       		.byte	0
 969 00a5 00       		.byte	0
 970 00a6 00       		.byte	0
 971 00a7 00       		.byte	0
 972 00a8 00       		.byte	0
 973 00a9 00       		.byte	0
 974 00aa 00       		.byte	0
 975 00ab 00       		.byte	0
 976 00ac 00       		.byte	0
 977 00ad 00       		.byte	0
 978 00ae 00       		.byte	0
 979 00af 00       		.byte	0
 980 00b0 00       		.byte	0
 981 00b1 00       		.byte	0
 982 00b2 00       		.byte	0
 983 00b3 00       		.byte	0
 984 00b4 00       		.byte	0
 985 00b5 00       		.byte	0
 986 00b6 00       		.byte	0
 987 00b7 00       		.byte	0
 988 00b8 00       		.byte	0
 989 00b9 00       		.byte	0
 990 00ba 00       		.byte	0
 991 00bb 00       		.byte	0
 992 00bc 00       		.byte	0
 993 00bd 00       		.byte	0
 994 00be 00       		.byte	0
 995 00bf 00       		.byte	0
 996 00c0 00       		.byte	0
 997 00c1 00       		.byte	0
 998 00c2 00       		.byte	0
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 58


 999 00c3 00       		.byte	0
 1000 00c4 00       		.byte	0
 1001 00c5 00       		.byte	0
 1002 00c6 00       		.byte	0
 1003 00c7 00       		.byte	0
 1004 00c8 00       		.byte	0
 1005 00c9 00       		.byte	0
 1006 00ca 00       		.byte	0
 1007 00cb 00       		.byte	0
 1008 00cc 00       		.byte	0
 1009 00cd 00       		.byte	0
 1010 00ce 00       		.byte	0
 1011 00cf 00       		.byte	0
 1012 00d0 00       		.byte	0
 1013 00d1 00       		.byte	0
 1014 00d2 00       		.byte	0
 1015 00d3 00       		.byte	0
 1016 00d4 00       		.byte	0
 1017 00d5 00       		.byte	0
 1018 00d6 00       		.byte	0
 1019 00d7 00       		.byte	0
 1020 00d8 00       		.byte	0
 1021 00d9 00       		.byte	0
 1022 00da 00       		.byte	0
 1023 00db 00       		.byte	0
 1024 00dc 00       		.byte	0
 1025 00dd 00       		.byte	0
 1026 00de 00       		.byte	0
 1027 00df 00       		.byte	0
 1028 00e0 00       		.byte	0
 1029 00e1 00       		.byte	0
 1030 00e2 00       		.byte	0
 1031 00e3 00       		.byte	0
 1032 00e4 00       		.byte	0
 1033 00e5 00       		.byte	0
 1034 00e6 00       		.byte	0
 1035 00e7 00       		.byte	0
 1036 00e8 00       		.byte	0
 1037 00e9 00       		.byte	0
 1038 00ea 00       		.byte	0
 1039 00eb 00       		.byte	0
 1040 00ec 00       		.byte	0
 1041 00ed 00       		.byte	0
 1042 00ee 00       		.byte	0
 1043 00ef 00       		.byte	0
 1044 00f0 00       		.byte	0
 1045 00f1 00       		.byte	0
 1046 00f2 00       		.byte	0
 1047 00f3 00       		.byte	0
 1048 00f4 00       		.byte	0
 1049 00f5 00       		.byte	0
 1050 00f6 00       		.byte	0
 1051 00f7 00       		.byte	0
 1052 00f8 00       		.byte	0
 1053 00f9 00       		.byte	0
 1054 00fa 00       		.byte	0
 1055 00fb 00       		.byte	0
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 59


 1056 00fc 00       		.byte	0
 1057 00fd 00       		.byte	0
 1058 00fe 00       		.byte	0
 1059 00ff 00       		.byte	0
 1060              		.text
 1061              	.Letext0:
 1062              		.file 2 ".\\uC-CPU\\ARM-Cortex-M3\\GNU/cpu.h"
 1063              		.file 3 ".\\uC-CPU/cpu_core.h"
 1064              		.file 4 ".\\uC-LIB/lib_mem.h"
 1065              		.file 5 ".\\uC-LIB/lib_str.h"
 1066              		.section	.debug_info,"",%progbits
 1067              	.Ldebug_info0:
 1068 0000 17070000 		.4byte	0x717
 1069 0004 0400     		.2byte	0x4
 1070 0006 00000000 		.4byte	.Ldebug_abbrev0
 1071 000a 04       		.byte	0x4
 1072 000b 01       		.uleb128 0x1
 1073 000c 21030000 		.4byte	.LASF66
 1074 0010 0C       		.byte	0xc
 1075 0011 C2020000 		.4byte	.LASF67
 1076 0015 C3000000 		.4byte	.LASF68
 1077 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1078 001d 00000000 		.4byte	0
 1079 0021 00000000 		.4byte	.Ldebug_line0
 1080 0025 02       		.uleb128 0x2
 1081 0026 08       		.byte	0x8
 1082 0027 07       		.byte	0x7
 1083 0028 53000000 		.4byte	.LASF0
 1084 002c 03       		.uleb128 0x3
 1085 002d A8000000 		.4byte	.LASF3
 1086 0031 02       		.byte	0x2
 1087 0032 76       		.byte	0x76
 1088 0033 37000000 		.4byte	0x37
 1089 0037 02       		.uleb128 0x2
 1090 0038 01       		.byte	0x1
 1091 0039 08       		.byte	0x8
 1092 003a CA030000 		.4byte	.LASF1
 1093 003e 02       		.uleb128 0x2
 1094 003f 01       		.byte	0x1
 1095 0040 08       		.byte	0x8
 1096 0041 A7020000 		.4byte	.LASF2
 1097 0045 03       		.uleb128 0x3
 1098 0046 E4010000 		.4byte	.LASF4
 1099 004a 02       		.byte	0x2
 1100 004b 78       		.byte	0x78
 1101 004c 3E000000 		.4byte	0x3e
 1102 0050 02       		.uleb128 0x2
 1103 0051 01       		.byte	0x1
 1104 0052 06       		.byte	0x6
 1105 0053 9C000000 		.4byte	.LASF5
 1106 0057 03       		.uleb128 0x3
 1107 0058 50040000 		.4byte	.LASF6
 1108 005c 02       		.byte	0x2
 1109 005d 7A       		.byte	0x7a
 1110 005e 62000000 		.4byte	0x62
 1111 0062 02       		.uleb128 0x2
 1112 0063 02       		.byte	0x2
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 60


 1113 0064 07       		.byte	0x7
 1114 0065 EF010000 		.4byte	.LASF7
 1115 0069 02       		.uleb128 0x2
 1116 006a 02       		.byte	0x2
 1117 006b 05       		.byte	0x5
 1118 006c E0020000 		.4byte	.LASF8
 1119 0070 03       		.uleb128 0x3
 1120 0071 40000000 		.4byte	.LASF9
 1121 0075 02       		.byte	0x2
 1122 0076 7C       		.byte	0x7c
 1123 0077 7B000000 		.4byte	0x7b
 1124 007b 02       		.uleb128 0x2
 1125 007c 04       		.byte	0x4
 1126 007d 07       		.byte	0x7
 1127 007e A0010000 		.4byte	.LASF10
 1128 0082 04       		.uleb128 0x4
 1129 0083 04       		.byte	0x4
 1130 0084 05       		.byte	0x5
 1131 0085 696E7400 		.ascii	"int\000"
 1132 0089 03       		.uleb128 0x3
 1133 008a BF030000 		.4byte	.LASF11
 1134 008e 02       		.byte	0x2
 1135 008f 7E       		.byte	0x7e
 1136 0090 25000000 		.4byte	0x25
 1137 0094 02       		.uleb128 0x2
 1138 0095 08       		.byte	0x8
 1139 0096 05       		.byte	0x5
 1140 0097 8E000000 		.4byte	.LASF12
 1141 009b 02       		.uleb128 0x2
 1142 009c 04       		.byte	0x4
 1143 009d 04       		.byte	0x4
 1144 009e 7C020000 		.4byte	.LASF13
 1145 00a2 02       		.uleb128 0x2
 1146 00a3 08       		.byte	0x8
 1147 00a4 04       		.byte	0x4
 1148 00a5 36010000 		.4byte	.LASF14
 1149 00a9 03       		.uleb128 0x3
 1150 00aa 5E020000 		.4byte	.LASF15
 1151 00ae 02       		.byte	0x2
 1152 00af B5       		.byte	0xb5
 1153 00b0 70000000 		.4byte	0x70
 1154 00b4 03       		.uleb128 0x3
 1155 00b5 E2030000 		.4byte	.LASF16
 1156 00b9 02       		.byte	0x2
 1157 00ba BE       		.byte	0xbe
 1158 00bb 70000000 		.4byte	0x70
 1159 00bf 03       		.uleb128 0x3
 1160 00c0 35000000 		.4byte	.LASF17
 1161 00c4 02       		.byte	0x2
 1162 00c5 C7       		.byte	0xc7
 1163 00c6 A9000000 		.4byte	0xa9
 1164 00ca 05       		.uleb128 0x5
 1165 00cb 2F020000 		.4byte	.LASF18
 1166 00cf 02       		.byte	0x2
 1167 00d0 2901     		.2byte	0x129
 1168 00d2 70000000 		.4byte	0x70
 1169 00d6 02       		.uleb128 0x2
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 61


 1170 00d7 04       		.byte	0x4
 1171 00d8 05       		.byte	0x5
 1172 00d9 14010000 		.4byte	.LASF19
 1173 00dd 02       		.uleb128 0x2
 1174 00de 04       		.byte	0x4
 1175 00df 07       		.byte	0x7
 1176 00e0 D2010000 		.4byte	.LASF20
 1177 00e4 02       		.uleb128 0x2
 1178 00e5 08       		.byte	0x8
 1179 00e6 04       		.byte	0x4
 1180 00e7 70020000 		.4byte	.LASF21
 1181 00eb 02       		.uleb128 0x2
 1182 00ec 04       		.byte	0x4
 1183 00ed 07       		.byte	0x7
 1184 00ee 67020000 		.4byte	.LASF22
 1185 00f2 06       		.uleb128 0x6
 1186 00f3 24040000 		.4byte	.LASF69
 1187 00f7 02       		.byte	0x2
 1188 00f8 62000000 		.4byte	0x62
 1189 00fc 03       		.byte	0x3
 1190 00fd AF       		.byte	0xaf
 1191 00fe 1D010000 		.4byte	0x11d
 1192 0102 07       		.uleb128 0x7
 1193 0103 AD010000 		.4byte	.LASF23
 1194 0107 00       		.byte	0
 1195 0108 07       		.uleb128 0x7
 1196 0109 00000000 		.4byte	.LASF24
 1197 010d 0A       		.byte	0xa
 1198 010e 08       		.uleb128 0x8
 1199 010f 1D010000 		.4byte	.LASF25
 1200 0113 E803     		.2byte	0x3e8
 1201 0115 08       		.uleb128 0x8
 1202 0116 67010000 		.4byte	.LASF26
 1203 011a D007     		.2byte	0x7d0
 1204 011c 00       		.byte	0
 1205 011d 03       		.uleb128 0x3
 1206 011e 46010000 		.4byte	.LASF27
 1207 0122 03       		.byte	0x3
 1208 0123 B8       		.byte	0xb8
 1209 0124 F2000000 		.4byte	0xf2
 1210 0128 03       		.uleb128 0x3
 1211 0129 F6020000 		.4byte	.LASF28
 1212 012d 03       		.byte	0x3
 1213 012e C4       		.byte	0xc4
 1214 012f 70000000 		.4byte	0x70
 1215 0133 03       		.uleb128 0x3
 1216 0134 7E000000 		.4byte	.LASF29
 1217 0138 03       		.byte	0x3
 1218 0139 DD       		.byte	0xdd
 1219 013a 70000000 		.4byte	0x70
 1220 013e 09       		.uleb128 0x9
 1221 013f 6B040000 		.4byte	.LASF30
 1222 0143 01       		.byte	0x1
 1223 0144 5408     		.2byte	0x854
 1224 0146 00000000 		.4byte	.LFB19
 1225 014a 14000000 		.4byte	.LFE19-.LFB19
 1226 014e 01       		.uleb128 0x1
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 62


 1227 014f 9C       		.byte	0x9c
 1228 0150 5E010000 		.4byte	0x15e
 1229 0154 0A       		.uleb128 0xa
 1230 0155 0C000000 		.4byte	.LVL0
 1231 0159 AE060000 		.4byte	0x6ae
 1232 015d 00       		.byte	0
 1233 015e 0B       		.uleb128 0xb
 1234 015f 04040000 		.4byte	.LASF70
 1235 0163 01       		.byte	0x1
 1236 0164 E9       		.byte	0xe9
 1237 0165 00000000 		.4byte	.LFB2
 1238 0169 02000000 		.4byte	.LFE2-.LFB2
 1239 016d 01       		.uleb128 0x1
 1240 016e 9C       		.byte	0x9c
 1241 016f 0C       		.uleb128 0xc
 1242 0170 EA020000 		.4byte	.LASF32
 1243 0174 01       		.byte	0x1
 1244 0175 0701     		.2byte	0x107
 1245 0177 00000000 		.4byte	.LFB3
 1246 017b 1C000000 		.4byte	.LFE3-.LFB3
 1247 017f 01       		.uleb128 0x1
 1248 0180 9C       		.byte	0x9c
 1249 0181 CB010000 		.4byte	0x1cb
 1250 0185 0D       		.uleb128 0xd
 1251 0186 2F010000 		.4byte	.LASF37
 1252 018a 01       		.byte	0x1
 1253 018b 0901     		.2byte	0x109
 1254 018d CA000000 		.4byte	0xca
 1255 0191 00000000 		.4byte	.LLST0
 1256 0195 0A       		.uleb128 0xa
 1257 0196 06000000 		.4byte	.LVL2
 1258 019a BA060000 		.4byte	0x6ba
 1259 019e 0E       		.uleb128 0xe
 1260 019f 10000000 		.4byte	.LVL5
 1261 01a3 C6060000 		.4byte	0x6c6
 1262 01a7 BA010000 		.4byte	0x1ba
 1263 01ab 0F       		.uleb128 0xf
 1264 01ac 01       		.uleb128 0x1
 1265 01ad 50       		.byte	0x50
 1266 01ae 05       		.uleb128 0x5
 1267 01af 03       		.byte	0x3
 1268 01b0 00000000 		.4byte	CPU_Name
 1269 01b4 0F       		.uleb128 0xf
 1270 01b5 01       		.uleb128 0x1
 1271 01b6 51       		.byte	0x51
 1272 01b7 01       		.uleb128 0x1
 1273 01b8 40       		.byte	0x40
 1274 01b9 00       		.byte	0
 1275 01ba 10       		.uleb128 0x10
 1276 01bb 16000000 		.4byte	.LVL6
 1277 01bf D2060000 		.4byte	0x6d2
 1278 01c3 0F       		.uleb128 0xf
 1279 01c4 01       		.uleb128 0x1
 1280 01c5 50       		.byte	0x50
 1281 01c6 02       		.uleb128 0x2
 1282 01c7 74       		.byte	0x74
 1283 01c8 00       		.sleb128 0
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 63


 1284 01c9 00       		.byte	0
 1285 01ca 00       		.byte	0
 1286 01cb 09       		.uleb128 0x9
 1287 01cc 93010000 		.4byte	.LASF31
 1288 01d0 01       		.byte	0x1
 1289 01d1 2F08     		.2byte	0x82f
 1290 01d3 00000000 		.4byte	.LFB18
 1291 01d7 08000000 		.4byte	.LFE18-.LFB18
 1292 01db 01       		.uleb128 0x1
 1293 01dc 9C       		.byte	0x9c
 1294 01dd EB010000 		.4byte	0x1eb
 1295 01e1 0A       		.uleb128 0xa
 1296 01e2 06000000 		.4byte	.LVL8
 1297 01e6 6F010000 		.4byte	0x16f
 1298 01ea 00       		.byte	0
 1299 01eb 11       		.uleb128 0x11
 1300 01ec 62040000 		.4byte	.LASF33
 1301 01f0 01       		.byte	0x1
 1302 01f1 C1       		.byte	0xc1
 1303 01f2 00000000 		.4byte	.LFB1
 1304 01f6 0C000000 		.4byte	.LFE1-.LFB1
 1305 01fa 01       		.uleb128 0x1
 1306 01fb 9C       		.byte	0x9c
 1307 01fc 13020000 		.4byte	0x213
 1308 0200 0A       		.uleb128 0xa
 1309 0201 06000000 		.4byte	.LVL9
 1310 0205 3E010000 		.4byte	0x13e
 1311 0209 0A       		.uleb128 0xa
 1312 020a 0A000000 		.4byte	.LVL10
 1313 020e CB010000 		.4byte	0x1cb
 1314 0212 00       		.byte	0
 1315 0213 0C       		.uleb128 0xc
 1316 0214 D4020000 		.4byte	.LASF34
 1317 0218 01       		.byte	0x1
 1318 0219 3401     		.2byte	0x134
 1319 021b 00000000 		.4byte	.LFB4
 1320 021f 34000000 		.4byte	.LFE4-.LFB4
 1321 0223 01       		.uleb128 0x1
 1322 0224 9C       		.byte	0x9c
 1323 0225 9E020000 		.4byte	0x29e
 1324 0229 12       		.uleb128 0x12
 1325 022a 5B040000 		.4byte	.LASF35
 1326 022e 01       		.byte	0x1
 1327 022f 3401     		.2byte	0x134
 1328 0231 9E020000 		.4byte	0x29e
 1329 0235 2A000000 		.4byte	.LLST1
 1330 0239 12       		.uleb128 0x12
 1331 023a CC010000 		.4byte	.LASF36
 1332 023e 01       		.byte	0x1
 1333 023f 3501     		.2byte	0x135
 1334 0241 A4020000 		.4byte	0x2a4
 1335 0245 6F000000 		.4byte	.LLST2
 1336 0249 0D       		.uleb128 0xd
 1337 024a 2F010000 		.4byte	.LASF37
 1338 024e 01       		.byte	0x1
 1339 024f 3701     		.2byte	0x137
 1340 0251 CA000000 		.4byte	0xca
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 64


 1341 0255 B4000000 		.4byte	.LLST3
 1342 0259 0A       		.uleb128 0xa
 1343 025a 08000000 		.4byte	.LVL13
 1344 025e 5E010000 		.4byte	0x15e
 1345 0262 0A       		.uleb128 0xa
 1346 0263 18000000 		.4byte	.LVL14
 1347 0267 BA060000 		.4byte	0x6ba
 1348 026b 0E       		.uleb128 0xe
 1349 026c 24000000 		.4byte	.LVL17
 1350 0270 DE060000 		.4byte	0x6de
 1351 0274 8D020000 		.4byte	0x28d
 1352 0278 0F       		.uleb128 0xf
 1353 0279 01       		.uleb128 0x1
 1354 027a 50       		.byte	0x50
 1355 027b 02       		.uleb128 0x2
 1356 027c 74       		.byte	0x74
 1357 027d 00       		.sleb128 0
 1358 027e 0F       		.uleb128 0xf
 1359 027f 01       		.uleb128 0x1
 1360 0280 51       		.byte	0x51
 1361 0281 05       		.uleb128 0x5
 1362 0282 03       		.byte	0x3
 1363 0283 00000000 		.4byte	CPU_Name
 1364 0287 0F       		.uleb128 0xf
 1365 0288 01       		.uleb128 0x1
 1366 0289 52       		.byte	0x52
 1367 028a 01       		.uleb128 0x1
 1368 028b 40       		.byte	0x40
 1369 028c 00       		.byte	0
 1370 028d 10       		.uleb128 0x10
 1371 028e 2A000000 		.4byte	.LVL18
 1372 0292 D2060000 		.4byte	0x6d2
 1373 0296 0F       		.uleb128 0xf
 1374 0297 01       		.uleb128 0x1
 1375 0298 50       		.byte	0x50
 1376 0299 02       		.uleb128 0x2
 1377 029a 76       		.byte	0x76
 1378 029b 00       		.sleb128 0
 1379 029c 00       		.byte	0
 1380 029d 00       		.byte	0
 1381 029e 13       		.uleb128 0x13
 1382 029f 04       		.byte	0x4
 1383 02a0 2C000000 		.4byte	0x2c
 1384 02a4 13       		.uleb128 0x13
 1385 02a5 04       		.byte	0x4
 1386 02a6 1D010000 		.4byte	0x11d
 1387 02aa 0C       		.uleb128 0xc
 1388 02ab 2C040000 		.4byte	.LASF38
 1389 02af 01       		.byte	0x1
 1390 02b0 6A01     		.2byte	0x16a
 1391 02b2 00000000 		.4byte	.LFB5
 1392 02b6 48000000 		.4byte	.LFE5-.LFB5
 1393 02ba 01       		.uleb128 0x1
 1394 02bb 9C       		.byte	0x9c
 1395 02bc 58030000 		.4byte	0x358
 1396 02c0 12       		.uleb128 0x12
 1397 02c1 5B040000 		.4byte	.LASF35
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 65


 1398 02c5 01       		.byte	0x1
 1399 02c6 6A01     		.2byte	0x16a
 1400 02c8 58030000 		.4byte	0x358
 1401 02cc DE000000 		.4byte	.LLST4
 1402 02d0 12       		.uleb128 0x12
 1403 02d1 CC010000 		.4byte	.LASF36
 1404 02d5 01       		.byte	0x1
 1405 02d6 6B01     		.2byte	0x16b
 1406 02d8 A4020000 		.4byte	0x2a4
 1407 02dc 23010000 		.4byte	.LLST5
 1408 02e0 14       		.uleb128 0x14
 1409 02e1 6C656E00 		.ascii	"len\000"
 1410 02e5 01       		.byte	0x1
 1411 02e6 6D01     		.2byte	0x16d
 1412 02e8 BF000000 		.4byte	0xbf
 1413 02ec 68010000 		.4byte	.LLST6
 1414 02f0 0D       		.uleb128 0xd
 1415 02f1 2F010000 		.4byte	.LASF37
 1416 02f5 01       		.byte	0x1
 1417 02f6 6E01     		.2byte	0x16e
 1418 02f8 CA000000 		.4byte	0xca
 1419 02fc 86010000 		.4byte	.LLST7
 1420 0300 0A       		.uleb128 0xa
 1421 0301 08000000 		.4byte	.LVL22
 1422 0305 5E010000 		.4byte	0x15e
 1423 0309 0E       		.uleb128 0xe
 1424 030a 1A000000 		.4byte	.LVL24
 1425 030e EA060000 		.4byte	0x6ea
 1426 0312 1C030000 		.4byte	0x31c
 1427 0316 0F       		.uleb128 0xf
 1428 0317 01       		.uleb128 0x1
 1429 0318 51       		.byte	0x51
 1430 0319 01       		.uleb128 0x1
 1431 031a 40       		.byte	0x40
 1432 031b 00       		.byte	0
 1433 031c 0A       		.uleb128 0xa
 1434 031d 22000000 		.4byte	.LVL25
 1435 0321 BA060000 		.4byte	0x6ba
 1436 0325 0E       		.uleb128 0xe
 1437 0326 2E000000 		.4byte	.LVL28
 1438 032a DE060000 		.4byte	0x6de
 1439 032e 47030000 		.4byte	0x347
 1440 0332 0F       		.uleb128 0xf
 1441 0333 01       		.uleb128 0x1
 1442 0334 50       		.byte	0x50
 1443 0335 05       		.uleb128 0x5
 1444 0336 03       		.byte	0x3
 1445 0337 00000000 		.4byte	CPU_Name
 1446 033b 0F       		.uleb128 0xf
 1447 033c 01       		.uleb128 0x1
 1448 033d 51       		.byte	0x51
 1449 033e 02       		.uleb128 0x2
 1450 033f 74       		.byte	0x74
 1451 0340 00       		.sleb128 0
 1452 0341 0F       		.uleb128 0xf
 1453 0342 01       		.uleb128 0x1
 1454 0343 52       		.byte	0x52
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 66


 1455 0344 01       		.uleb128 0x1
 1456 0345 40       		.byte	0x40
 1457 0346 00       		.byte	0
 1458 0347 10       		.uleb128 0x10
 1459 0348 34000000 		.4byte	.LVL29
 1460 034c D2060000 		.4byte	0x6d2
 1461 0350 0F       		.uleb128 0xf
 1462 0351 01       		.uleb128 0x1
 1463 0352 50       		.byte	0x50
 1464 0353 02       		.uleb128 0x2
 1465 0354 76       		.byte	0x76
 1466 0355 00       		.sleb128 0
 1467 0356 00       		.byte	0
 1468 0357 00       		.byte	0
 1469 0358 13       		.uleb128 0x13
 1470 0359 04       		.byte	0x4
 1471 035a 5E030000 		.4byte	0x35e
 1472 035e 15       		.uleb128 0x15
 1473 035f 2C000000 		.4byte	0x2c
 1474 0363 16       		.uleb128 0x16
 1475 0364 F7030000 		.4byte	.LASF39
 1476 0368 01       		.byte	0x1
 1477 0369 C101     		.2byte	0x1c1
 1478 036b 28010000 		.4byte	0x128
 1479 036f 00000000 		.4byte	.LFB6
 1480 0373 08000000 		.4byte	.LFE6-.LFB6
 1481 0377 01       		.uleb128 0x1
 1482 0378 9C       		.byte	0x9c
 1483 0379 94030000 		.4byte	0x394
 1484 037d 17       		.uleb128 0x17
 1485 037e 747300   		.ascii	"ts\000"
 1486 0381 01       		.byte	0x1
 1487 0382 C301     		.2byte	0x1c3
 1488 0384 28010000 		.4byte	0x128
 1489 0388 01       		.uleb128 0x1
 1490 0389 50       		.byte	0x50
 1491 038a 0A       		.uleb128 0xa
 1492 038b 06000000 		.4byte	.LVL32
 1493 038f F6060000 		.4byte	0x6f6
 1494 0393 00       		.byte	0
 1495 0394 18       		.uleb128 0x18
 1496 0395 13030000 		.4byte	.LASF71
 1497 0399 01       		.byte	0x1
 1498 039a 4A02     		.2byte	0x24a
 1499 039c 00000000 		.4byte	.LFB7
 1500 03a0 02000000 		.4byte	.LFE7-.LFB7
 1501 03a4 01       		.uleb128 0x1
 1502 03a5 9C       		.byte	0x9c
 1503 03a6 16       		.uleb128 0x16
 1504 03a7 BA010000 		.4byte	.LASF40
 1505 03ab 01       		.byte	0x1
 1506 03ac 7502     		.2byte	0x275
 1507 03ae 33010000 		.4byte	0x133
 1508 03b2 00000000 		.4byte	.LFB8
 1509 03b6 20000000 		.4byte	.LFE8-.LFB8
 1510 03ba 01       		.uleb128 0x1
 1511 03bb 9C       		.byte	0x9c
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 67


 1512 03bc E8030000 		.4byte	0x3e8
 1513 03c0 12       		.uleb128 0x12
 1514 03c1 CC010000 		.4byte	.LASF36
 1515 03c5 01       		.byte	0x1
 1516 03c6 7502     		.2byte	0x275
 1517 03c8 A4020000 		.4byte	0x2a4
 1518 03cc BC010000 		.4byte	.LLST8
 1519 03d0 19       		.uleb128 0x19
 1520 03d1 14020000 		.4byte	.LASF41
 1521 03d5 01       		.byte	0x1
 1522 03d6 7702     		.2byte	0x277
 1523 03d8 33010000 		.4byte	0x133
 1524 03dc 01       		.uleb128 0x1
 1525 03dd 50       		.byte	0x50
 1526 03de 0A       		.uleb128 0xa
 1527 03df 08000000 		.4byte	.LVL34
 1528 03e3 5E010000 		.4byte	0x15e
 1529 03e7 00       		.byte	0
 1530 03e8 0C       		.uleb128 0xc
 1531 03e9 B1000000 		.4byte	.LASF42
 1532 03ed 01       		.byte	0x1
 1533 03ee A902     		.2byte	0x2a9
 1534 03f0 00000000 		.4byte	.LFB9
 1535 03f4 0C000000 		.4byte	.LFE9-.LFB9
 1536 03f8 01       		.uleb128 0x1
 1537 03f9 9C       		.byte	0x9c
 1538 03fa 0D040000 		.4byte	0x40d
 1539 03fe 1A       		.uleb128 0x1a
 1540 03ff 14020000 		.4byte	.LASF41
 1541 0403 01       		.byte	0x1
 1542 0404 A902     		.2byte	0x2a9
 1543 0406 33010000 		.4byte	0x133
 1544 040a 01       		.uleb128 0x1
 1545 040b 50       		.byte	0x50
 1546 040c 00       		.byte	0
 1547 040d 16       		.uleb128 0x16
 1548 040e 94020000 		.4byte	.LASF43
 1549 0412 01       		.byte	0x1
 1550 0413 BA04     		.2byte	0x4ba
 1551 0415 B4000000 		.4byte	0xb4
 1552 0419 00000000 		.4byte	.LFB10
 1553 041d 0A000000 		.4byte	.LFE10-.LFB10
 1554 0421 01       		.uleb128 0x1
 1555 0422 9C       		.byte	0x9c
 1556 0423 51040000 		.4byte	0x451
 1557 0427 1B       		.uleb128 0x1b
 1558 0428 76616C00 		.ascii	"val\000"
 1559 042c 01       		.byte	0x1
 1560 042d BA04     		.2byte	0x4ba
 1561 042f 45000000 		.4byte	0x45
 1562 0433 01020000 		.4byte	.LLST9
 1563 0437 0D       		.uleb128 0xd
 1564 0438 77040000 		.4byte	.LASF44
 1565 043c 01       		.byte	0x1
 1566 043d C004     		.2byte	0x4c0
 1567 043f B4000000 		.4byte	0xb4
 1568 0443 22020000 		.4byte	.LLST10
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 68


 1569 0447 0A       		.uleb128 0xa
 1570 0448 06000000 		.4byte	.LVL39
 1571 044c 02070000 		.4byte	0x702
 1572 0450 00       		.byte	0
 1573 0451 16       		.uleb128 0x16
 1574 0452 CF030000 		.4byte	.LASF45
 1575 0456 01       		.byte	0x1
 1576 0457 FE04     		.2byte	0x4fe
 1577 0459 B4000000 		.4byte	0xb4
 1578 045d 00000000 		.4byte	.LFB11
 1579 0461 0A000000 		.4byte	.LFE11-.LFB11
 1580 0465 01       		.uleb128 0x1
 1581 0466 9C       		.byte	0x9c
 1582 0467 95040000 		.4byte	0x495
 1583 046b 1B       		.uleb128 0x1b
 1584 046c 76616C00 		.ascii	"val\000"
 1585 0470 01       		.byte	0x1
 1586 0471 FE04     		.2byte	0x4fe
 1587 0473 57000000 		.4byte	0x57
 1588 0477 42020000 		.4byte	.LLST11
 1589 047b 0D       		.uleb128 0xd
 1590 047c 77040000 		.4byte	.LASF44
 1591 0480 01       		.byte	0x1
 1592 0481 0405     		.2byte	0x504
 1593 0483 B4000000 		.4byte	0xb4
 1594 0487 63020000 		.4byte	.LLST12
 1595 048b 0A       		.uleb128 0xa
 1596 048c 06000000 		.4byte	.LVL42
 1597 0490 02070000 		.4byte	0x702
 1598 0494 00       		.byte	0
 1599 0495 16       		.uleb128 0x16
 1600 0496 22000000 		.4byte	.LASF46
 1601 049a 01       		.byte	0x1
 1602 049b 4805     		.2byte	0x548
 1603 049d B4000000 		.4byte	0xb4
 1604 04a1 00000000 		.4byte	.LFB12
 1605 04a5 08000000 		.4byte	.LFE12-.LFB12
 1606 04a9 01       		.uleb128 0x1
 1607 04aa 9C       		.byte	0x9c
 1608 04ab DF040000 		.4byte	0x4df
 1609 04af 1B       		.uleb128 0x1b
 1610 04b0 76616C00 		.ascii	"val\000"
 1611 04b4 01       		.byte	0x1
 1612 04b5 4805     		.2byte	0x548
 1613 04b7 70000000 		.4byte	0x70
 1614 04bb 83020000 		.4byte	.LLST13
 1615 04bf 19       		.uleb128 0x19
 1616 04c0 77040000 		.4byte	.LASF44
 1617 04c4 01       		.byte	0x1
 1618 04c5 4E05     		.2byte	0x54e
 1619 04c7 B4000000 		.4byte	0xb4
 1620 04cb 01       		.uleb128 0x1
 1621 04cc 50       		.byte	0x50
 1622 04cd 10       		.uleb128 0x10
 1623 04ce 06000000 		.4byte	.LVL45
 1624 04d2 02070000 		.4byte	0x702
 1625 04d6 0F       		.uleb128 0xf
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 69


 1626 04d7 01       		.uleb128 0x1
 1627 04d8 50       		.byte	0x50
 1628 04d9 03       		.uleb128 0x3
 1629 04da F3       		.byte	0xf3
 1630 04db 01       		.uleb128 0x1
 1631 04dc 50       		.byte	0x50
 1632 04dd 00       		.byte	0
 1633 04de 00       		.byte	0
 1634 04df 16       		.uleb128 0x16
 1635 04e0 1C020000 		.4byte	.LASF47
 1636 04e4 01       		.byte	0x1
 1637 04e5 A005     		.2byte	0x5a0
 1638 04e7 B4000000 		.4byte	0xb4
 1639 04eb 00000000 		.4byte	.LFB13
 1640 04ef A0000000 		.4byte	.LFE13-.LFB13
 1641 04f3 01       		.uleb128 0x1
 1642 04f4 9C       		.byte	0x9c
 1643 04f5 29050000 		.4byte	0x529
 1644 04f9 1B       		.uleb128 0x1b
 1645 04fa 76616C00 		.ascii	"val\000"
 1646 04fe 01       		.byte	0x1
 1647 04ff A005     		.2byte	0x5a0
 1648 0501 89000000 		.4byte	0x89
 1649 0505 A4020000 		.4byte	.LLST14
 1650 0509 14       		.uleb128 0x14
 1651 050a 697800   		.ascii	"ix\000"
 1652 050d 01       		.byte	0x1
 1653 050e A405     		.2byte	0x5a4
 1654 0510 B4000000 		.4byte	0xb4
 1655 0514 AC030000 		.4byte	.LLST15
 1656 0518 0D       		.uleb128 0xd
 1657 0519 77040000 		.4byte	.LASF44
 1658 051d 01       		.byte	0x1
 1659 051e A605     		.2byte	0x5a6
 1660 0520 B4000000 		.4byte	0xb4
 1661 0524 F6030000 		.4byte	.LLST16
 1662 0528 00       		.byte	0
 1663 0529 16       		.uleb128 0x16
 1664 052a 7F010000 		.4byte	.LASF48
 1665 052e 01       		.byte	0x1
 1666 052f BA06     		.2byte	0x6ba
 1667 0531 B4000000 		.4byte	0xb4
 1668 0535 00000000 		.4byte	.LFB14
 1669 0539 0E000000 		.4byte	.LFE14-.LFB14
 1670 053d 01       		.uleb128 0x1
 1671 053e 9C       		.byte	0x9c
 1672 053f 69050000 		.4byte	0x569
 1673 0543 1B       		.uleb128 0x1b
 1674 0544 76616C00 		.ascii	"val\000"
 1675 0548 01       		.byte	0x1
 1676 0549 BA06     		.2byte	0x6ba
 1677 054b 45000000 		.4byte	0x45
 1678 054f 56040000 		.4byte	.LLST17
 1679 0553 1C       		.uleb128 0x1c
 1680 0554 AF030000 		.4byte	.LASF50
 1681 0558 01       		.byte	0x1
 1682 0559 C106     		.2byte	0x6c1
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 70


 1683 055b B4000000 		.4byte	0xb4
 1684 055f 0A       		.uleb128 0xa
 1685 0560 08000000 		.4byte	.LVL76
 1686 0564 0E070000 		.4byte	0x70e
 1687 0568 00       		.byte	0
 1688 0569 16       		.uleb128 0x16
 1689 056a 36020000 		.4byte	.LASF49
 1690 056e 01       		.byte	0x1
 1691 056f 2307     		.2byte	0x723
 1692 0571 B4000000 		.4byte	0xb4
 1693 0575 00000000 		.4byte	.LFB15
 1694 0579 0E000000 		.4byte	.LFE15-.LFB15
 1695 057d 01       		.uleb128 0x1
 1696 057e 9C       		.byte	0x9c
 1697 057f A9050000 		.4byte	0x5a9
 1698 0583 1B       		.uleb128 0x1b
 1699 0584 76616C00 		.ascii	"val\000"
 1700 0588 01       		.byte	0x1
 1701 0589 2307     		.2byte	0x723
 1702 058b 57000000 		.4byte	0x57
 1703 058f 90040000 		.4byte	.LLST18
 1704 0593 1C       		.uleb128 0x1c
 1705 0594 AF030000 		.4byte	.LASF50
 1706 0598 01       		.byte	0x1
 1707 0599 2A07     		.2byte	0x72a
 1708 059b B4000000 		.4byte	0xb4
 1709 059f 0A       		.uleb128 0xa
 1710 05a0 08000000 		.4byte	.LVL80
 1711 05a4 0E070000 		.4byte	0x70e
 1712 05a8 00       		.byte	0
 1713 05a9 16       		.uleb128 0x16
 1714 05aa FF020000 		.4byte	.LASF51
 1715 05ae 01       		.byte	0x1
 1716 05af 8C07     		.2byte	0x78c
 1717 05b1 B4000000 		.4byte	0xb4
 1718 05b5 00000000 		.4byte	.LFB16
 1719 05b9 0E000000 		.4byte	.LFE16-.LFB16
 1720 05bd 01       		.uleb128 0x1
 1721 05be 9C       		.byte	0x9c
 1722 05bf F1050000 		.4byte	0x5f1
 1723 05c3 1B       		.uleb128 0x1b
 1724 05c4 76616C00 		.ascii	"val\000"
 1725 05c8 01       		.byte	0x1
 1726 05c9 8C07     		.2byte	0x78c
 1727 05cb 70000000 		.4byte	0x70
 1728 05cf CA040000 		.4byte	.LLST19
 1729 05d3 1C       		.uleb128 0x1c
 1730 05d4 AF030000 		.4byte	.LASF50
 1731 05d8 01       		.byte	0x1
 1732 05d9 9307     		.2byte	0x793
 1733 05db B4000000 		.4byte	0xb4
 1734 05df 10       		.uleb128 0x10
 1735 05e0 08000000 		.4byte	.LVL84
 1736 05e4 0E070000 		.4byte	0x70e
 1737 05e8 0F       		.uleb128 0xf
 1738 05e9 01       		.uleb128 0x1
 1739 05ea 50       		.byte	0x50
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 71


 1740 05eb 03       		.uleb128 0x3
 1741 05ec F3       		.byte	0xf3
 1742 05ed 01       		.uleb128 0x1
 1743 05ee 50       		.byte	0x50
 1744 05ef 00       		.byte	0
 1745 05f0 00       		.byte	0
 1746 05f1 16       		.uleb128 0x16
 1747 05f2 6A000000 		.4byte	.LASF52
 1748 05f6 01       		.byte	0x1
 1749 05f7 F507     		.2byte	0x7f5
 1750 05f9 B4000000 		.4byte	0xb4
 1751 05fd 00000000 		.4byte	.LFB17
 1752 0601 20000000 		.4byte	.LFE17-.LFB17
 1753 0605 01       		.uleb128 0x1
 1754 0606 9C       		.byte	0x9c
 1755 0607 51060000 		.4byte	0x651
 1756 060b 1B       		.uleb128 0x1b
 1757 060c 76616C00 		.ascii	"val\000"
 1758 0610 01       		.byte	0x1
 1759 0611 F507     		.2byte	0x7f5
 1760 0613 89000000 		.4byte	0x89
 1761 0617 04050000 		.4byte	.LLST20
 1762 061b 0D       		.uleb128 0xd
 1763 061c 38040000 		.4byte	.LASF53
 1764 0620 01       		.byte	0x1
 1765 0621 F907     		.2byte	0x7f9
 1766 0623 89000000 		.4byte	0x89
 1767 0627 4C050000 		.4byte	.LLST21
 1768 062b 0D       		.uleb128 0xd
 1769 062c 77040000 		.4byte	.LASF44
 1770 0630 01       		.byte	0x1
 1771 0631 FA07     		.2byte	0x7fa
 1772 0633 B4000000 		.4byte	0xb4
 1773 0637 7A050000 		.4byte	.LLST22
 1774 063b 1C       		.uleb128 0x1c
 1775 063c AF030000 		.4byte	.LASF50
 1776 0640 01       		.byte	0x1
 1777 0641 FC07     		.2byte	0x7fc
 1778 0643 B4000000 		.4byte	0xb4
 1779 0647 0A       		.uleb128 0xa
 1780 0648 16000000 		.4byte	.LVL90
 1781 064c DF040000 		.4byte	0x4df
 1782 0650 00       		.byte	0
 1783 0651 1D       		.uleb128 0x1d
 1784 0652 61060000 		.4byte	0x661
 1785 0656 61060000 		.4byte	0x661
 1786 065a 1E       		.uleb128 0x1e
 1787 065b EB000000 		.4byte	0xeb
 1788 065f FF       		.byte	0xff
 1789 0660 00       		.byte	0
 1790 0661 15       		.uleb128 0x15
 1791 0662 45000000 		.4byte	0x45
 1792 0666 1F       		.uleb128 0x1f
 1793 0667 4A020000 		.4byte	.LASF54
 1794 066b 01       		.byte	0x1
 1795 066c 60       		.byte	0x60
 1796 066d 77060000 		.4byte	0x677
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 72


 1797 0671 05       		.uleb128 0x5
 1798 0672 03       		.byte	0x3
 1799 0673 00000000 		.4byte	CPU_CntLeadZerosTbl
 1800 0677 15       		.uleb128 0x15
 1801 0678 51060000 		.4byte	0x651
 1802 067c 1D       		.uleb128 0x1d
 1803 067d 2C000000 		.4byte	0x2c
 1804 0681 8C060000 		.4byte	0x68c
 1805 0685 1E       		.uleb128 0x1e
 1806 0686 EB000000 		.4byte	0xeb
 1807 068a 0F       		.byte	0xf
 1808 068b 00       		.byte	0
 1809 068c 20       		.uleb128 0x20
 1810 068d 3D010000 		.4byte	.LASF55
 1811 0691 03       		.byte	0x3
 1812 0692 E7       		.byte	0xe7
 1813 0693 7C060000 		.4byte	0x67c
 1814 0697 05       		.uleb128 0x5
 1815 0698 03       		.byte	0x3
 1816 0699 00000000 		.4byte	CPU_Name
 1817 069d 20       		.uleb128 0x20
 1818 069e 82020000 		.4byte	.LASF56
 1819 06a2 03       		.byte	0x3
 1820 06a3 F8       		.byte	0xf8
 1821 06a4 33010000 		.4byte	0x133
 1822 06a8 05       		.uleb128 0x5
 1823 06a9 03       		.byte	0x3
 1824 06aa 00000000 		.4byte	CPU_TS_TmrFreq_Hz
 1825 06ae 21       		.uleb128 0x21
 1826 06af 4E010000 		.4byte	.LASF57
 1827 06b3 4E010000 		.4byte	.LASF57
 1828 06b7 03       		.byte	0x3
 1829 06b8 9402     		.2byte	0x294
 1830 06ba 21       		.uleb128 0x21
 1831 06bb EB030000 		.4byte	.LASF58
 1832 06bf EB030000 		.4byte	.LASF58
 1833 06c3 02       		.byte	0x2
 1834 06c4 7C01     		.2byte	0x17c
 1835 06c6 21       		.uleb128 0x21
 1836 06c7 4B000000 		.4byte	.LASF59
 1837 06cb 4B000000 		.4byte	.LASF59
 1838 06cf 04       		.byte	0x4
 1839 06d0 9204     		.2byte	0x492
 1840 06d2 21       		.uleb128 0x21
 1841 06d3 15040000 		.4byte	.LASF60
 1842 06d7 15040000 		.4byte	.LASF60
 1843 06db 02       		.byte	0x2
 1844 06dc 7D01     		.2byte	0x17d
 1845 06de 21       		.uleb128 0x21
 1846 06df 45040000 		.4byte	.LASF61
 1847 06e3 45040000 		.4byte	.LASF61
 1848 06e7 05       		.byte	0x5
 1849 06e8 2001     		.2byte	0x120
 1850 06ea 21       		.uleb128 0x21
 1851 06eb 5D010000 		.4byte	.LASF62
 1852 06ef 5D010000 		.4byte	.LASF62
 1853 06f3 05       		.byte	0x5
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 73


 1854 06f4 1801     		.2byte	0x118
 1855 06f6 21       		.uleb128 0x21
 1856 06f7 B5020000 		.4byte	.LASF63
 1857 06fb B5020000 		.4byte	.LASF63
 1858 06ff 03       		.byte	0x3
 1859 0700 EC02     		.2byte	0x2ec
 1860 0702 21       		.uleb128 0x21
 1861 0703 11000000 		.4byte	.LASF64
 1862 0707 11000000 		.4byte	.LASF64
 1863 070b 03       		.byte	0x3
 1864 070c 3702     		.2byte	0x237
 1865 070e 21       		.uleb128 0x21
 1866 070f 02020000 		.4byte	.LASF65
 1867 0713 02020000 		.4byte	.LASF65
 1868 0717 03       		.byte	0x3
 1869 0718 4702     		.2byte	0x247
 1870 071a 00       		.byte	0
 1871              		.section	.debug_abbrev,"",%progbits
 1872              	.Ldebug_abbrev0:
 1873 0000 01       		.uleb128 0x1
 1874 0001 11       		.uleb128 0x11
 1875 0002 01       		.byte	0x1
 1876 0003 25       		.uleb128 0x25
 1877 0004 0E       		.uleb128 0xe
 1878 0005 13       		.uleb128 0x13
 1879 0006 0B       		.uleb128 0xb
 1880 0007 03       		.uleb128 0x3
 1881 0008 0E       		.uleb128 0xe
 1882 0009 1B       		.uleb128 0x1b
 1883 000a 0E       		.uleb128 0xe
 1884 000b 55       		.uleb128 0x55
 1885 000c 17       		.uleb128 0x17
 1886 000d 11       		.uleb128 0x11
 1887 000e 01       		.uleb128 0x1
 1888 000f 10       		.uleb128 0x10
 1889 0010 17       		.uleb128 0x17
 1890 0011 00       		.byte	0
 1891 0012 00       		.byte	0
 1892 0013 02       		.uleb128 0x2
 1893 0014 24       		.uleb128 0x24
 1894 0015 00       		.byte	0
 1895 0016 0B       		.uleb128 0xb
 1896 0017 0B       		.uleb128 0xb
 1897 0018 3E       		.uleb128 0x3e
 1898 0019 0B       		.uleb128 0xb
 1899 001a 03       		.uleb128 0x3
 1900 001b 0E       		.uleb128 0xe
 1901 001c 00       		.byte	0
 1902 001d 00       		.byte	0
 1903 001e 03       		.uleb128 0x3
 1904 001f 16       		.uleb128 0x16
 1905 0020 00       		.byte	0
 1906 0021 03       		.uleb128 0x3
 1907 0022 0E       		.uleb128 0xe
 1908 0023 3A       		.uleb128 0x3a
 1909 0024 0B       		.uleb128 0xb
 1910 0025 3B       		.uleb128 0x3b
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 74


 1911 0026 0B       		.uleb128 0xb
 1912 0027 49       		.uleb128 0x49
 1913 0028 13       		.uleb128 0x13
 1914 0029 00       		.byte	0
 1915 002a 00       		.byte	0
 1916 002b 04       		.uleb128 0x4
 1917 002c 24       		.uleb128 0x24
 1918 002d 00       		.byte	0
 1919 002e 0B       		.uleb128 0xb
 1920 002f 0B       		.uleb128 0xb
 1921 0030 3E       		.uleb128 0x3e
 1922 0031 0B       		.uleb128 0xb
 1923 0032 03       		.uleb128 0x3
 1924 0033 08       		.uleb128 0x8
 1925 0034 00       		.byte	0
 1926 0035 00       		.byte	0
 1927 0036 05       		.uleb128 0x5
 1928 0037 16       		.uleb128 0x16
 1929 0038 00       		.byte	0
 1930 0039 03       		.uleb128 0x3
 1931 003a 0E       		.uleb128 0xe
 1932 003b 3A       		.uleb128 0x3a
 1933 003c 0B       		.uleb128 0xb
 1934 003d 3B       		.uleb128 0x3b
 1935 003e 05       		.uleb128 0x5
 1936 003f 49       		.uleb128 0x49
 1937 0040 13       		.uleb128 0x13
 1938 0041 00       		.byte	0
 1939 0042 00       		.byte	0
 1940 0043 06       		.uleb128 0x6
 1941 0044 04       		.uleb128 0x4
 1942 0045 01       		.byte	0x1
 1943 0046 03       		.uleb128 0x3
 1944 0047 0E       		.uleb128 0xe
 1945 0048 0B       		.uleb128 0xb
 1946 0049 0B       		.uleb128 0xb
 1947 004a 49       		.uleb128 0x49
 1948 004b 13       		.uleb128 0x13
 1949 004c 3A       		.uleb128 0x3a
 1950 004d 0B       		.uleb128 0xb
 1951 004e 3B       		.uleb128 0x3b
 1952 004f 0B       		.uleb128 0xb
 1953 0050 01       		.uleb128 0x1
 1954 0051 13       		.uleb128 0x13
 1955 0052 00       		.byte	0
 1956 0053 00       		.byte	0
 1957 0054 07       		.uleb128 0x7
 1958 0055 28       		.uleb128 0x28
 1959 0056 00       		.byte	0
 1960 0057 03       		.uleb128 0x3
 1961 0058 0E       		.uleb128 0xe
 1962 0059 1C       		.uleb128 0x1c
 1963 005a 0B       		.uleb128 0xb
 1964 005b 00       		.byte	0
 1965 005c 00       		.byte	0
 1966 005d 08       		.uleb128 0x8
 1967 005e 28       		.uleb128 0x28
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 75


 1968 005f 00       		.byte	0
 1969 0060 03       		.uleb128 0x3
 1970 0061 0E       		.uleb128 0xe
 1971 0062 1C       		.uleb128 0x1c
 1972 0063 05       		.uleb128 0x5
 1973 0064 00       		.byte	0
 1974 0065 00       		.byte	0
 1975 0066 09       		.uleb128 0x9
 1976 0067 2E       		.uleb128 0x2e
 1977 0068 01       		.byte	0x1
 1978 0069 03       		.uleb128 0x3
 1979 006a 0E       		.uleb128 0xe
 1980 006b 3A       		.uleb128 0x3a
 1981 006c 0B       		.uleb128 0xb
 1982 006d 3B       		.uleb128 0x3b
 1983 006e 05       		.uleb128 0x5
 1984 006f 27       		.uleb128 0x27
 1985 0070 19       		.uleb128 0x19
 1986 0071 11       		.uleb128 0x11
 1987 0072 01       		.uleb128 0x1
 1988 0073 12       		.uleb128 0x12
 1989 0074 06       		.uleb128 0x6
 1990 0075 40       		.uleb128 0x40
 1991 0076 18       		.uleb128 0x18
 1992 0077 9742     		.uleb128 0x2117
 1993 0079 19       		.uleb128 0x19
 1994 007a 01       		.uleb128 0x1
 1995 007b 13       		.uleb128 0x13
 1996 007c 00       		.byte	0
 1997 007d 00       		.byte	0
 1998 007e 0A       		.uleb128 0xa
 1999 007f 898201   		.uleb128 0x4109
 2000 0082 00       		.byte	0
 2001 0083 11       		.uleb128 0x11
 2002 0084 01       		.uleb128 0x1
 2003 0085 31       		.uleb128 0x31
 2004 0086 13       		.uleb128 0x13
 2005 0087 00       		.byte	0
 2006 0088 00       		.byte	0
 2007 0089 0B       		.uleb128 0xb
 2008 008a 2E       		.uleb128 0x2e
 2009 008b 00       		.byte	0
 2010 008c 3F       		.uleb128 0x3f
 2011 008d 19       		.uleb128 0x19
 2012 008e 03       		.uleb128 0x3
 2013 008f 0E       		.uleb128 0xe
 2014 0090 3A       		.uleb128 0x3a
 2015 0091 0B       		.uleb128 0xb
 2016 0092 3B       		.uleb128 0x3b
 2017 0093 0B       		.uleb128 0xb
 2018 0094 27       		.uleb128 0x27
 2019 0095 19       		.uleb128 0x19
 2020 0096 8701     		.uleb128 0x87
 2021 0098 19       		.uleb128 0x19
 2022 0099 11       		.uleb128 0x11
 2023 009a 01       		.uleb128 0x1
 2024 009b 12       		.uleb128 0x12
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 76


 2025 009c 06       		.uleb128 0x6
 2026 009d 40       		.uleb128 0x40
 2027 009e 18       		.uleb128 0x18
 2028 009f 9742     		.uleb128 0x2117
 2029 00a1 19       		.uleb128 0x19
 2030 00a2 00       		.byte	0
 2031 00a3 00       		.byte	0
 2032 00a4 0C       		.uleb128 0xc
 2033 00a5 2E       		.uleb128 0x2e
 2034 00a6 01       		.byte	0x1
 2035 00a7 3F       		.uleb128 0x3f
 2036 00a8 19       		.uleb128 0x19
 2037 00a9 03       		.uleb128 0x3
 2038 00aa 0E       		.uleb128 0xe
 2039 00ab 3A       		.uleb128 0x3a
 2040 00ac 0B       		.uleb128 0xb
 2041 00ad 3B       		.uleb128 0x3b
 2042 00ae 05       		.uleb128 0x5
 2043 00af 27       		.uleb128 0x27
 2044 00b0 19       		.uleb128 0x19
 2045 00b1 11       		.uleb128 0x11
 2046 00b2 01       		.uleb128 0x1
 2047 00b3 12       		.uleb128 0x12
 2048 00b4 06       		.uleb128 0x6
 2049 00b5 40       		.uleb128 0x40
 2050 00b6 18       		.uleb128 0x18
 2051 00b7 9742     		.uleb128 0x2117
 2052 00b9 19       		.uleb128 0x19
 2053 00ba 01       		.uleb128 0x1
 2054 00bb 13       		.uleb128 0x13
 2055 00bc 00       		.byte	0
 2056 00bd 00       		.byte	0
 2057 00be 0D       		.uleb128 0xd
 2058 00bf 34       		.uleb128 0x34
 2059 00c0 00       		.byte	0
 2060 00c1 03       		.uleb128 0x3
 2061 00c2 0E       		.uleb128 0xe
 2062 00c3 3A       		.uleb128 0x3a
 2063 00c4 0B       		.uleb128 0xb
 2064 00c5 3B       		.uleb128 0x3b
 2065 00c6 05       		.uleb128 0x5
 2066 00c7 49       		.uleb128 0x49
 2067 00c8 13       		.uleb128 0x13
 2068 00c9 02       		.uleb128 0x2
 2069 00ca 17       		.uleb128 0x17
 2070 00cb 00       		.byte	0
 2071 00cc 00       		.byte	0
 2072 00cd 0E       		.uleb128 0xe
 2073 00ce 898201   		.uleb128 0x4109
 2074 00d1 01       		.byte	0x1
 2075 00d2 11       		.uleb128 0x11
 2076 00d3 01       		.uleb128 0x1
 2077 00d4 31       		.uleb128 0x31
 2078 00d5 13       		.uleb128 0x13
 2079 00d6 01       		.uleb128 0x1
 2080 00d7 13       		.uleb128 0x13
 2081 00d8 00       		.byte	0
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 77


 2082 00d9 00       		.byte	0
 2083 00da 0F       		.uleb128 0xf
 2084 00db 8A8201   		.uleb128 0x410a
 2085 00de 00       		.byte	0
 2086 00df 02       		.uleb128 0x2
 2087 00e0 18       		.uleb128 0x18
 2088 00e1 9142     		.uleb128 0x2111
 2089 00e3 18       		.uleb128 0x18
 2090 00e4 00       		.byte	0
 2091 00e5 00       		.byte	0
 2092 00e6 10       		.uleb128 0x10
 2093 00e7 898201   		.uleb128 0x4109
 2094 00ea 01       		.byte	0x1
 2095 00eb 11       		.uleb128 0x11
 2096 00ec 01       		.uleb128 0x1
 2097 00ed 31       		.uleb128 0x31
 2098 00ee 13       		.uleb128 0x13
 2099 00ef 00       		.byte	0
 2100 00f0 00       		.byte	0
 2101 00f1 11       		.uleb128 0x11
 2102 00f2 2E       		.uleb128 0x2e
 2103 00f3 01       		.byte	0x1
 2104 00f4 3F       		.uleb128 0x3f
 2105 00f5 19       		.uleb128 0x19
 2106 00f6 03       		.uleb128 0x3
 2107 00f7 0E       		.uleb128 0xe
 2108 00f8 3A       		.uleb128 0x3a
 2109 00f9 0B       		.uleb128 0xb
 2110 00fa 3B       		.uleb128 0x3b
 2111 00fb 0B       		.uleb128 0xb
 2112 00fc 27       		.uleb128 0x27
 2113 00fd 19       		.uleb128 0x19
 2114 00fe 11       		.uleb128 0x11
 2115 00ff 01       		.uleb128 0x1
 2116 0100 12       		.uleb128 0x12
 2117 0101 06       		.uleb128 0x6
 2118 0102 40       		.uleb128 0x40
 2119 0103 18       		.uleb128 0x18
 2120 0104 9742     		.uleb128 0x2117
 2121 0106 19       		.uleb128 0x19
 2122 0107 01       		.uleb128 0x1
 2123 0108 13       		.uleb128 0x13
 2124 0109 00       		.byte	0
 2125 010a 00       		.byte	0
 2126 010b 12       		.uleb128 0x12
 2127 010c 05       		.uleb128 0x5
 2128 010d 00       		.byte	0
 2129 010e 03       		.uleb128 0x3
 2130 010f 0E       		.uleb128 0xe
 2131 0110 3A       		.uleb128 0x3a
 2132 0111 0B       		.uleb128 0xb
 2133 0112 3B       		.uleb128 0x3b
 2134 0113 05       		.uleb128 0x5
 2135 0114 49       		.uleb128 0x49
 2136 0115 13       		.uleb128 0x13
 2137 0116 02       		.uleb128 0x2
 2138 0117 17       		.uleb128 0x17
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 78


 2139 0118 00       		.byte	0
 2140 0119 00       		.byte	0
 2141 011a 13       		.uleb128 0x13
 2142 011b 0F       		.uleb128 0xf
 2143 011c 00       		.byte	0
 2144 011d 0B       		.uleb128 0xb
 2145 011e 0B       		.uleb128 0xb
 2146 011f 49       		.uleb128 0x49
 2147 0120 13       		.uleb128 0x13
 2148 0121 00       		.byte	0
 2149 0122 00       		.byte	0
 2150 0123 14       		.uleb128 0x14
 2151 0124 34       		.uleb128 0x34
 2152 0125 00       		.byte	0
 2153 0126 03       		.uleb128 0x3
 2154 0127 08       		.uleb128 0x8
 2155 0128 3A       		.uleb128 0x3a
 2156 0129 0B       		.uleb128 0xb
 2157 012a 3B       		.uleb128 0x3b
 2158 012b 05       		.uleb128 0x5
 2159 012c 49       		.uleb128 0x49
 2160 012d 13       		.uleb128 0x13
 2161 012e 02       		.uleb128 0x2
 2162 012f 17       		.uleb128 0x17
 2163 0130 00       		.byte	0
 2164 0131 00       		.byte	0
 2165 0132 15       		.uleb128 0x15
 2166 0133 26       		.uleb128 0x26
 2167 0134 00       		.byte	0
 2168 0135 49       		.uleb128 0x49
 2169 0136 13       		.uleb128 0x13
 2170 0137 00       		.byte	0
 2171 0138 00       		.byte	0
 2172 0139 16       		.uleb128 0x16
 2173 013a 2E       		.uleb128 0x2e
 2174 013b 01       		.byte	0x1
 2175 013c 3F       		.uleb128 0x3f
 2176 013d 19       		.uleb128 0x19
 2177 013e 03       		.uleb128 0x3
 2178 013f 0E       		.uleb128 0xe
 2179 0140 3A       		.uleb128 0x3a
 2180 0141 0B       		.uleb128 0xb
 2181 0142 3B       		.uleb128 0x3b
 2182 0143 05       		.uleb128 0x5
 2183 0144 27       		.uleb128 0x27
 2184 0145 19       		.uleb128 0x19
 2185 0146 49       		.uleb128 0x49
 2186 0147 13       		.uleb128 0x13
 2187 0148 11       		.uleb128 0x11
 2188 0149 01       		.uleb128 0x1
 2189 014a 12       		.uleb128 0x12
 2190 014b 06       		.uleb128 0x6
 2191 014c 40       		.uleb128 0x40
 2192 014d 18       		.uleb128 0x18
 2193 014e 9742     		.uleb128 0x2117
 2194 0150 19       		.uleb128 0x19
 2195 0151 01       		.uleb128 0x1
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 79


 2196 0152 13       		.uleb128 0x13
 2197 0153 00       		.byte	0
 2198 0154 00       		.byte	0
 2199 0155 17       		.uleb128 0x17
 2200 0156 34       		.uleb128 0x34
 2201 0157 00       		.byte	0
 2202 0158 03       		.uleb128 0x3
 2203 0159 08       		.uleb128 0x8
 2204 015a 3A       		.uleb128 0x3a
 2205 015b 0B       		.uleb128 0xb
 2206 015c 3B       		.uleb128 0x3b
 2207 015d 05       		.uleb128 0x5
 2208 015e 49       		.uleb128 0x49
 2209 015f 13       		.uleb128 0x13
 2210 0160 02       		.uleb128 0x2
 2211 0161 18       		.uleb128 0x18
 2212 0162 00       		.byte	0
 2213 0163 00       		.byte	0
 2214 0164 18       		.uleb128 0x18
 2215 0165 2E       		.uleb128 0x2e
 2216 0166 00       		.byte	0
 2217 0167 3F       		.uleb128 0x3f
 2218 0168 19       		.uleb128 0x19
 2219 0169 03       		.uleb128 0x3
 2220 016a 0E       		.uleb128 0xe
 2221 016b 3A       		.uleb128 0x3a
 2222 016c 0B       		.uleb128 0xb
 2223 016d 3B       		.uleb128 0x3b
 2224 016e 05       		.uleb128 0x5
 2225 016f 27       		.uleb128 0x27
 2226 0170 19       		.uleb128 0x19
 2227 0171 11       		.uleb128 0x11
 2228 0172 01       		.uleb128 0x1
 2229 0173 12       		.uleb128 0x12
 2230 0174 06       		.uleb128 0x6
 2231 0175 40       		.uleb128 0x40
 2232 0176 18       		.uleb128 0x18
 2233 0177 9742     		.uleb128 0x2117
 2234 0179 19       		.uleb128 0x19
 2235 017a 00       		.byte	0
 2236 017b 00       		.byte	0
 2237 017c 19       		.uleb128 0x19
 2238 017d 34       		.uleb128 0x34
 2239 017e 00       		.byte	0
 2240 017f 03       		.uleb128 0x3
 2241 0180 0E       		.uleb128 0xe
 2242 0181 3A       		.uleb128 0x3a
 2243 0182 0B       		.uleb128 0xb
 2244 0183 3B       		.uleb128 0x3b
 2245 0184 05       		.uleb128 0x5
 2246 0185 49       		.uleb128 0x49
 2247 0186 13       		.uleb128 0x13
 2248 0187 02       		.uleb128 0x2
 2249 0188 18       		.uleb128 0x18
 2250 0189 00       		.byte	0
 2251 018a 00       		.byte	0
 2252 018b 1A       		.uleb128 0x1a
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 80


 2253 018c 05       		.uleb128 0x5
 2254 018d 00       		.byte	0
 2255 018e 03       		.uleb128 0x3
 2256 018f 0E       		.uleb128 0xe
 2257 0190 3A       		.uleb128 0x3a
 2258 0191 0B       		.uleb128 0xb
 2259 0192 3B       		.uleb128 0x3b
 2260 0193 05       		.uleb128 0x5
 2261 0194 49       		.uleb128 0x49
 2262 0195 13       		.uleb128 0x13
 2263 0196 02       		.uleb128 0x2
 2264 0197 18       		.uleb128 0x18
 2265 0198 00       		.byte	0
 2266 0199 00       		.byte	0
 2267 019a 1B       		.uleb128 0x1b
 2268 019b 05       		.uleb128 0x5
 2269 019c 00       		.byte	0
 2270 019d 03       		.uleb128 0x3
 2271 019e 08       		.uleb128 0x8
 2272 019f 3A       		.uleb128 0x3a
 2273 01a0 0B       		.uleb128 0xb
 2274 01a1 3B       		.uleb128 0x3b
 2275 01a2 05       		.uleb128 0x5
 2276 01a3 49       		.uleb128 0x49
 2277 01a4 13       		.uleb128 0x13
 2278 01a5 02       		.uleb128 0x2
 2279 01a6 17       		.uleb128 0x17
 2280 01a7 00       		.byte	0
 2281 01a8 00       		.byte	0
 2282 01a9 1C       		.uleb128 0x1c
 2283 01aa 34       		.uleb128 0x34
 2284 01ab 00       		.byte	0
 2285 01ac 03       		.uleb128 0x3
 2286 01ad 0E       		.uleb128 0xe
 2287 01ae 3A       		.uleb128 0x3a
 2288 01af 0B       		.uleb128 0xb
 2289 01b0 3B       		.uleb128 0x3b
 2290 01b1 05       		.uleb128 0x5
 2291 01b2 49       		.uleb128 0x49
 2292 01b3 13       		.uleb128 0x13
 2293 01b4 00       		.byte	0
 2294 01b5 00       		.byte	0
 2295 01b6 1D       		.uleb128 0x1d
 2296 01b7 01       		.uleb128 0x1
 2297 01b8 01       		.byte	0x1
 2298 01b9 49       		.uleb128 0x49
 2299 01ba 13       		.uleb128 0x13
 2300 01bb 01       		.uleb128 0x1
 2301 01bc 13       		.uleb128 0x13
 2302 01bd 00       		.byte	0
 2303 01be 00       		.byte	0
 2304 01bf 1E       		.uleb128 0x1e
 2305 01c0 21       		.uleb128 0x21
 2306 01c1 00       		.byte	0
 2307 01c2 49       		.uleb128 0x49
 2308 01c3 13       		.uleb128 0x13
 2309 01c4 2F       		.uleb128 0x2f
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 81


 2310 01c5 0B       		.uleb128 0xb
 2311 01c6 00       		.byte	0
 2312 01c7 00       		.byte	0
 2313 01c8 1F       		.uleb128 0x1f
 2314 01c9 34       		.uleb128 0x34
 2315 01ca 00       		.byte	0
 2316 01cb 03       		.uleb128 0x3
 2317 01cc 0E       		.uleb128 0xe
 2318 01cd 3A       		.uleb128 0x3a
 2319 01ce 0B       		.uleb128 0xb
 2320 01cf 3B       		.uleb128 0x3b
 2321 01d0 0B       		.uleb128 0xb
 2322 01d1 49       		.uleb128 0x49
 2323 01d2 13       		.uleb128 0x13
 2324 01d3 02       		.uleb128 0x2
 2325 01d4 18       		.uleb128 0x18
 2326 01d5 00       		.byte	0
 2327 01d6 00       		.byte	0
 2328 01d7 20       		.uleb128 0x20
 2329 01d8 34       		.uleb128 0x34
 2330 01d9 00       		.byte	0
 2331 01da 03       		.uleb128 0x3
 2332 01db 0E       		.uleb128 0xe
 2333 01dc 3A       		.uleb128 0x3a
 2334 01dd 0B       		.uleb128 0xb
 2335 01de 3B       		.uleb128 0x3b
 2336 01df 0B       		.uleb128 0xb
 2337 01e0 49       		.uleb128 0x49
 2338 01e1 13       		.uleb128 0x13
 2339 01e2 3F       		.uleb128 0x3f
 2340 01e3 19       		.uleb128 0x19
 2341 01e4 02       		.uleb128 0x2
 2342 01e5 18       		.uleb128 0x18
 2343 01e6 00       		.byte	0
 2344 01e7 00       		.byte	0
 2345 01e8 21       		.uleb128 0x21
 2346 01e9 2E       		.uleb128 0x2e
 2347 01ea 00       		.byte	0
 2348 01eb 3F       		.uleb128 0x3f
 2349 01ec 19       		.uleb128 0x19
 2350 01ed 3C       		.uleb128 0x3c
 2351 01ee 19       		.uleb128 0x19
 2352 01ef 6E       		.uleb128 0x6e
 2353 01f0 0E       		.uleb128 0xe
 2354 01f1 03       		.uleb128 0x3
 2355 01f2 0E       		.uleb128 0xe
 2356 01f3 3A       		.uleb128 0x3a
 2357 01f4 0B       		.uleb128 0xb
 2358 01f5 3B       		.uleb128 0x3b
 2359 01f6 05       		.uleb128 0x5
 2360 01f7 00       		.byte	0
 2361 01f8 00       		.byte	0
 2362 01f9 00       		.byte	0
 2363              		.section	.debug_loc,"",%progbits
 2364              	.Ldebug_loc0:
 2365              	.LLST0:
 2366 0000 02000000 		.4byte	.LVL1
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 82


 2367 0004 08000000 		.4byte	.LVL3
 2368 0008 0200     		.2byte	0x2
 2369 000a 30       		.byte	0x30
 2370 000b 9F       		.byte	0x9f
 2371 000c 08000000 		.4byte	.LVL3
 2372 0010 0C000000 		.4byte	.LVL4
 2373 0014 0100     		.2byte	0x1
 2374 0016 50       		.byte	0x50
 2375 0017 0C000000 		.4byte	.LVL4
 2376 001b 18000000 		.4byte	.LVL7
 2377 001f 0100     		.2byte	0x1
 2378 0021 54       		.byte	0x54
 2379 0022 00000000 		.4byte	0
 2380 0026 00000000 		.4byte	0
 2381              	.LLST1:
 2382 002a 00000000 		.4byte	.LVL11
 2383 002e 07000000 		.4byte	.LVL13-1
 2384 0032 0100     		.2byte	0x1
 2385 0034 50       		.byte	0x50
 2386 0035 07000000 		.4byte	.LVL13-1
 2387 0039 08000000 		.4byte	.LVL13
 2388 003d 0400     		.2byte	0x4
 2389 003f F3       		.byte	0xf3
 2390 0040 01       		.uleb128 0x1
 2391 0041 50       		.byte	0x50
 2392 0042 9F       		.byte	0x9f
 2393 0043 08000000 		.4byte	.LVL13
 2394 0047 17000000 		.4byte	.LVL14-1
 2395 004b 0100     		.2byte	0x1
 2396 004d 50       		.byte	0x50
 2397 004e 17000000 		.4byte	.LVL14-1
 2398 0052 30000000 		.4byte	.LVL19
 2399 0056 0100     		.2byte	0x1
 2400 0058 54       		.byte	0x54
 2401 0059 30000000 		.4byte	.LVL19
 2402 005d 34000000 		.4byte	.LFE4
 2403 0061 0400     		.2byte	0x4
 2404 0063 F3       		.byte	0xf3
 2405 0064 01       		.uleb128 0x1
 2406 0065 50       		.byte	0x50
 2407 0066 9F       		.byte	0x9f
 2408 0067 00000000 		.4byte	0
 2409 006b 00000000 		.4byte	0
 2410              	.LLST2:
 2411 006f 00000000 		.4byte	.LVL11
 2412 0073 07000000 		.4byte	.LVL13-1
 2413 0077 0100     		.2byte	0x1
 2414 0079 51       		.byte	0x51
 2415 007a 07000000 		.4byte	.LVL13-1
 2416 007e 08000000 		.4byte	.LVL13
 2417 0082 0400     		.2byte	0x4
 2418 0084 F3       		.byte	0xf3
 2419 0085 01       		.uleb128 0x1
 2420 0086 51       		.byte	0x51
 2421 0087 9F       		.byte	0x9f
 2422 0088 08000000 		.4byte	.LVL13
 2423 008c 17000000 		.4byte	.LVL14-1
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 83


 2424 0090 0100     		.2byte	0x1
 2425 0092 51       		.byte	0x51
 2426 0093 17000000 		.4byte	.LVL14-1
 2427 0097 30000000 		.4byte	.LVL19
 2428 009b 0100     		.2byte	0x1
 2429 009d 55       		.byte	0x55
 2430 009e 30000000 		.4byte	.LVL19
 2431 00a2 34000000 		.4byte	.LFE4
 2432 00a6 0400     		.2byte	0x4
 2433 00a8 F3       		.byte	0xf3
 2434 00a9 01       		.uleb128 0x1
 2435 00aa 51       		.byte	0x51
 2436 00ab 9F       		.byte	0x9f
 2437 00ac 00000000 		.4byte	0
 2438 00b0 00000000 		.4byte	0
 2439              	.LLST3:
 2440 00b4 02000000 		.4byte	.LVL12
 2441 00b8 1A000000 		.4byte	.LVL15
 2442 00bc 0200     		.2byte	0x2
 2443 00be 30       		.byte	0x30
 2444 00bf 9F       		.byte	0x9f
 2445 00c0 1A000000 		.4byte	.LVL15
 2446 00c4 20000000 		.4byte	.LVL16
 2447 00c8 0100     		.2byte	0x1
 2448 00ca 50       		.byte	0x50
 2449 00cb 20000000 		.4byte	.LVL16
 2450 00cf 30000000 		.4byte	.LVL19
 2451 00d3 0100     		.2byte	0x1
 2452 00d5 56       		.byte	0x56
 2453 00d6 00000000 		.4byte	0
 2454 00da 00000000 		.4byte	0
 2455              	.LLST4:
 2456 00de 00000000 		.4byte	.LVL20
 2457 00e2 07000000 		.4byte	.LVL22-1
 2458 00e6 0100     		.2byte	0x1
 2459 00e8 50       		.byte	0x50
 2460 00e9 07000000 		.4byte	.LVL22-1
 2461 00ed 08000000 		.4byte	.LVL22
 2462 00f1 0400     		.2byte	0x4
 2463 00f3 F3       		.byte	0xf3
 2464 00f4 01       		.uleb128 0x1
 2465 00f5 50       		.byte	0x50
 2466 00f6 9F       		.byte	0x9f
 2467 00f7 08000000 		.4byte	.LVL22
 2468 00fb 19000000 		.4byte	.LVL24-1
 2469 00ff 0100     		.2byte	0x1
 2470 0101 50       		.byte	0x50
 2471 0102 19000000 		.4byte	.LVL24-1
 2472 0106 42000000 		.4byte	.LVL31
 2473 010a 0100     		.2byte	0x1
 2474 010c 54       		.byte	0x54
 2475 010d 42000000 		.4byte	.LVL31
 2476 0111 48000000 		.4byte	.LFE5
 2477 0115 0400     		.2byte	0x4
 2478 0117 F3       		.byte	0xf3
 2479 0118 01       		.uleb128 0x1
 2480 0119 50       		.byte	0x50
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 84


 2481 011a 9F       		.byte	0x9f
 2482 011b 00000000 		.4byte	0
 2483 011f 00000000 		.4byte	0
 2484              	.LLST5:
 2485 0123 00000000 		.4byte	.LVL20
 2486 0127 07000000 		.4byte	.LVL22-1
 2487 012b 0100     		.2byte	0x1
 2488 012d 51       		.byte	0x51
 2489 012e 07000000 		.4byte	.LVL22-1
 2490 0132 08000000 		.4byte	.LVL22
 2491 0136 0400     		.2byte	0x4
 2492 0138 F3       		.byte	0xf3
 2493 0139 01       		.uleb128 0x1
 2494 013a 51       		.byte	0x51
 2495 013b 9F       		.byte	0x9f
 2496 013c 08000000 		.4byte	.LVL22
 2497 0140 16000000 		.4byte	.LVL23
 2498 0144 0100     		.2byte	0x1
 2499 0146 51       		.byte	0x51
 2500 0147 16000000 		.4byte	.LVL23
 2501 014b 42000000 		.4byte	.LVL31
 2502 014f 0100     		.2byte	0x1
 2503 0151 55       		.byte	0x55
 2504 0152 42000000 		.4byte	.LVL31
 2505 0156 48000000 		.4byte	.LFE5
 2506 015a 0400     		.2byte	0x4
 2507 015c F3       		.byte	0xf3
 2508 015d 01       		.uleb128 0x1
 2509 015e 51       		.byte	0x51
 2510 015f 9F       		.byte	0x9f
 2511 0160 00000000 		.4byte	0
 2512 0164 00000000 		.4byte	0
 2513              	.LLST6:
 2514 0168 1A000000 		.4byte	.LVL24
 2515 016c 21000000 		.4byte	.LVL25-1
 2516 0170 0100     		.2byte	0x1
 2517 0172 50       		.byte	0x50
 2518 0173 3A000000 		.4byte	.LVL30
 2519 0177 48000000 		.4byte	.LFE5
 2520 017b 0100     		.2byte	0x1
 2521 017d 50       		.byte	0x50
 2522 017e 00000000 		.4byte	0
 2523 0182 00000000 		.4byte	0
 2524              	.LLST7:
 2525 0186 02000000 		.4byte	.LVL21
 2526 018a 24000000 		.4byte	.LVL26
 2527 018e 0200     		.2byte	0x2
 2528 0190 30       		.byte	0x30
 2529 0191 9F       		.byte	0x9f
 2530 0192 24000000 		.4byte	.LVL26
 2531 0196 2A000000 		.4byte	.LVL27
 2532 019a 0100     		.2byte	0x1
 2533 019c 50       		.byte	0x50
 2534 019d 2A000000 		.4byte	.LVL27
 2535 01a1 3A000000 		.4byte	.LVL30
 2536 01a5 0100     		.2byte	0x1
 2537 01a7 56       		.byte	0x56
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 85


 2538 01a8 3A000000 		.4byte	.LVL30
 2539 01ac 48000000 		.4byte	.LFE5
 2540 01b0 0200     		.2byte	0x2
 2541 01b2 30       		.byte	0x30
 2542 01b3 9F       		.byte	0x9f
 2543 01b4 00000000 		.4byte	0
 2544 01b8 00000000 		.4byte	0
 2545              	.LLST8:
 2546 01bc 00000000 		.4byte	.LVL33
 2547 01c0 07000000 		.4byte	.LVL34-1
 2548 01c4 0100     		.2byte	0x1
 2549 01c6 50       		.byte	0x50
 2550 01c7 07000000 		.4byte	.LVL34-1
 2551 01cb 08000000 		.4byte	.LVL34
 2552 01cf 0400     		.2byte	0x4
 2553 01d1 F3       		.byte	0xf3
 2554 01d2 01       		.uleb128 0x1
 2555 01d3 50       		.byte	0x50
 2556 01d4 9F       		.byte	0x9f
 2557 01d5 08000000 		.4byte	.LVL34
 2558 01d9 0E000000 		.4byte	.LVL35
 2559 01dd 0100     		.2byte	0x1
 2560 01df 50       		.byte	0x50
 2561 01e0 0E000000 		.4byte	.LVL35
 2562 01e4 1C000000 		.4byte	.LVL36
 2563 01e8 0100     		.2byte	0x1
 2564 01ea 53       		.byte	0x53
 2565 01eb 1C000000 		.4byte	.LVL36
 2566 01ef 20000000 		.4byte	.LFE8
 2567 01f3 0400     		.2byte	0x4
 2568 01f5 F3       		.byte	0xf3
 2569 01f6 01       		.uleb128 0x1
 2570 01f7 50       		.byte	0x50
 2571 01f8 9F       		.byte	0x9f
 2572 01f9 00000000 		.4byte	0
 2573 01fd 00000000 		.4byte	0
 2574              	.LLST9:
 2575 0201 00000000 		.4byte	.LVL38
 2576 0205 05000000 		.4byte	.LVL39-1
 2577 0209 0100     		.2byte	0x1
 2578 020b 50       		.byte	0x50
 2579 020c 05000000 		.4byte	.LVL39-1
 2580 0210 0A000000 		.4byte	.LFE10
 2581 0214 0400     		.2byte	0x4
 2582 0216 F3       		.byte	0xf3
 2583 0217 01       		.uleb128 0x1
 2584 0218 50       		.byte	0x50
 2585 0219 9F       		.byte	0x9f
 2586 021a 00000000 		.4byte	0
 2587 021e 00000000 		.4byte	0
 2588              	.LLST10:
 2589 0222 06000000 		.4byte	.LVL39
 2590 0226 08000000 		.4byte	.LVL40
 2591 022a 0300     		.2byte	0x3
 2592 022c 70       		.byte	0x70
 2593 022d 68       		.sleb128 -24
 2594 022e 9F       		.byte	0x9f
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 86


 2595 022f 08000000 		.4byte	.LVL40
 2596 0233 0A000000 		.4byte	.LFE10
 2597 0237 0100     		.2byte	0x1
 2598 0239 50       		.byte	0x50
 2599 023a 00000000 		.4byte	0
 2600 023e 00000000 		.4byte	0
 2601              	.LLST11:
 2602 0242 00000000 		.4byte	.LVL41
 2603 0246 05000000 		.4byte	.LVL42-1
 2604 024a 0100     		.2byte	0x1
 2605 024c 50       		.byte	0x50
 2606 024d 05000000 		.4byte	.LVL42-1
 2607 0251 0A000000 		.4byte	.LFE11
 2608 0255 0400     		.2byte	0x4
 2609 0257 F3       		.byte	0xf3
 2610 0258 01       		.uleb128 0x1
 2611 0259 50       		.byte	0x50
 2612 025a 9F       		.byte	0x9f
 2613 025b 00000000 		.4byte	0
 2614 025f 00000000 		.4byte	0
 2615              	.LLST12:
 2616 0263 06000000 		.4byte	.LVL42
 2617 0267 08000000 		.4byte	.LVL43
 2618 026b 0300     		.2byte	0x3
 2619 026d 70       		.byte	0x70
 2620 026e 70       		.sleb128 -16
 2621 026f 9F       		.byte	0x9f
 2622 0270 08000000 		.4byte	.LVL43
 2623 0274 0A000000 		.4byte	.LFE11
 2624 0278 0100     		.2byte	0x1
 2625 027a 50       		.byte	0x50
 2626 027b 00000000 		.4byte	0
 2627 027f 00000000 		.4byte	0
 2628              	.LLST13:
 2629 0283 00000000 		.4byte	.LVL44
 2630 0287 05000000 		.4byte	.LVL45-1
 2631 028b 0100     		.2byte	0x1
 2632 028d 50       		.byte	0x50
 2633 028e 05000000 		.4byte	.LVL45-1
 2634 0292 08000000 		.4byte	.LFE12
 2635 0296 0400     		.2byte	0x4
 2636 0298 F3       		.byte	0xf3
 2637 0299 01       		.uleb128 0x1
 2638 029a 50       		.byte	0x50
 2639 029b 9F       		.byte	0x9f
 2640 029c 00000000 		.4byte	0
 2641 02a0 00000000 		.4byte	0
 2642              	.LLST14:
 2643 02a4 00000000 		.4byte	.LVL46
 2644 02a8 22000000 		.4byte	.LVL48
 2645 02ac 0600     		.2byte	0x6
 2646 02ae 50       		.byte	0x50
 2647 02af 93       		.byte	0x93
 2648 02b0 04       		.uleb128 0x4
 2649 02b1 51       		.byte	0x51
 2650 02b2 93       		.byte	0x93
 2651 02b3 04       		.uleb128 0x4
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 87


 2652 02b4 22000000 		.4byte	.LVL48
 2653 02b8 24000000 		.4byte	.LVL49
 2654 02bc 0600     		.2byte	0x6
 2655 02be F3       		.byte	0xf3
 2656 02bf 03       		.uleb128 0x3
 2657 02c0 F5       		.byte	0xf5
 2658 02c1 00       		.uleb128 0
 2659 02c2 25       		.uleb128 0x25
 2660 02c3 9F       		.byte	0x9f
 2661 02c4 24000000 		.4byte	.LVL49
 2662 02c8 2A000000 		.4byte	.LVL51
 2663 02cc 0600     		.2byte	0x6
 2664 02ce 50       		.byte	0x50
 2665 02cf 93       		.byte	0x93
 2666 02d0 04       		.uleb128 0x4
 2667 02d1 51       		.byte	0x51
 2668 02d2 93       		.byte	0x93
 2669 02d3 04       		.uleb128 0x4
 2670 02d4 2A000000 		.4byte	.LVL51
 2671 02d8 2E000000 		.4byte	.LVL53
 2672 02dc 0600     		.2byte	0x6
 2673 02de F3       		.byte	0xf3
 2674 02df 03       		.uleb128 0x3
 2675 02e0 F5       		.byte	0xf5
 2676 02e1 00       		.uleb128 0
 2677 02e2 25       		.uleb128 0x25
 2678 02e3 9F       		.byte	0x9f
 2679 02e4 2E000000 		.4byte	.LVL53
 2680 02e8 3E000000 		.4byte	.LVL55
 2681 02ec 0600     		.2byte	0x6
 2682 02ee 50       		.byte	0x50
 2683 02ef 93       		.byte	0x93
 2684 02f0 04       		.uleb128 0x4
 2685 02f1 51       		.byte	0x51
 2686 02f2 93       		.byte	0x93
 2687 02f3 04       		.uleb128 0x4
 2688 02f4 3E000000 		.4byte	.LVL55
 2689 02f8 42000000 		.4byte	.LVL57
 2690 02fc 0600     		.2byte	0x6
 2691 02fe F3       		.byte	0xf3
 2692 02ff 03       		.uleb128 0x3
 2693 0300 F5       		.byte	0xf5
 2694 0301 00       		.uleb128 0
 2695 0302 25       		.uleb128 0x25
 2696 0303 9F       		.byte	0x9f
 2697 0304 42000000 		.4byte	.LVL57
 2698 0308 46000000 		.4byte	.LVL58
 2699 030c 0600     		.2byte	0x6
 2700 030e 50       		.byte	0x50
 2701 030f 93       		.byte	0x93
 2702 0310 04       		.uleb128 0x4
 2703 0311 51       		.byte	0x51
 2704 0312 93       		.byte	0x93
 2705 0313 04       		.uleb128 0x4
 2706 0314 46000000 		.4byte	.LVL58
 2707 0318 4A000000 		.4byte	.LVL60
 2708 031c 0600     		.2byte	0x6
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 88


 2709 031e F3       		.byte	0xf3
 2710 031f 03       		.uleb128 0x3
 2711 0320 F5       		.byte	0xf5
 2712 0321 00       		.uleb128 0
 2713 0322 25       		.uleb128 0x25
 2714 0323 9F       		.byte	0x9f
 2715 0324 4A000000 		.4byte	.LVL60
 2716 0328 68000000 		.4byte	.LVL62
 2717 032c 0600     		.2byte	0x6
 2718 032e 50       		.byte	0x50
 2719 032f 93       		.byte	0x93
 2720 0330 04       		.uleb128 0x4
 2721 0331 51       		.byte	0x51
 2722 0332 93       		.byte	0x93
 2723 0333 04       		.uleb128 0x4
 2724 0334 68000000 		.4byte	.LVL62
 2725 0338 6C000000 		.4byte	.LVL64
 2726 033c 0600     		.2byte	0x6
 2727 033e F3       		.byte	0xf3
 2728 033f 03       		.uleb128 0x3
 2729 0340 F5       		.byte	0xf5
 2730 0341 00       		.uleb128 0
 2731 0342 25       		.uleb128 0x25
 2732 0343 9F       		.byte	0x9f
 2733 0344 6C000000 		.4byte	.LVL64
 2734 0348 76000000 		.4byte	.LVL66
 2735 034c 0600     		.2byte	0x6
 2736 034e 50       		.byte	0x50
 2737 034f 93       		.byte	0x93
 2738 0350 04       		.uleb128 0x4
 2739 0351 51       		.byte	0x51
 2740 0352 93       		.byte	0x93
 2741 0353 04       		.uleb128 0x4
 2742 0354 76000000 		.4byte	.LVL66
 2743 0358 7A000000 		.4byte	.LVL68
 2744 035c 0600     		.2byte	0x6
 2745 035e F3       		.byte	0xf3
 2746 035f 03       		.uleb128 0x3
 2747 0360 F5       		.byte	0xf5
 2748 0361 00       		.uleb128 0
 2749 0362 25       		.uleb128 0x25
 2750 0363 9F       		.byte	0x9f
 2751 0364 7A000000 		.4byte	.LVL68
 2752 0368 8E000000 		.4byte	.LVL70
 2753 036c 0600     		.2byte	0x6
 2754 036e 50       		.byte	0x50
 2755 036f 93       		.byte	0x93
 2756 0370 04       		.uleb128 0x4
 2757 0371 51       		.byte	0x51
 2758 0372 93       		.byte	0x93
 2759 0373 04       		.uleb128 0x4
 2760 0374 8E000000 		.4byte	.LVL70
 2761 0378 92000000 		.4byte	.LVL72
 2762 037c 0600     		.2byte	0x6
 2763 037e F3       		.byte	0xf3
 2764 037f 03       		.uleb128 0x3
 2765 0380 F5       		.byte	0xf5
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 89


 2766 0381 00       		.uleb128 0
 2767 0382 25       		.uleb128 0x25
 2768 0383 9F       		.byte	0x9f
 2769 0384 92000000 		.4byte	.LVL72
 2770 0388 96000000 		.4byte	.LVL73
 2771 038c 0600     		.2byte	0x6
 2772 038e 50       		.byte	0x50
 2773 038f 93       		.byte	0x93
 2774 0390 04       		.uleb128 0x4
 2775 0391 51       		.byte	0x51
 2776 0392 93       		.byte	0x93
 2777 0393 04       		.uleb128 0x4
 2778 0394 96000000 		.4byte	.LVL73
 2779 0398 A0000000 		.4byte	.LFE13
 2780 039c 0600     		.2byte	0x6
 2781 039e F3       		.byte	0xf3
 2782 039f 03       		.uleb128 0x3
 2783 03a0 F5       		.byte	0xf5
 2784 03a1 00       		.uleb128 0
 2785 03a2 25       		.uleb128 0x25
 2786 03a3 9F       		.byte	0x9f
 2787 03a4 00000000 		.4byte	0
 2788 03a8 00000000 		.4byte	0
 2789              	.LLST15:
 2790 03ac 1E000000 		.4byte	.LVL47
 2791 03b0 24000000 		.4byte	.LVL49
 2792 03b4 0100     		.2byte	0x1
 2793 03b6 53       		.byte	0x53
 2794 03b7 26000000 		.4byte	.LVL50
 2795 03bb 2E000000 		.4byte	.LVL53
 2796 03bf 0100     		.2byte	0x1
 2797 03c1 53       		.byte	0x53
 2798 03c2 3A000000 		.4byte	.LVL54
 2799 03c6 42000000 		.4byte	.LVL57
 2800 03ca 0100     		.2byte	0x1
 2801 03cc 53       		.byte	0x53
 2802 03cd 64000000 		.4byte	.LVL61
 2803 03d1 6C000000 		.4byte	.LVL64
 2804 03d5 0100     		.2byte	0x1
 2805 03d7 53       		.byte	0x53
 2806 03d8 72000000 		.4byte	.LVL65
 2807 03dc 7A000000 		.4byte	.LVL68
 2808 03e0 0100     		.2byte	0x1
 2809 03e2 53       		.byte	0x53
 2810 03e3 8A000000 		.4byte	.LVL69
 2811 03e7 92000000 		.4byte	.LVL72
 2812 03eb 0100     		.2byte	0x1
 2813 03ed 53       		.byte	0x53
 2814 03ee 00000000 		.4byte	0
 2815 03f2 00000000 		.4byte	0
 2816              	.LLST16:
 2817 03f6 22000000 		.4byte	.LVL48
 2818 03fa 24000000 		.4byte	.LVL49
 2819 03fe 0100     		.2byte	0x1
 2820 0400 50       		.byte	0x50
 2821 0401 2C000000 		.4byte	.LVL52
 2822 0405 2E000000 		.4byte	.LVL53
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 90


 2823 0409 0100     		.2byte	0x1
 2824 040b 50       		.byte	0x50
 2825 040c 40000000 		.4byte	.LVL56
 2826 0410 42000000 		.4byte	.LVL57
 2827 0414 0100     		.2byte	0x1
 2828 0416 50       		.byte	0x50
 2829 0417 48000000 		.4byte	.LVL59
 2830 041b 4A000000 		.4byte	.LVL60
 2831 041f 0100     		.2byte	0x1
 2832 0421 50       		.byte	0x50
 2833 0422 6A000000 		.4byte	.LVL63
 2834 0426 6C000000 		.4byte	.LVL64
 2835 042a 0100     		.2byte	0x1
 2836 042c 50       		.byte	0x50
 2837 042d 78000000 		.4byte	.LVL67
 2838 0431 7A000000 		.4byte	.LVL68
 2839 0435 0100     		.2byte	0x1
 2840 0437 50       		.byte	0x50
 2841 0438 90000000 		.4byte	.LVL71
 2842 043c 92000000 		.4byte	.LVL72
 2843 0440 0100     		.2byte	0x1
 2844 0442 50       		.byte	0x50
 2845 0443 98000000 		.4byte	.LVL74
 2846 0447 A0000000 		.4byte	.LFE13
 2847 044b 0100     		.2byte	0x1
 2848 044d 50       		.byte	0x50
 2849 044e 00000000 		.4byte	0
 2850 0452 00000000 		.4byte	0
 2851              	.LLST17:
 2852 0456 00000000 		.4byte	.LVL75
 2853 045a 07000000 		.4byte	.LVL76-1
 2854 045e 0100     		.2byte	0x1
 2855 0460 50       		.byte	0x50
 2856 0461 07000000 		.4byte	.LVL76-1
 2857 0465 0A000000 		.4byte	.LVL77
 2858 0469 0400     		.2byte	0x4
 2859 046b F3       		.byte	0xf3
 2860 046c 01       		.uleb128 0x1
 2861 046d 50       		.byte	0x50
 2862 046e 9F       		.byte	0x9f
 2863 046f 0A000000 		.4byte	.LVL77
 2864 0473 0C000000 		.4byte	.LVL78
 2865 0477 0100     		.2byte	0x1
 2866 0479 50       		.byte	0x50
 2867 047a 0C000000 		.4byte	.LVL78
 2868 047e 0E000000 		.4byte	.LFE14
 2869 0482 0400     		.2byte	0x4
 2870 0484 F3       		.byte	0xf3
 2871 0485 01       		.uleb128 0x1
 2872 0486 50       		.byte	0x50
 2873 0487 9F       		.byte	0x9f
 2874 0488 00000000 		.4byte	0
 2875 048c 00000000 		.4byte	0
 2876              	.LLST18:
 2877 0490 00000000 		.4byte	.LVL79
 2878 0494 07000000 		.4byte	.LVL80-1
 2879 0498 0100     		.2byte	0x1
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 91


 2880 049a 50       		.byte	0x50
 2881 049b 07000000 		.4byte	.LVL80-1
 2882 049f 0A000000 		.4byte	.LVL81
 2883 04a3 0400     		.2byte	0x4
 2884 04a5 F3       		.byte	0xf3
 2885 04a6 01       		.uleb128 0x1
 2886 04a7 50       		.byte	0x50
 2887 04a8 9F       		.byte	0x9f
 2888 04a9 0A000000 		.4byte	.LVL81
 2889 04ad 0C000000 		.4byte	.LVL82
 2890 04b1 0100     		.2byte	0x1
 2891 04b3 50       		.byte	0x50
 2892 04b4 0C000000 		.4byte	.LVL82
 2893 04b8 0E000000 		.4byte	.LFE15
 2894 04bc 0400     		.2byte	0x4
 2895 04be F3       		.byte	0xf3
 2896 04bf 01       		.uleb128 0x1
 2897 04c0 50       		.byte	0x50
 2898 04c1 9F       		.byte	0x9f
 2899 04c2 00000000 		.4byte	0
 2900 04c6 00000000 		.4byte	0
 2901              	.LLST19:
 2902 04ca 00000000 		.4byte	.LVL83
 2903 04ce 07000000 		.4byte	.LVL84-1
 2904 04d2 0100     		.2byte	0x1
 2905 04d4 50       		.byte	0x50
 2906 04d5 07000000 		.4byte	.LVL84-1
 2907 04d9 0A000000 		.4byte	.LVL85
 2908 04dd 0400     		.2byte	0x4
 2909 04df F3       		.byte	0xf3
 2910 04e0 01       		.uleb128 0x1
 2911 04e1 50       		.byte	0x50
 2912 04e2 9F       		.byte	0x9f
 2913 04e3 0A000000 		.4byte	.LVL85
 2914 04e7 0C000000 		.4byte	.LVL86
 2915 04eb 0100     		.2byte	0x1
 2916 04ed 50       		.byte	0x50
 2917 04ee 0C000000 		.4byte	.LVL86
 2918 04f2 0E000000 		.4byte	.LFE16
 2919 04f6 0400     		.2byte	0x4
 2920 04f8 F3       		.byte	0xf3
 2921 04f9 01       		.uleb128 0x1
 2922 04fa 50       		.byte	0x50
 2923 04fb 9F       		.byte	0x9f
 2924 04fc 00000000 		.4byte	0
 2925 0500 00000000 		.4byte	0
 2926              	.LLST20:
 2927 0504 00000000 		.4byte	.LVL87
 2928 0508 10000000 		.4byte	.LVL89
 2929 050c 0600     		.2byte	0x6
 2930 050e 50       		.byte	0x50
 2931 050f 93       		.byte	0x93
 2932 0510 04       		.uleb128 0x4
 2933 0511 51       		.byte	0x51
 2934 0512 93       		.byte	0x93
 2935 0513 04       		.uleb128 0x4
 2936 0514 10000000 		.4byte	.LVL89
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 92


 2937 0518 1C000000 		.4byte	.LVL92
 2938 051c 0600     		.2byte	0x6
 2939 051e F3       		.byte	0xf3
 2940 051f 03       		.uleb128 0x3
 2941 0520 F5       		.byte	0xf5
 2942 0521 00       		.uleb128 0
 2943 0522 25       		.uleb128 0x25
 2944 0523 9F       		.byte	0x9f
 2945 0524 1C000000 		.4byte	.LVL92
 2946 0528 1E000000 		.4byte	.LVL93
 2947 052c 0600     		.2byte	0x6
 2948 052e 50       		.byte	0x50
 2949 052f 93       		.byte	0x93
 2950 0530 04       		.uleb128 0x4
 2951 0531 51       		.byte	0x51
 2952 0532 93       		.byte	0x93
 2953 0533 04       		.uleb128 0x4
 2954 0534 1E000000 		.4byte	.LVL93
 2955 0538 20000000 		.4byte	.LFE17
 2956 053c 0600     		.2byte	0x6
 2957 053e F3       		.byte	0xf3
 2958 053f 03       		.uleb128 0x3
 2959 0540 F5       		.byte	0xf5
 2960 0541 00       		.uleb128 0
 2961 0542 25       		.uleb128 0x25
 2962 0543 9F       		.byte	0x9f
 2963 0544 00000000 		.4byte	0
 2964 0548 00000000 		.4byte	0
 2965              	.LLST21:
 2966 054c 0E000000 		.4byte	.LVL88
 2967 0550 10000000 		.4byte	.LVL89
 2968 0554 0800     		.2byte	0x8
 2969 0556 F5       		.byte	0xf5
 2970 0557 00       		.uleb128 0
 2971 0558 25       		.uleb128 0x25
 2972 0559 F5       		.byte	0xf5
 2973 055a 02       		.uleb128 0x2
 2974 055b 25       		.uleb128 0x25
 2975 055c 1A       		.byte	0x1a
 2976 055d 9F       		.byte	0x9f
 2977 055e 10000000 		.4byte	.LVL89
 2978 0562 15000000 		.4byte	.LVL90-1
 2979 0566 0A00     		.2byte	0xa
 2980 0568 F3       		.byte	0xf3
 2981 0569 03       		.uleb128 0x3
 2982 056a F5       		.byte	0xf5
 2983 056b 00       		.uleb128 0
 2984 056c 25       		.uleb128 0x25
 2985 056d F5       		.byte	0xf5
 2986 056e 02       		.uleb128 0x2
 2987 056f 25       		.uleb128 0x25
 2988 0570 1A       		.byte	0x1a
 2989 0571 9F       		.byte	0x9f
 2990 0572 00000000 		.4byte	0
 2991 0576 00000000 		.4byte	0
 2992              	.LLST22:
 2993 057a 16000000 		.4byte	.LVL90
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 93


 2994 057e 1A000000 		.4byte	.LVL91
 2995 0582 0100     		.2byte	0x1
 2996 0584 50       		.byte	0x50
 2997 0585 00000000 		.4byte	0
 2998 0589 00000000 		.4byte	0
 2999              		.section	.debug_aranges,"",%progbits
 3000 0000 AC000000 		.4byte	0xac
 3001 0004 0200     		.2byte	0x2
 3002 0006 00000000 		.4byte	.Ldebug_info0
 3003 000a 04       		.byte	0x4
 3004 000b 00       		.byte	0
 3005 000c 0000     		.2byte	0
 3006 000e 0000     		.2byte	0
 3007 0010 00000000 		.4byte	.LFB19
 3008 0014 14000000 		.4byte	.LFE19-.LFB19
 3009 0018 00000000 		.4byte	.LFB2
 3010 001c 02000000 		.4byte	.LFE2-.LFB2
 3011 0020 00000000 		.4byte	.LFB3
 3012 0024 1C000000 		.4byte	.LFE3-.LFB3
 3013 0028 00000000 		.4byte	.LFB18
 3014 002c 08000000 		.4byte	.LFE18-.LFB18
 3015 0030 00000000 		.4byte	.LFB1
 3016 0034 0C000000 		.4byte	.LFE1-.LFB1
 3017 0038 00000000 		.4byte	.LFB4
 3018 003c 34000000 		.4byte	.LFE4-.LFB4
 3019 0040 00000000 		.4byte	.LFB5
 3020 0044 48000000 		.4byte	.LFE5-.LFB5
 3021 0048 00000000 		.4byte	.LFB6
 3022 004c 08000000 		.4byte	.LFE6-.LFB6
 3023 0050 00000000 		.4byte	.LFB7
 3024 0054 02000000 		.4byte	.LFE7-.LFB7
 3025 0058 00000000 		.4byte	.LFB8
 3026 005c 20000000 		.4byte	.LFE8-.LFB8
 3027 0060 00000000 		.4byte	.LFB9
 3028 0064 0C000000 		.4byte	.LFE9-.LFB9
 3029 0068 00000000 		.4byte	.LFB10
 3030 006c 0A000000 		.4byte	.LFE10-.LFB10
 3031 0070 00000000 		.4byte	.LFB11
 3032 0074 0A000000 		.4byte	.LFE11-.LFB11
 3033 0078 00000000 		.4byte	.LFB12
 3034 007c 08000000 		.4byte	.LFE12-.LFB12
 3035 0080 00000000 		.4byte	.LFB13
 3036 0084 A0000000 		.4byte	.LFE13-.LFB13
 3037 0088 00000000 		.4byte	.LFB14
 3038 008c 0E000000 		.4byte	.LFE14-.LFB14
 3039 0090 00000000 		.4byte	.LFB15
 3040 0094 0E000000 		.4byte	.LFE15-.LFB15
 3041 0098 00000000 		.4byte	.LFB16
 3042 009c 0E000000 		.4byte	.LFE16-.LFB16
 3043 00a0 00000000 		.4byte	.LFB17
 3044 00a4 20000000 		.4byte	.LFE17-.LFB17
 3045 00a8 00000000 		.4byte	0
 3046 00ac 00000000 		.4byte	0
 3047              		.section	.debug_ranges,"",%progbits
 3048              	.Ldebug_ranges0:
 3049 0000 00000000 		.4byte	.LFB19
 3050 0004 14000000 		.4byte	.LFE19
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 94


 3051 0008 00000000 		.4byte	.LFB2
 3052 000c 02000000 		.4byte	.LFE2
 3053 0010 00000000 		.4byte	.LFB3
 3054 0014 1C000000 		.4byte	.LFE3
 3055 0018 00000000 		.4byte	.LFB18
 3056 001c 08000000 		.4byte	.LFE18
 3057 0020 00000000 		.4byte	.LFB1
 3058 0024 0C000000 		.4byte	.LFE1
 3059 0028 00000000 		.4byte	.LFB4
 3060 002c 34000000 		.4byte	.LFE4
 3061 0030 00000000 		.4byte	.LFB5
 3062 0034 48000000 		.4byte	.LFE5
 3063 0038 00000000 		.4byte	.LFB6
 3064 003c 08000000 		.4byte	.LFE6
 3065 0040 00000000 		.4byte	.LFB7
 3066 0044 02000000 		.4byte	.LFE7
 3067 0048 00000000 		.4byte	.LFB8
 3068 004c 20000000 		.4byte	.LFE8
 3069 0050 00000000 		.4byte	.LFB9
 3070 0054 0C000000 		.4byte	.LFE9
 3071 0058 00000000 		.4byte	.LFB10
 3072 005c 0A000000 		.4byte	.LFE10
 3073 0060 00000000 		.4byte	.LFB11
 3074 0064 0A000000 		.4byte	.LFE11
 3075 0068 00000000 		.4byte	.LFB12
 3076 006c 08000000 		.4byte	.LFE12
 3077 0070 00000000 		.4byte	.LFB13
 3078 0074 A0000000 		.4byte	.LFE13
 3079 0078 00000000 		.4byte	.LFB14
 3080 007c 0E000000 		.4byte	.LFE14
 3081 0080 00000000 		.4byte	.LFB15
 3082 0084 0E000000 		.4byte	.LFE15
 3083 0088 00000000 		.4byte	.LFB16
 3084 008c 0E000000 		.4byte	.LFE16
 3085 0090 00000000 		.4byte	.LFB17
 3086 0094 20000000 		.4byte	.LFE17
 3087 0098 00000000 		.4byte	0
 3088 009c 00000000 		.4byte	0
 3089              		.section	.debug_line,"",%progbits
 3090              	.Ldebug_line0:
 3091 0000 5C020000 		.section	.debug_str,"MS",%progbits,1
 3091      02008600 
 3091      00000201 
 3091      FB0E0D00 
 3091      01010101 
 3092              	.LASF24:
 3093 0000 4350555F 		.ascii	"CPU_ERR_NULL_PTR\000"
 3093      4552525F 
 3093      4E554C4C 
 3093      5F505452 
 3093      00
 3094              	.LASF64:
 3095 0011 4350555F 		.ascii	"CPU_CntLeadZeros\000"
 3095      436E744C 
 3095      6561645A 
 3095      65726F73 
 3095      00
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 95


 3096              	.LASF46:
 3097 0022 4350555F 		.ascii	"CPU_CntLeadZeros32\000"
 3097      436E744C 
 3097      6561645A 
 3097      65726F73 
 3097      333200
 3098              	.LASF17:
 3099 0035 4350555F 		.ascii	"CPU_SIZE_T\000"
 3099      53495A45 
 3099      5F5400
 3100              	.LASF9:
 3101 0040 4350555F 		.ascii	"CPU_INT32U\000"
 3101      494E5433 
 3101      325500
 3102              	.LASF59:
 3103 004b 4D656D5F 		.ascii	"Mem_Clr\000"
 3103      436C7200 
 3104              	.LASF0:
 3105 0053 6C6F6E67 		.ascii	"long long unsigned int\000"
 3105      206C6F6E 
 3105      6720756E 
 3105      7369676E 
 3105      65642069 
 3106              	.LASF52:
 3107 006a 4350555F 		.ascii	"CPU_CntTrailZeros64\000"
 3107      436E7454 
 3107      7261696C 
 3107      5A65726F 
 3107      73363400 
 3108              	.LASF29:
 3109 007e 4350555F 		.ascii	"CPU_TS_TMR_FREQ\000"
 3109      54535F54 
 3109      4D525F46 
 3109      52455100 
 3110              	.LASF12:
 3111 008e 6C6F6E67 		.ascii	"long long int\000"
 3111      206C6F6E 
 3111      6720696E 
 3111      7400
 3112              	.LASF5:
 3113 009c 7369676E 		.ascii	"signed char\000"
 3113      65642063 
 3113      68617200 
 3114              	.LASF3:
 3115 00a8 4350555F 		.ascii	"CPU_CHAR\000"
 3115      43484152 
 3115      00
 3116              	.LASF42:
 3117 00b1 4350555F 		.ascii	"CPU_TS_TmrFreqSet\000"
 3117      54535F54 
 3117      6D724672 
 3117      65715365 
 3117      7400
 3118              	.LASF68:
 3119 00c3 5C5C4D61 		.ascii	"\\\\Mac\\Home\\Documents\\cypress\\esw_bmp280_Petro"
 3119      635C486F 
 3119      6D655C44 
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 96


 3119      6F63756D 
 3119      656E7473 
 3120 00f0 7669635F 		.ascii	"vic_Wagner\\BMP280_CY8CKIT_059.cydsn\000"
 3120      5761676E 
 3120      65725C42 
 3120      4D503238 
 3120      305F4359 
 3121              	.LASF19:
 3122 0114 6C6F6E67 		.ascii	"long int\000"
 3122      20696E74 
 3122      00
 3123              	.LASF25:
 3124 011d 4350555F 		.ascii	"CPU_ERR_NAME_SIZE\000"
 3124      4552525F 
 3124      4E414D45 
 3124      5F53495A 
 3124      4500
 3125              	.LASF37:
 3126 012f 6370755F 		.ascii	"cpu_sr\000"
 3126      737200
 3127              	.LASF14:
 3128 0136 646F7562 		.ascii	"double\000"
 3128      6C6500
 3129              	.LASF55:
 3130 013d 4350555F 		.ascii	"CPU_Name\000"
 3130      4E616D65 
 3130      00
 3131              	.LASF27:
 3132 0146 4350555F 		.ascii	"CPU_ERR\000"
 3132      45525200 
 3133              	.LASF57:
 3134 014e 4350555F 		.ascii	"CPU_TS_TmrInit\000"
 3134      54535F54 
 3134      6D72496E 
 3134      697400
 3135              	.LASF62:
 3136 015d 5374725F 		.ascii	"Str_Len_N\000"
 3136      4C656E5F 
 3136      4E00
 3137              	.LASF26:
 3138 0167 4350555F 		.ascii	"CPU_ERR_TS_FREQ_INVALID\000"
 3138      4552525F 
 3138      54535F46 
 3138      5245515F 
 3138      494E5641 
 3139              	.LASF48:
 3140 017f 4350555F 		.ascii	"CPU_CntTrailZeros08\000"
 3140      436E7454 
 3140      7261696C 
 3140      5A65726F 
 3140      73303800 
 3141              	.LASF31:
 3142 0193 4350555F 		.ascii	"CPU_NameInit\000"
 3142      4E616D65 
 3142      496E6974 
 3142      00
 3143              	.LASF10:
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 97


 3144 01a0 756E7369 		.ascii	"unsigned int\000"
 3144      676E6564 
 3144      20696E74 
 3144      00
 3145              	.LASF23:
 3146 01ad 4350555F 		.ascii	"CPU_ERR_NONE\000"
 3146      4552525F 
 3146      4E4F4E45 
 3146      00
 3147              	.LASF40:
 3148 01ba 4350555F 		.ascii	"CPU_TS_TmrFreqGet\000"
 3148      54535F54 
 3148      6D724672 
 3148      65714765 
 3148      7400
 3149              	.LASF36:
 3150 01cc 705F6572 		.ascii	"p_err\000"
 3150      7200
 3151              	.LASF20:
 3152 01d2 6C6F6E67 		.ascii	"long unsigned int\000"
 3152      20756E73 
 3152      69676E65 
 3152      6420696E 
 3152      7400
 3153              	.LASF4:
 3154 01e4 4350555F 		.ascii	"CPU_INT08U\000"
 3154      494E5430 
 3154      385500
 3155              	.LASF7:
 3156 01ef 73686F72 		.ascii	"short unsigned int\000"
 3156      7420756E 
 3156      7369676E 
 3156      65642069 
 3156      6E7400
 3157              	.LASF65:
 3158 0202 4350555F 		.ascii	"CPU_CntTrailZeros\000"
 3158      436E7454 
 3158      7261696C 
 3158      5A65726F 
 3158      7300
 3159              	.LASF41:
 3160 0214 66726571 		.ascii	"freq_hz\000"
 3160      5F687A00 
 3161              	.LASF47:
 3162 021c 4350555F 		.ascii	"CPU_CntLeadZeros64\000"
 3162      436E744C 
 3162      6561645A 
 3162      65726F73 
 3162      363400
 3163              	.LASF18:
 3164 022f 4350555F 		.ascii	"CPU_SR\000"
 3164      535200
 3165              	.LASF49:
 3166 0236 4350555F 		.ascii	"CPU_CntTrailZeros16\000"
 3166      436E7454 
 3166      7261696C 
 3166      5A65726F 
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 98


 3166      73313600 
 3167              	.LASF54:
 3168 024a 4350555F 		.ascii	"CPU_CntLeadZerosTbl\000"
 3168      436E744C 
 3168      6561645A 
 3168      65726F73 
 3168      54626C00 
 3169              	.LASF15:
 3170 025e 4350555F 		.ascii	"CPU_ADDR\000"
 3170      41444452 
 3170      00
 3171              	.LASF22:
 3172 0267 73697A65 		.ascii	"sizetype\000"
 3172      74797065 
 3172      00
 3173              	.LASF21:
 3174 0270 6C6F6E67 		.ascii	"long double\000"
 3174      20646F75 
 3174      626C6500 
 3175              	.LASF13:
 3176 027c 666C6F61 		.ascii	"float\000"
 3176      7400
 3177              	.LASF56:
 3178 0282 4350555F 		.ascii	"CPU_TS_TmrFreq_Hz\000"
 3178      54535F54 
 3178      6D724672 
 3178      65715F48 
 3178      7A00
 3179              	.LASF43:
 3180 0294 4350555F 		.ascii	"CPU_CntLeadZeros08\000"
 3180      436E744C 
 3180      6561645A 
 3180      65726F73 
 3180      303800
 3181              	.LASF2:
 3182 02a7 756E7369 		.ascii	"unsigned char\000"
 3182      676E6564 
 3182      20636861 
 3182      7200
 3183              	.LASF63:
 3184 02b5 4350555F 		.ascii	"CPU_TS_TmrRd\000"
 3184      54535F54 
 3184      6D725264 
 3184      00
 3185              	.LASF67:
 3186 02c2 75432D43 		.ascii	"uC-CPU\\cpu_core.c\000"
 3186      50555C63 
 3186      70755F63 
 3186      6F72652E 
 3186      6300
 3187              	.LASF34:
 3188 02d4 4350555F 		.ascii	"CPU_NameGet\000"
 3188      4E616D65 
 3188      47657400 
 3189              	.LASF8:
 3190 02e0 73686F72 		.ascii	"short int\000"
 3190      7420696E 
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 99


 3190      7400
 3191              	.LASF32:
 3192 02ea 4350555F 		.ascii	"CPU_NameClr\000"
 3192      4E616D65 
 3192      436C7200 
 3193              	.LASF28:
 3194 02f6 4350555F 		.ascii	"CPU_TS32\000"
 3194      54533332 
 3194      00
 3195              	.LASF51:
 3196 02ff 4350555F 		.ascii	"CPU_CntTrailZeros32\000"
 3196      436E7454 
 3196      7261696C 
 3196      5A65726F 
 3196      73333200 
 3197              	.LASF71:
 3198 0313 4350555F 		.ascii	"CPU_TS_Update\000"
 3198      54535F55 
 3198      70646174 
 3198      6500
 3199              	.LASF66:
 3200 0321 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3200      43313120 
 3200      352E342E 
 3200      31203230 
 3200      31363036 
 3201 0354 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 3201      20726576 
 3201      6973696F 
 3201      6E203233 
 3201      37373135 
 3202 0387 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 3202      66756E63 
 3202      74696F6E 
 3202      2D736563 
 3202      74696F6E 
 3203              	.LASF50:
 3204 03af 6E62725F 		.ascii	"nbr_trail_zeros\000"
 3204      74726169 
 3204      6C5F7A65 
 3204      726F7300 
 3205              	.LASF11:
 3206 03bf 4350555F 		.ascii	"CPU_INT64U\000"
 3206      494E5436 
 3206      345500
 3207              	.LASF1:
 3208 03ca 63686172 		.ascii	"char\000"
 3208      00
 3209              	.LASF45:
 3210 03cf 4350555F 		.ascii	"CPU_CntLeadZeros16\000"
 3210      436E744C 
 3210      6561645A 
 3210      65726F73 
 3210      313600
 3211              	.LASF16:
 3212 03e2 4350555F 		.ascii	"CPU_DATA\000"
 3212      44415441 
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 100


 3212      00
 3213              	.LASF58:
 3214 03eb 4350555F 		.ascii	"CPU_SR_Save\000"
 3214      53525F53 
 3214      61766500 
 3215              	.LASF39:
 3216 03f7 4350555F 		.ascii	"CPU_TS_Get32\000"
 3216      54535F47 
 3216      65743332 
 3216      00
 3217              	.LASF70:
 3218 0404 4350555F 		.ascii	"CPU_SW_Exception\000"
 3218      53575F45 
 3218      78636570 
 3218      74696F6E 
 3218      00
 3219              	.LASF60:
 3220 0415 4350555F 		.ascii	"CPU_SR_Restore\000"
 3220      53525F52 
 3220      6573746F 
 3220      726500
 3221              	.LASF69:
 3222 0424 6370755F 		.ascii	"cpu_err\000"
 3222      65727200 
 3223              	.LASF38:
 3224 042c 4350555F 		.ascii	"CPU_NameSet\000"
 3224      4E616D65 
 3224      53657400 
 3225              	.LASF53:
 3226 0438 76616C5F 		.ascii	"val_bit_mask\000"
 3226      6269745F 
 3226      6D61736B 
 3226      00
 3227              	.LASF61:
 3228 0445 5374725F 		.ascii	"Str_Copy_N\000"
 3228      436F7079 
 3228      5F4E00
 3229              	.LASF6:
 3230 0450 4350555F 		.ascii	"CPU_INT16U\000"
 3230      494E5431 
 3230      365500
 3231              	.LASF35:
 3232 045b 705F6E61 		.ascii	"p_name\000"
 3232      6D6500
 3233              	.LASF33:
 3234 0462 4350555F 		.ascii	"CPU_Init\000"
 3234      496E6974 
 3234      00
 3235              	.LASF30:
 3236 046b 4350555F 		.ascii	"CPU_TS_Init\000"
 3236      54535F49 
 3236      6E697400 
 3237              	.LASF44:
 3238 0477 6E62725F 		.ascii	"nbr_lead_zeros\000"
 3238      6C656164 
 3238      5F7A6572 
 3238      6F7300
ARM GAS  C:\Users\filip\AppData\Local\Temp\ccaWnLc4.s 			page 101


 3239              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
